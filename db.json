{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/head.png","path":"images/head.png","modified":0,"renderable":0},{"_id":"source/love/love.html","path":"love/love.html","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/love/day.mp3","path":"love/day.mp3","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e7b9f760188d5a50e562c5d4f30448e1829da093","modified":1558962716530},{"_id":"source/CNAME","hash":"5ba4bb3e899f5c7d3b1858841b08943306b73d72","modified":1558962364194},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1558962364195},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1558962364195},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1558962364195},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1558962364196},{"_id":"themes/landscape/_config.yml","hash":"59ddcc4fa18ec2f0470a357bb969b69236d32ca9","modified":1559032645873},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1558962364203},{"_id":"source/_posts/.DS_Store","hash":"b04f98e10b78c963389da992eff8a8d3c7b099e7","modified":1564900310668},{"_id":"source/_posts/2019年第1周_2019_08_05.md","hash":"5492a64904e6eca1845b3a8c0cd478d45e929b33","modified":1564910720800},{"_id":"source/_posts/iOS-源代码分析-Masonry.md","hash":"e3a0ed86e75cbc5d399e43d0380a7bd18831b998","modified":1559037251281},{"_id":"source/_posts/iOS对象是如何初始化的.md","hash":"74bb0ad51acdc6f9d2155b83c579af695a110c94","modified":1559037260751},{"_id":"source/_posts/iOS面试题整理.md","hash":"96f0755792d26ea3597746eea2f0c8743c0cfa3c","modified":1559260762919},{"_id":"source/_posts/javascript-一.md","hash":"6019dfb87f05f4f4ff36881f3298833fc0d8bfce","modified":1559037389320},{"_id":"source/_posts/javascript-七.md","hash":"fa9c08c4baf1c29886d715e714e27bcde19d6bc4","modified":1559037339267},{"_id":"source/_posts/javascript-三.md","hash":"fc5f247bc0a4278a56437a18a4d7fd3cdb53d6b5","modified":1559037345935},{"_id":"source/_posts/javascript-二.md","hash":"8a84dc0ca2e37e64462f7e90c3795c479a06e9cf","modified":1559037294805},{"_id":"source/_posts/javascript-九.md","hash":"dd10699fa910f83a466aafe2955978551cd39b55","modified":1559037316662},{"_id":"source/_posts/javascript-五.md","hash":"da8d5a38291b4d2f0dc7ce175abaafc727e34a2a","modified":1559037374056},{"_id":"source/_posts/javascript-八.md","hash":"dc720a7a42b40fe2801ef0767053c220c3560f6e","modified":1559037282428},{"_id":"source/_posts/javascript-六.md","hash":"b1b111f2a6e35bb75f5c206e4841c0ba22091b16","modified":1559037330785},{"_id":"source/_posts/javascript-十.md","hash":"e645c1da737126ed2aead99fd707055b3472c571","modified":1559037355092},{"_id":"source/_posts/javascript-四.md","hash":"a44c3bf16da805bd7ac4e4f3627f424f53ab5f60","modified":1559037368118},{"_id":"source/_posts/javascript-十一.md","hash":"bb5969d28afab4c81ff3097e43594b4845de26ce","modified":1559037361384},{"_id":"source/_posts/成熟的夜间模式方案.md","hash":"9651697931696fcd6dcf4b17866b59c31353befc","modified":1559037238857},{"_id":"source/categories/index.md","hash":"cfefbcf5842ed3147f3bae5f09399f9d2e6983ad","modified":1559030993591},{"_id":"source/about/index.md","hash":"4c3f9db7151d66cd789c9a46a3729680051d7304","modified":1559032559211},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1558961263574},{"_id":"source/images/head.png","hash":"c880d984eb151afe1a52300edb568946da558cb6","modified":1558962364195},{"_id":"source/love/love.html","hash":"97bc2da09008789c2a8ffc9eda26a73669328652","modified":1564901310668},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1558962364196},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1558962364196},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1558962364196},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1558962364197},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1558962364197},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1558962364197},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1558962364197},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1558962364197},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1558962364198},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1558962364198},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1558962364198},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1558962364198},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1558962364202},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1558962364202},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1558962364202},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1558962364202},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558962364202},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1558962364202},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1558962364203},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1558962364203},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1558962364198},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"2df143cc42fc7d19d263cfb9ee61ec20f66b00c0","modified":1559014291109},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1558962364199},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1558962364201},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1558962364201},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1558962364201},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1558962364201},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1558962364201},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1558962364202},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1558962364203},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1558962364205},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1558962364210},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558962364210},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558962364210},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558962364210},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1558962364212},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1558962364212},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1558962364213},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1558962364213},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1558962364200},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1558962364201},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1558962364201},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1558962364203},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1558962364203},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1558962364204},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1558962364205},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1558962364205},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1558962364205},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1558962364205},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1558962364206},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1558962364206},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1558962364208},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1558962364211},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1558962364212},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558962364212},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1558962364212},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1558962364208},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1558962364207},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1558962364210},{"_id":"source/love/day.mp3","hash":"f9b119d99cd56e13619d013783a0c6e6de88c75e","modified":1564031096981},{"_id":"public/categories/index.html","hash":"f05a94af089c1ecd66bde6a69658a5c4510ce7f3","modified":1564910730425},{"_id":"public/about/index.html","hash":"5943e4141902ecec0cd498bda5093fe2dc96aee2","modified":1564910730425},{"_id":"public/2019/08/05/2019年第1周_2019_08_05/index.html","hash":"84dfdbb06c5b5b6071df2607466b228dd69b591e","modified":1564910730426},{"_id":"public/2019/03/21/javascript-六/index.html","hash":"18d880bb5c812cfede7dbf84c9173f142ac24984","modified":1564910730426},{"_id":"public/2019/03/21/javascript-五/index.html","hash":"c363bdce86079aa51a6e5185c975657a97236dbc","modified":1564910730426},{"_id":"public/2019/03/21/javascript-四/index.html","hash":"d9c5feb61bace59206168526195a04e9a89c0795","modified":1564910730426},{"_id":"public/2018/09/27/iOS面试题整理/index.html","hash":"d03a06f34887f80d94125bc92ae68c4d519b8063","modified":1564910730426},{"_id":"public/categories/学习计划/index.html","hash":"f5b003fc1ac4fca136157795aae91f92dc786281","modified":1564910730426},{"_id":"public/categories/iOS/index.html","hash":"9d9717a8a9a066bc84f17334a71ebf129597d15a","modified":1564910730426},{"_id":"public/categories/JavaScript/index.html","hash":"0874f17022990ff031a22bf23f89372b2a5c7eb3","modified":1564910730426},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"89fc9f9251b7d3a9b10dff3d7352bb2dec400d4f","modified":1564910730426},{"_id":"public/archives/index.html","hash":"e3ba7ddbd63260b9036012ca62bdabbf0041335e","modified":1564910730426},{"_id":"public/archives/page/2/index.html","hash":"18ffecf44227c38a8f61417185271298d856b359","modified":1564910730426},{"_id":"public/archives/2018/index.html","hash":"69d2bb407a598fb6f0fd39dc4eaa6ba0530938e9","modified":1564910730426},{"_id":"public/archives/2018/09/index.html","hash":"41a83ea1f5c9a7c956365493da7413edaba5d936","modified":1564910730426},{"_id":"public/archives/2018/11/index.html","hash":"9d33ab3b6b26c180a7ba5978be5e13c662eccd93","modified":1564910730426},{"_id":"public/archives/2019/index.html","hash":"588af04dac2aa6dbcc5d615ca5117c5c7b18a1b5","modified":1564910730426},{"_id":"public/archives/2019/page/2/index.html","hash":"a62ceec0382a8e38a90e474a31f1422d45d680ee","modified":1564910730427},{"_id":"public/archives/2019/02/index.html","hash":"aac28fd79a48d57fb1a0300db5057ffacaa9b1b1","modified":1564910730427},{"_id":"public/archives/2019/03/index.html","hash":"88c527eb4cbfc83989c9e9ef6ecb590596b7d4c7","modified":1564910730427},{"_id":"public/archives/2019/03/page/2/index.html","hash":"5c17c63cacceac5cb9927e0c577b85f8691e58b8","modified":1564910730427},{"_id":"public/archives/2019/05/index.html","hash":"28601168528e1c0aef67c0abd5f47abba7a39905","modified":1564910730427},{"_id":"public/archives/2019/08/index.html","hash":"1f01b55d7d44042c25b9303d95b69bdad1bf8cc2","modified":1564910730427},{"_id":"public/page/2/index.html","hash":"ebeb696efa66e30e307f5ea1d0e6bdd076bc9131","modified":1564910730427},{"_id":"public/2019/05/28/iOS-源代码分析-Masonry/index.html","hash":"5f56dfa5341817d452ff2e6a15c1905473eda2fe","modified":1564910730427},{"_id":"public/2019/03/21/javascript-十一/index.html","hash":"e6ee1bc2c198236b7b579d2fbbf736ecbd0a05c5","modified":1564910730427},{"_id":"public/2019/03/21/javascript-十/index.html","hash":"87951335480be49f34ad8df9d9662e812a500e08","modified":1564910730427},{"_id":"public/2019/03/21/javascript-九/index.html","hash":"fd6265a6f99d47d7704b6f97bdeaedbd29fdcd07","modified":1564910730427},{"_id":"public/2019/03/21/javascript-八/index.html","hash":"c62b4ce1db0d731a418be743aa71bb714e6f980f","modified":1564910730427},{"_id":"public/2019/03/21/javascript-七/index.html","hash":"0321a507fee0fabb40bf83910b4fb42cd3a0cdbd","modified":1564910730427},{"_id":"public/2019/03/21/javascript-三/index.html","hash":"46f160c5481d6a3b76bef675725250aaa42747c6","modified":1564910730427},{"_id":"public/2019/03/21/javascript-二/index.html","hash":"3c8edd70bf90baca7dbfca74bfd98cd217da59a7","modified":1564910730428},{"_id":"public/2019/03/21/javascript-一/index.html","hash":"75788bf4bfb6ebbf9e3e10d7b9a6bb12b84ad7e3","modified":1564910730428},{"_id":"public/2019/02/20/成熟的夜间模式方案/index.html","hash":"b751c2d2684a73010a9abb6c8693a966ccb59aa5","modified":1564910730428},{"_id":"public/2018/11/18/iOS对象是如何初始化的/index.html","hash":"3d9dcde5ecfbfc88cc7cca382dcf9449f9453242","modified":1564910730428},{"_id":"public/index.html","hash":"6015b11d61322cdc79fe535b3af888ae1ff14f7e","modified":1564910730428},{"_id":"public/CNAME","hash":"5ba4bb3e899f5c7d3b1858841b08943306b73d72","modified":1564910730432},{"_id":"public/images/head.png","hash":"c880d984eb151afe1a52300edb568946da558cb6","modified":1564910730432},{"_id":"public/love/love.html","hash":"97bc2da09008789c2a8ffc9eda26a73669328652","modified":1564910730432},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1564910730432},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1564910730432},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1564910730432},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1564910730432},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1564910730433},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1564910730434},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1564910730434},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1564910730434},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1564910730434},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1564910730434},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1564910730782},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1564910730819},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1564910730820},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1564910730820},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1564910730820},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1564910730820},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1564910730820},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1564910730820},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1564910730820},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1564910730820},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1564910730820},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1564910730822},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1564910730822},{"_id":"public/love/day.mp3","hash":"f9b119d99cd56e13619d013783a0c6e6de88c75e","modified":1564910730847}],"Category":[{"name":"学习计划","_id":"cjywrfym40004fw04dirb6sjz"},{"name":"iOS","_id":"cjywrfym80008fw04lf2hltxk"},{"name":"JavaScript","_id":"cjywrfymh000gfw04rhebrd7w"}],"Data":[],"Page":[{"title":"categories","date":"2019-05-28T08:09:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-05-28 16:09:00\ntype: \"categories\"\n---\n","updated":"2019-05-28T08:09:53.591Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjywrfym00001fw042rn54lnh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-05-28T08:35:59.218Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: \n---\n","updated":"2019-05-28T08:35:59.211Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjywrfym30003fw044zzt56j5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019年第1周_2019_08_05","date":"2019-08-04T16:00:00.000Z","_content":"\n<!-- 星期|码砖总结|阅读|英语学习|健身|杂类学习|总结-->\n<!--:-----------|:------------|:--------|:---------|:---------|:---------|:----------->\n<!--星期一| | | |✔| | |-->\n<!--星期二| | | | | | |-->\n<!--星期三| | | | | | |-->\n<!--星期四| | | | | | |-->\n<!--星期五| | | | | | |-->\n<!--星期六| | | | | | |-->\n<!--星期日| | | | | | |-->\n<!--总计| | | | | | |-->\n\n星期|学习|健身\n:------|:------------|:------------\n星期一|✔|✔| \n星期二| | | \n星期三| | | \n星期四| | | \n星期五| | | \n星期六| | | \n星期日| | | \n# <center>倒计时30天</center>\n\n\n<!--![](../images/head.png)-->\n<!--<img src=\"../images/head.png\" width = 20% height = 20% />-->\n\n","source":"_posts/2019年第1周_2019_08_05.md","raw":"---\ntitle: 2019年第1周_2019_08_05\ndate: 2019-08-05 \ntags:\ncategories: 学习计划\n---\n\n<!-- 星期|码砖总结|阅读|英语学习|健身|杂类学习|总结-->\n<!--:-----------|:------------|:--------|:---------|:---------|:---------|:----------->\n<!--星期一| | | |✔| | |-->\n<!--星期二| | | | | | |-->\n<!--星期三| | | | | | |-->\n<!--星期四| | | | | | |-->\n<!--星期五| | | | | | |-->\n<!--星期六| | | | | | |-->\n<!--星期日| | | | | | |-->\n<!--总计| | | | | | |-->\n\n星期|学习|健身\n:------|:------------|:------------\n星期一|✔|✔| \n星期二| | | \n星期三| | | \n星期四| | | \n星期五| | | \n星期六| | | \n星期日| | | \n# <center>倒计时30天</center>\n\n\n<!--![](../images/head.png)-->\n<!--<img src=\"../images/head.png\" width = 20% height = 20% />-->\n\n","slug":"2019年第1周_2019_08_05","published":1,"updated":"2019-08-04T09:25:20.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfylw0000fw045kqin7bi","content":"<!-- 星期|码砖总结|阅读|英语学习|健身|杂类学习|总结-->\n<!--:-----------|:------------|:--------|:---------|:---------|:---------|:----------->\n<!--星期一| | | |✔| | |-->\n<!--星期二| | | | | | |-->\n<!--星期三| | | | | | |-->\n<!--星期四| | | | | | |-->\n<!--星期五| | | | | | |-->\n<!--星期六| | | | | | |-->\n<!--星期日| | | | | | |-->\n<!--总计| | | | | | |-->\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">星期</th>\n<th style=\"text-align:left\">学习</th>\n<th style=\"text-align:left\">健身</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">星期一</td>\n<td style=\"text-align:left\">✔</td>\n<td style=\"text-align:left\">✔</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期二</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期三</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期四</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期五</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期六</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期日</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"倒计时30天\"><a href=\"#倒计时30天\" class=\"headerlink\" title=\"倒计时30天\"></a><center>倒计时30天</center></h1><!--![](../images/head.png)-->\n<!--<img src=\"../images/head.png\" width = 20% height = 20% />-->\n","site":{"data":{}},"excerpt":"","more":"<!-- 星期|码砖总结|阅读|英语学习|健身|杂类学习|总结-->\n<!--:-----------|:------------|:--------|:---------|:---------|:---------|:----------->\n<!--星期一| | | |✔| | |-->\n<!--星期二| | | | | | |-->\n<!--星期三| | | | | | |-->\n<!--星期四| | | | | | |-->\n<!--星期五| | | | | | |-->\n<!--星期六| | | | | | |-->\n<!--星期日| | | | | | |-->\n<!--总计| | | | | | |-->\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">星期</th>\n<th style=\"text-align:left\">学习</th>\n<th style=\"text-align:left\">健身</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">星期一</td>\n<td style=\"text-align:left\">✔</td>\n<td style=\"text-align:left\">✔</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期二</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期三</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期四</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期五</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期六</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">星期日</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"倒计时30天\"><a href=\"#倒计时30天\" class=\"headerlink\" title=\"倒计时30天\"></a><center>倒计时30天</center></h1><!--![](../images/head.png)-->\n<!--<img src=\"../images/head.png\" width = 20% height = 20% />-->\n"},{"title":"iOS 源代码分析 --- Masonry","date":"2019-05-28T09:11:28.000Z","_content":"[Masonry](https://github.com/SnapKit/Masonry) 是 Objective-C 中用于自动布局的第三方框架, 我们一般使用它来代替冗长, 繁琐的 AutoLayout 代码. \n\nMasonry 的使用还是很简洁的:\n<!-- more -->\n\n```objectivec\n[button mas_makeConstraints:^(MASConstraintMaker *make) {\nmake.centerX.equalTo(self.view);\nmake.top.equalTo(self.view).with.offset(40);\nmake.width.equalTo(@185);\nmake.height.equalTo(@38);\n}];\n```\n\n## 从 mas_makeConstraints: 开始\n\n其中最常用的方法就是 \n\n```objectivec\n// View+MASAdditions.h\n\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;\n```\n\n同样, 也有用于**更新和重新构建**约束的分类方法:\n\n```objectivec\n// View+MASAdditions.h\n\n- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;\n- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;\n```\n\n## Constraint Maker Block\n\n我们以 `mas_makeConstraints:` 方法为入口来分析一下 Masonry 以及类似的框架(SnapKit)是如何工作的. `mas_makeConstraints:` 方法位于 `UIView` 的分类 `MASAdditions` 中.\n\n>     Provides constraint maker block and convience methods for creating MASViewAttribute which are view + NSLayoutAttribute pairs.\n\n这个分类为我们提供一种非常便捷的方法来配置 `MASConstraintMaker`, 并为视图添加 `mas_left` `mas_right` 等属性.\n\n方法的实现如下:\n\n```objectivec\n// View+MASAdditions.m\n\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {\nself.translatesAutoresizingMaskIntoConstraints = NO;\nMASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];\nblock(constraintMaker);\nreturn [constraintMaker install];\n}\n```\n\n因为 Masonry 是封装的苹果的 AutoLayout 框架, 所以我们要在为视图添加约束前将 `translatesAutoresizingMaskIntoConstraints` 属性设置为 `NO`. 如果这个属性没有被正确设置, 那么视图的约束不会被成功添加.\n\n在设置 `translatesAutoresizingMaskIntoConstraints` 属性之后, \n\n* 我们会初始化一个 `MASConstraintMaker` 的实例.\n* 然后将 maker 传入 block 配置其属性.\n* 最后调用 maker 的 `install` 方法为视图添加约束.\n\n## MASConstraintMaker\n\n`MASConstraintMaker` 为我们提供了工厂方法来创建 `MASConstraint`. 所有的约束都会被收集直到它们最后调用 `install` 方法添加到视图上.\n\n> Provides factory methods for creating MASConstraints. Constraints are collected until they are ready to be installed\n\n在初始化 `MASConstraintMaker` 的实例时, 它会**持有一个对应 view 的弱引用**, 并初始化一个  `constraints` 的空可变数组用来之后配置属性时持有所有的约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (id)initWithView:(MAS_VIEW *)view {\nself = [super init];\nif (!self) return nil;\n\nself.view = view;\nself.constraints = NSMutableArray.new;\n\nreturn self;\n}\n```\n\n这里的 `MAS_VIEW` 是一个宏, 是 `UIView` 的 alias.\n\n```c\n// MASUtilities.h\n\n#define MAS_VIEW UIView\n```\n\n## Setup MASConstraintMaker\n\n在调用 `block(constraintMaker)` 时, 实际上是对 `constraintMaker` 的配置.\n\n```objectivec\nmake.centerX.equalTo(self.view);\nmake.top.equalTo(self.view).with.offset(40);\nmake.width.equalTo(@185);\nmake.height.equalTo(@38);\n```\n\n### make.left\n\n访问 `make` 的 `left` `right` `top` `bottom`  等属性时, 会调用 `constraint:addConstraintWithLayoutAttribute:` 方法.\n\n```objectivec\n// MASViewConstraint.m\n\n- (MASConstraint *)left {\nreturn [self addConstraintWithLayoutAttribute:NSLayoutAttributeLeft];\n}\n\n- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\nreturn [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];\n}\n\n- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\nMASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];\nMASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];\nif ([constraint isKindOfClass:MASViewConstraint.class]) { ... }\nif (!constraint) {\nnewConstraint.delegate = self;\n[self.constraints addObject:newConstraint];\n}\nreturn newConstraint;\n}\n```\n\n在调用链上最终会达到 `constraint:addConstraintWithLayoutAttribute:` 这一方法, 在这里省略了一些暂时不需要了解的问题. 因为在这个类中传入该方法的第一个参数一直为 `nil`, 所以这里省略的代码不会执行.\n\n这部分代码会先以布局属性 `left` 和视图本身初始化一个 `MASViewAttribute` 的实例, 之后使用 `MASViewAttribute` 的实例初始化一个 `constraint` 并设置它的代理, 加入数组, 然后返回.\n\n这些工作就是你在输入 `make.left` 进行的全部工作, 它会返回一个 `MASConstraint`, 用于之后的继续配置.\n\n### make.left.equalTo(@80)\n\n在 `make.left` 返回 `MASConstraint` 之后, 我们会继续在这个链式的语法中调用下一个方法来指定约束的关系.\n\n```objectivec\n// MASConstraint.h\n\n- (MASConstraint * (^)(id attr))equalTo;\n- (MASConstraint * (^)(id attr))greaterThanOrEqualTo;\n- (MASConstraint * (^)(id attr))lessThanOrEqualTo;\n```\n\n这三个方法是在 `MASViewConstraint` 的父类, `MASConstraint` 中定义的.\n\n`MASConstraint` 是一个抽象类, 其中有很多的方法都**必须在子类中覆写**的. Masonry 中有两个 `MASConstraint` 的子类, 分别是 `MASViewConstraint` 和 `MASCompositeConstraint`. 后者实际上是一些**约束的集合**. 这么设计的原因我们会在 post 的最后解释.\n\n先来看一下这三个方法是怎么实现的:\n\n```objectivec\n// MASConstraint.m\n\n- (MASConstraint * (^)(id))equalTo {\nreturn ^id(id attribute) {\nreturn self.equalToWithRelation(attribute, NSLayoutRelationEqual);\n};\n}\n```\n\n该方法会导致 `self.equalToWithRelation` 的执行, 而这个方法是定义在子类中的, 因为父类作为抽象类没有提供这个方法的具体实现.\n\n```objectivec\n// MASConstraint.m\n\n- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation { MASMethodNotImplemented(); }\n```\n\n`MASMethodNotImplemented` 也是一个宏定义, 用于在**子类未继承这个方法**或者**直接使用这个类**时抛出异常.\n\n```c\n// MASConstraint.m\n\n#define MASMethodNotImplemented() \\\n@throw [NSException exceptionWithName:NSInternalInconsistencyException \\\nreason:[NSString stringWithFormat:@\"You must override %@ in a subclass.\", NSStringFromSelector(_cmd)] \\\nuserInfo:nil]\n\n```\n\n因为我们为 `equalTo` 提供了参数 `attribute` 和布局关系 `NSLayoutRelationEqual`, 这两个参数会传递到 `equalToWithRelation` 中, 设置 `constraint` 的布局关系和 `secondViewAttribute` 属性, 为即将 maker 的 `install` 做准备.\n\n```objectivec\n// MASViewConstraint.m\n\n- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation {\nreturn ^id(id attribute, NSLayoutRelation relation) {\nif ([attribute isKindOfClass:NSArray.class]) { ... } \nelse {\n...\nself.layoutRelation = relation;\nself.secondViewAttribute = attribute;\nreturn self;\n}\n};\n}\n```\n\n我们不得不提一下 `setSecondViewAttribute:` 方法, 它并不只是一个简单的 setter 方法, 它会根据你传入的值的种类赋值.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (void)setSecondViewAttribute:(id)secondViewAttribute {\nif ([secondViewAttribute isKindOfClass:NSValue.class]) {\n[self setLayoutConstantWithValue:secondViewAttribute];\n} else if ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) {\n_secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:self.firstViewAttribute.layoutAttribute];\n} else if ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) {\n_secondViewAttribute = secondViewAttribute;\n} else {\nNSAssert(NO, @\"attempting to add unsupported attribute: %@\", secondViewAttribute);\n}\n}\n```\n\n第一种情况对应的就是:\n\n```objectivec\nmake.left.equalTo(@40);\n```\n\n传入 `NSValue` 的时, 会直接设置 `constraint` 的 `offset`, `centerOffset`, `sizeOffset`, 或者 `insets`\n\n第二种情况一般会直接传入一个视图:\n\n```objectivec\nmake.left.equalTo(view);\n```\n\n这时, 就会初始化一个 `layoutAttribute` 属性与 `firstViewArribute` 相同的 `MASViewAttribute`, 上面的代码就会使视图与 `view` 左对齐.\n\n第三种情况会传入一个视图的 `MASViewAttribute`:\n\n```objectivec\nmake.left.equalTo(view.mas_right);\n```\n\n使用这种写法时, 一般是因为约束的方向不同. 这行代码会使视图的左侧与 `view` 的右侧对齐.\n\n到这里我们就基本完成了对**一个**约束的配置, 接下来可以使用相同的语法完成对一个视图上所有约束进行配置, 然后进入了最后一个环节.\n\n## Install MASConstraintMaker\n\n我们会在 `mas_makeConstraints:` 方法的最后调用 `[constraintMaker install]` 方法来安装所有存储在 `self.constraints` 数组中的所有约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (NSArray *)install {\nif (self.removeExisting) {\nNSArray *installedConstraints = [MASViewConstraint installedConstraintsForView:self.view];\nfor (MASConstraint *constraint in installedConstraints) {\n[constraint uninstall];\n}\n}\nNSArray *constraints = self.constraints.copy;\nfor (MASConstraint *constraint in constraints) {\nconstraint.updateExisting = self.updateExisting;\n[constraint install];\n}\n[self.constraints removeAllObjects];\nreturn constraints;\n}\n```\n\n在这个方法会先判断当前的视图的约束是否应该要被 `uninstall`, 如果我们在最开始调用 `mas_remakeConstraints:` 方法时, 视图中原来的约束就会全部被 `uninstall`.\n\n然后就会遍历 `constraints` 数组, 发送 `install` 消息.\n\n### MASViewConstraint install\n\nMASViewConstraint 的 `install` 方法就是最后为当前视图添加约束的最后的方法, 首先这个方法会先获取即将用于初始化 `NSLayoutConstraint` 的子类的几个属性.\n\n```objectivec\n// MASViewConstraint.m\n\nMAS_VIEW *firstLayoutItem = self.firstViewAttribute.view;\nNSLayoutAttribute firstLayoutAttribute = self.firstViewAttribute.layoutAttribute;\nMAS_VIEW *secondLayoutItem = self.secondViewAttribute.view;\nNSLayoutAttribute secondLayoutAttribute = self.secondViewAttribute.layoutAttribute;\n```\n\nMasonry 之后会判断当前即将添加的约束是否是 size 类型的约束\n\n```objectivec\n// MASViewConstraint.m\n\nif (!self.firstViewAttribute.isSizeAttribute && !self.secondViewAttribute) {\nsecondLayoutItem = firstLayoutItem.superview;\nsecondLayoutAttribute = firstLayoutAttribute;\n}\n```\n\n如果不是 size 类型并且没有提供第二个 `viewAttribute`, (e.g. `make.left.equalTo(@10);`) 会自动将约束添加到 `superview` 上. 它等价于:\n\n```objectivec\nmake.left.equalTo(superView.mas_left).with.offset(10);\n```\n\n然后就会初始化 `NSLayoutConstraint` 的子类 `MASLayoutConstraint`:\n\n```objectivec\n// MASViewConstraint.m\n\nMASLayoutConstraint *layoutConstraint\n= [MASLayoutConstraint constraintWithItem:firstLayoutItem\nattribute:firstLayoutAttribute\nrelatedBy:self.layoutRelation\ntoItem:secondLayoutItem\nattribute:secondLayoutAttribute\nmultiplier:self.layoutMultiplier\nconstant:self.layoutConstant];\nlayoutConstraint.priority = self.layoutPriority;                                    \n```\n\n接下来它会寻找 `firstLayoutItem` 和 `secondLayoutItem` 两个视图的公共 `superview`, 相当于求两个数的最小公倍数. \n\n```objectivec\n// View+MASAdditions.m\n\n- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view {\nMAS_VIEW *closestCommonSuperview = nil;\n\nMAS_VIEW *secondViewSuperview = view;\nwhile (!closestCommonSuperview && secondViewSuperview) {\nMAS_VIEW *firstViewSuperview = self;\nwhile (!closestCommonSuperview && firstViewSuperview) {\nif (secondViewSuperview == firstViewSuperview) {\nclosestCommonSuperview = secondViewSuperview;\n}\nfirstViewSuperview = firstViewSuperview.superview;\n}\nsecondViewSuperview = secondViewSuperview.superview;\n}\nreturn closestCommonSuperview;\n}\n```\n\n如果需要升级当前的约束就会获取原有的约束, 并替换为新的约束, 这样就不需要再次为 `view` 安装约束.\n\n```objectivec\n// MASViewConstraint.m\n\nMASLayoutConstraint *existingConstraint = nil;\nif (self.updateExisting) {\nexistingConstraint = [self layoutConstraintSimilarTo:layoutConstraint];\n}\nif (existingConstraint) {\n// just update the constant\nexistingConstraint.constant = layoutConstraint.constant;\nself.layoutConstraint = existingConstraint;\n} else {\n[self.installedView addConstraint:layoutConstraint];\nself.layoutConstraint = layoutConstraint;\n}\n\n[firstLayoutItem.mas_installedConstraints addObject:self];\n```\n\n如果原来的 `view` 中不存在可以升级的约束, 或者没有调用 `mas_updateConstraint:` 方法, 那么就会在上一步寻找到的 `installedView` 上面添加约束. \n\n```objectivec\n[self.installedView addConstraint:layoutConstraint];\n```\n\n## 其他问题\n\n到现在为止整个 Masonry 为视图添加约束的过程就已经完成了, 然而我们还有一些待解决的其它问题.\n\n###  make.left.equal(view).with.offset(30)\n\n我们在前面的讨论中已经讨论了这个链式语法的前半部分, 但是在使用中也会\"延长\"这个链式语句, 比如添加 `with` `offset`.\n\n其实在 Masonry 中使用 `with` 并不是必须的, 它的作用仅仅是使代码更加的易读.\n\n> Optional semantic property which has no effect but improves the readability of constraint\n\n```objectivec\n// MASConstraint.m\n- (MASConstraint *)with {\nreturn self;\n}\n\n- (MASConstraint *)and {\nreturn self;\n}\n```\n\n与 `with` 有着相同作用的还有 `and`, 这两个方法都会直接返回 `MASConstraint`, 方法本身不做任何的修改.\n\n而 `offset` 方法其实是修改 `layoutConstraint` 中的常量, 因为 `self.layoutConstant` 在初始化时会被设置为 0, 我们可以通过修改 `offset` 属性来改变它.\n\n```objectivec\n// MASViewConstraint.m\n\n- (void)setOffset:(CGFloat)offset {\nself.layoutConstant = offset;\n}\n```\n\n### MASCompositeConstraint\n\n`MASCompositeConstraint` 是一些 `MASConstraint` 的集合, 它能够提供一种更加便捷的方法同时为一个视图来添加多个约束.\n\n> A group of MASConstraint objects\n\n通过 `make` 直接调用 `edges` `size` `center` 时, 就会产生一个 `MASCompositeConstraint` 的实例, 而这个实例会初始化所有对应的单独的约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (MASConstraint *)edges {\nreturn [self addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];\n}\n\n- (MASConstraint *)size {\nreturn [self addConstraintWithAttributes:MASAttributeWidth | MASAttributeHeight];\n}\n\n- (MASConstraint *)center {\nreturn [self addConstraintWithAttributes:MASAttributeCenterX | MASAttributeCenterY];\n}\n```\n\n这些属性都会调用 `addConstraintWithAttributes:` 方法, 生成多个属于 `MASCompositeConstraint` 的实例.\n\n```objectivec\n// MASConstraintMaker.m\n\nNSMutableArray *children = [NSMutableArray arrayWithCapacity:attributes.count];\n\nfor (MASViewAttribute *a in attributes) {\n[children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];\n}\n\nMASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];\nconstraint.delegate = self;\n[self.constraints addObject:constraint];\nreturn constraint;\n```\n\n### mas_equalTo\n\nMasonry 中还有一个类似与 magic 的宏, 这个宏将 C 和 Objective-C 语言中的一些基本数据结构比如说 `double` `CGPoint` `CGSize` 这些值用 `NSValue` 进行包装.\n\n这是一种非常简洁的使用方式, 如果你对这个非常感兴趣, 可以看一下 `MASUtilities.h` 中的源代码, 在这里就不对这个做出解释了.\n\n## Masonry 如何为视图添加约束(面试回答)\n\nMasonry 与其它的第三方开源框架一样选择了使用分类的方式为 UIKit 添加一个方法 `mas_makeConstraint`, 这个方法接受了一个 block, 这个 block 有一个 `MASConstraintMaker` 类型的参数, 这个 maker 会持有一个**约束的数组**, 这里保存着所有将被加入到视图中的约束.\n\n我们通过链式的语法配置 maker, 设置它的 `left` `right` 等属性, 比如说 `make.left.equalTo(view)`, 其实这个 `left` `equalTo` 还有像 `with` `offset` 之类的方法都会返回一个 `MASConstraint` 的实例, 所以在这里才可以用类似 Ruby 中链式的语法. \n\n在配置结束后, 首先会调用 maker 的 `install` 方法, 而这个 maker 的 `install` 方法会遍历其持有的约束数组, 对其中的每一个约束发送 `install` 消息. 在这里就会使用到在上一步中配置的属性, 初始化 `NSLayoutConstraint` 的子类 `MASLayoutConstraint` 并添加到合适的视图上.\n\n视图的选择会通过调用一个方法 `mas_closestCommonSuperview:` 来返回两个视图的**最近公共父视图**.\n\n## 总结\n\n虽然 Masonry 这个框架中的代码并不是非常的多, 只有 1,2 万行的代码, 但是感觉这个项目阅读起来十分的困难, 没有 SDWebImage 清晰, 因为代码中类的属性非常的多, 而且有很多相似的属性会干扰我们对这个项目的阅读, 整个框架运用了大量的 block 语法进行回调. \n\n虽然代码十分整洁不过我觉得却降低了可读性, 但是还是那句话, 把简洁留给别人复杂留给自己, 只要为开发者提供简洁的接口就可以了.\n\nFollow: [@Draveness](https://github.com/Draveness)\n\n\n","source":"_posts/iOS-源代码分析-Masonry.md","raw":"---\ntitle: iOS 源代码分析 --- Masonry\ndate: 2019-05-28 17:11:28\ntags:\ncategories: iOS\n---\n[Masonry](https://github.com/SnapKit/Masonry) 是 Objective-C 中用于自动布局的第三方框架, 我们一般使用它来代替冗长, 繁琐的 AutoLayout 代码. \n\nMasonry 的使用还是很简洁的:\n<!-- more -->\n\n```objectivec\n[button mas_makeConstraints:^(MASConstraintMaker *make) {\nmake.centerX.equalTo(self.view);\nmake.top.equalTo(self.view).with.offset(40);\nmake.width.equalTo(@185);\nmake.height.equalTo(@38);\n}];\n```\n\n## 从 mas_makeConstraints: 开始\n\n其中最常用的方法就是 \n\n```objectivec\n// View+MASAdditions.h\n\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;\n```\n\n同样, 也有用于**更新和重新构建**约束的分类方法:\n\n```objectivec\n// View+MASAdditions.h\n\n- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;\n- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;\n```\n\n## Constraint Maker Block\n\n我们以 `mas_makeConstraints:` 方法为入口来分析一下 Masonry 以及类似的框架(SnapKit)是如何工作的. `mas_makeConstraints:` 方法位于 `UIView` 的分类 `MASAdditions` 中.\n\n>     Provides constraint maker block and convience methods for creating MASViewAttribute which are view + NSLayoutAttribute pairs.\n\n这个分类为我们提供一种非常便捷的方法来配置 `MASConstraintMaker`, 并为视图添加 `mas_left` `mas_right` 等属性.\n\n方法的实现如下:\n\n```objectivec\n// View+MASAdditions.m\n\n- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {\nself.translatesAutoresizingMaskIntoConstraints = NO;\nMASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];\nblock(constraintMaker);\nreturn [constraintMaker install];\n}\n```\n\n因为 Masonry 是封装的苹果的 AutoLayout 框架, 所以我们要在为视图添加约束前将 `translatesAutoresizingMaskIntoConstraints` 属性设置为 `NO`. 如果这个属性没有被正确设置, 那么视图的约束不会被成功添加.\n\n在设置 `translatesAutoresizingMaskIntoConstraints` 属性之后, \n\n* 我们会初始化一个 `MASConstraintMaker` 的实例.\n* 然后将 maker 传入 block 配置其属性.\n* 最后调用 maker 的 `install` 方法为视图添加约束.\n\n## MASConstraintMaker\n\n`MASConstraintMaker` 为我们提供了工厂方法来创建 `MASConstraint`. 所有的约束都会被收集直到它们最后调用 `install` 方法添加到视图上.\n\n> Provides factory methods for creating MASConstraints. Constraints are collected until they are ready to be installed\n\n在初始化 `MASConstraintMaker` 的实例时, 它会**持有一个对应 view 的弱引用**, 并初始化一个  `constraints` 的空可变数组用来之后配置属性时持有所有的约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (id)initWithView:(MAS_VIEW *)view {\nself = [super init];\nif (!self) return nil;\n\nself.view = view;\nself.constraints = NSMutableArray.new;\n\nreturn self;\n}\n```\n\n这里的 `MAS_VIEW` 是一个宏, 是 `UIView` 的 alias.\n\n```c\n// MASUtilities.h\n\n#define MAS_VIEW UIView\n```\n\n## Setup MASConstraintMaker\n\n在调用 `block(constraintMaker)` 时, 实际上是对 `constraintMaker` 的配置.\n\n```objectivec\nmake.centerX.equalTo(self.view);\nmake.top.equalTo(self.view).with.offset(40);\nmake.width.equalTo(@185);\nmake.height.equalTo(@38);\n```\n\n### make.left\n\n访问 `make` 的 `left` `right` `top` `bottom`  等属性时, 会调用 `constraint:addConstraintWithLayoutAttribute:` 方法.\n\n```objectivec\n// MASViewConstraint.m\n\n- (MASConstraint *)left {\nreturn [self addConstraintWithLayoutAttribute:NSLayoutAttributeLeft];\n}\n\n- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\nreturn [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];\n}\n\n- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\nMASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];\nMASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];\nif ([constraint isKindOfClass:MASViewConstraint.class]) { ... }\nif (!constraint) {\nnewConstraint.delegate = self;\n[self.constraints addObject:newConstraint];\n}\nreturn newConstraint;\n}\n```\n\n在调用链上最终会达到 `constraint:addConstraintWithLayoutAttribute:` 这一方法, 在这里省略了一些暂时不需要了解的问题. 因为在这个类中传入该方法的第一个参数一直为 `nil`, 所以这里省略的代码不会执行.\n\n这部分代码会先以布局属性 `left` 和视图本身初始化一个 `MASViewAttribute` 的实例, 之后使用 `MASViewAttribute` 的实例初始化一个 `constraint` 并设置它的代理, 加入数组, 然后返回.\n\n这些工作就是你在输入 `make.left` 进行的全部工作, 它会返回一个 `MASConstraint`, 用于之后的继续配置.\n\n### make.left.equalTo(@80)\n\n在 `make.left` 返回 `MASConstraint` 之后, 我们会继续在这个链式的语法中调用下一个方法来指定约束的关系.\n\n```objectivec\n// MASConstraint.h\n\n- (MASConstraint * (^)(id attr))equalTo;\n- (MASConstraint * (^)(id attr))greaterThanOrEqualTo;\n- (MASConstraint * (^)(id attr))lessThanOrEqualTo;\n```\n\n这三个方法是在 `MASViewConstraint` 的父类, `MASConstraint` 中定义的.\n\n`MASConstraint` 是一个抽象类, 其中有很多的方法都**必须在子类中覆写**的. Masonry 中有两个 `MASConstraint` 的子类, 分别是 `MASViewConstraint` 和 `MASCompositeConstraint`. 后者实际上是一些**约束的集合**. 这么设计的原因我们会在 post 的最后解释.\n\n先来看一下这三个方法是怎么实现的:\n\n```objectivec\n// MASConstraint.m\n\n- (MASConstraint * (^)(id))equalTo {\nreturn ^id(id attribute) {\nreturn self.equalToWithRelation(attribute, NSLayoutRelationEqual);\n};\n}\n```\n\n该方法会导致 `self.equalToWithRelation` 的执行, 而这个方法是定义在子类中的, 因为父类作为抽象类没有提供这个方法的具体实现.\n\n```objectivec\n// MASConstraint.m\n\n- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation { MASMethodNotImplemented(); }\n```\n\n`MASMethodNotImplemented` 也是一个宏定义, 用于在**子类未继承这个方法**或者**直接使用这个类**时抛出异常.\n\n```c\n// MASConstraint.m\n\n#define MASMethodNotImplemented() \\\n@throw [NSException exceptionWithName:NSInternalInconsistencyException \\\nreason:[NSString stringWithFormat:@\"You must override %@ in a subclass.\", NSStringFromSelector(_cmd)] \\\nuserInfo:nil]\n\n```\n\n因为我们为 `equalTo` 提供了参数 `attribute` 和布局关系 `NSLayoutRelationEqual`, 这两个参数会传递到 `equalToWithRelation` 中, 设置 `constraint` 的布局关系和 `secondViewAttribute` 属性, 为即将 maker 的 `install` 做准备.\n\n```objectivec\n// MASViewConstraint.m\n\n- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation {\nreturn ^id(id attribute, NSLayoutRelation relation) {\nif ([attribute isKindOfClass:NSArray.class]) { ... } \nelse {\n...\nself.layoutRelation = relation;\nself.secondViewAttribute = attribute;\nreturn self;\n}\n};\n}\n```\n\n我们不得不提一下 `setSecondViewAttribute:` 方法, 它并不只是一个简单的 setter 方法, 它会根据你传入的值的种类赋值.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (void)setSecondViewAttribute:(id)secondViewAttribute {\nif ([secondViewAttribute isKindOfClass:NSValue.class]) {\n[self setLayoutConstantWithValue:secondViewAttribute];\n} else if ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) {\n_secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:self.firstViewAttribute.layoutAttribute];\n} else if ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) {\n_secondViewAttribute = secondViewAttribute;\n} else {\nNSAssert(NO, @\"attempting to add unsupported attribute: %@\", secondViewAttribute);\n}\n}\n```\n\n第一种情况对应的就是:\n\n```objectivec\nmake.left.equalTo(@40);\n```\n\n传入 `NSValue` 的时, 会直接设置 `constraint` 的 `offset`, `centerOffset`, `sizeOffset`, 或者 `insets`\n\n第二种情况一般会直接传入一个视图:\n\n```objectivec\nmake.left.equalTo(view);\n```\n\n这时, 就会初始化一个 `layoutAttribute` 属性与 `firstViewArribute` 相同的 `MASViewAttribute`, 上面的代码就会使视图与 `view` 左对齐.\n\n第三种情况会传入一个视图的 `MASViewAttribute`:\n\n```objectivec\nmake.left.equalTo(view.mas_right);\n```\n\n使用这种写法时, 一般是因为约束的方向不同. 这行代码会使视图的左侧与 `view` 的右侧对齐.\n\n到这里我们就基本完成了对**一个**约束的配置, 接下来可以使用相同的语法完成对一个视图上所有约束进行配置, 然后进入了最后一个环节.\n\n## Install MASConstraintMaker\n\n我们会在 `mas_makeConstraints:` 方法的最后调用 `[constraintMaker install]` 方法来安装所有存储在 `self.constraints` 数组中的所有约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (NSArray *)install {\nif (self.removeExisting) {\nNSArray *installedConstraints = [MASViewConstraint installedConstraintsForView:self.view];\nfor (MASConstraint *constraint in installedConstraints) {\n[constraint uninstall];\n}\n}\nNSArray *constraints = self.constraints.copy;\nfor (MASConstraint *constraint in constraints) {\nconstraint.updateExisting = self.updateExisting;\n[constraint install];\n}\n[self.constraints removeAllObjects];\nreturn constraints;\n}\n```\n\n在这个方法会先判断当前的视图的约束是否应该要被 `uninstall`, 如果我们在最开始调用 `mas_remakeConstraints:` 方法时, 视图中原来的约束就会全部被 `uninstall`.\n\n然后就会遍历 `constraints` 数组, 发送 `install` 消息.\n\n### MASViewConstraint install\n\nMASViewConstraint 的 `install` 方法就是最后为当前视图添加约束的最后的方法, 首先这个方法会先获取即将用于初始化 `NSLayoutConstraint` 的子类的几个属性.\n\n```objectivec\n// MASViewConstraint.m\n\nMAS_VIEW *firstLayoutItem = self.firstViewAttribute.view;\nNSLayoutAttribute firstLayoutAttribute = self.firstViewAttribute.layoutAttribute;\nMAS_VIEW *secondLayoutItem = self.secondViewAttribute.view;\nNSLayoutAttribute secondLayoutAttribute = self.secondViewAttribute.layoutAttribute;\n```\n\nMasonry 之后会判断当前即将添加的约束是否是 size 类型的约束\n\n```objectivec\n// MASViewConstraint.m\n\nif (!self.firstViewAttribute.isSizeAttribute && !self.secondViewAttribute) {\nsecondLayoutItem = firstLayoutItem.superview;\nsecondLayoutAttribute = firstLayoutAttribute;\n}\n```\n\n如果不是 size 类型并且没有提供第二个 `viewAttribute`, (e.g. `make.left.equalTo(@10);`) 会自动将约束添加到 `superview` 上. 它等价于:\n\n```objectivec\nmake.left.equalTo(superView.mas_left).with.offset(10);\n```\n\n然后就会初始化 `NSLayoutConstraint` 的子类 `MASLayoutConstraint`:\n\n```objectivec\n// MASViewConstraint.m\n\nMASLayoutConstraint *layoutConstraint\n= [MASLayoutConstraint constraintWithItem:firstLayoutItem\nattribute:firstLayoutAttribute\nrelatedBy:self.layoutRelation\ntoItem:secondLayoutItem\nattribute:secondLayoutAttribute\nmultiplier:self.layoutMultiplier\nconstant:self.layoutConstant];\nlayoutConstraint.priority = self.layoutPriority;                                    \n```\n\n接下来它会寻找 `firstLayoutItem` 和 `secondLayoutItem` 两个视图的公共 `superview`, 相当于求两个数的最小公倍数. \n\n```objectivec\n// View+MASAdditions.m\n\n- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view {\nMAS_VIEW *closestCommonSuperview = nil;\n\nMAS_VIEW *secondViewSuperview = view;\nwhile (!closestCommonSuperview && secondViewSuperview) {\nMAS_VIEW *firstViewSuperview = self;\nwhile (!closestCommonSuperview && firstViewSuperview) {\nif (secondViewSuperview == firstViewSuperview) {\nclosestCommonSuperview = secondViewSuperview;\n}\nfirstViewSuperview = firstViewSuperview.superview;\n}\nsecondViewSuperview = secondViewSuperview.superview;\n}\nreturn closestCommonSuperview;\n}\n```\n\n如果需要升级当前的约束就会获取原有的约束, 并替换为新的约束, 这样就不需要再次为 `view` 安装约束.\n\n```objectivec\n// MASViewConstraint.m\n\nMASLayoutConstraint *existingConstraint = nil;\nif (self.updateExisting) {\nexistingConstraint = [self layoutConstraintSimilarTo:layoutConstraint];\n}\nif (existingConstraint) {\n// just update the constant\nexistingConstraint.constant = layoutConstraint.constant;\nself.layoutConstraint = existingConstraint;\n} else {\n[self.installedView addConstraint:layoutConstraint];\nself.layoutConstraint = layoutConstraint;\n}\n\n[firstLayoutItem.mas_installedConstraints addObject:self];\n```\n\n如果原来的 `view` 中不存在可以升级的约束, 或者没有调用 `mas_updateConstraint:` 方法, 那么就会在上一步寻找到的 `installedView` 上面添加约束. \n\n```objectivec\n[self.installedView addConstraint:layoutConstraint];\n```\n\n## 其他问题\n\n到现在为止整个 Masonry 为视图添加约束的过程就已经完成了, 然而我们还有一些待解决的其它问题.\n\n###  make.left.equal(view).with.offset(30)\n\n我们在前面的讨论中已经讨论了这个链式语法的前半部分, 但是在使用中也会\"延长\"这个链式语句, 比如添加 `with` `offset`.\n\n其实在 Masonry 中使用 `with` 并不是必须的, 它的作用仅仅是使代码更加的易读.\n\n> Optional semantic property which has no effect but improves the readability of constraint\n\n```objectivec\n// MASConstraint.m\n- (MASConstraint *)with {\nreturn self;\n}\n\n- (MASConstraint *)and {\nreturn self;\n}\n```\n\n与 `with` 有着相同作用的还有 `and`, 这两个方法都会直接返回 `MASConstraint`, 方法本身不做任何的修改.\n\n而 `offset` 方法其实是修改 `layoutConstraint` 中的常量, 因为 `self.layoutConstant` 在初始化时会被设置为 0, 我们可以通过修改 `offset` 属性来改变它.\n\n```objectivec\n// MASViewConstraint.m\n\n- (void)setOffset:(CGFloat)offset {\nself.layoutConstant = offset;\n}\n```\n\n### MASCompositeConstraint\n\n`MASCompositeConstraint` 是一些 `MASConstraint` 的集合, 它能够提供一种更加便捷的方法同时为一个视图来添加多个约束.\n\n> A group of MASConstraint objects\n\n通过 `make` 直接调用 `edges` `size` `center` 时, 就会产生一个 `MASCompositeConstraint` 的实例, 而这个实例会初始化所有对应的单独的约束.\n\n```objectivec\n// MASConstraintMaker.m\n\n- (MASConstraint *)edges {\nreturn [self addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];\n}\n\n- (MASConstraint *)size {\nreturn [self addConstraintWithAttributes:MASAttributeWidth | MASAttributeHeight];\n}\n\n- (MASConstraint *)center {\nreturn [self addConstraintWithAttributes:MASAttributeCenterX | MASAttributeCenterY];\n}\n```\n\n这些属性都会调用 `addConstraintWithAttributes:` 方法, 生成多个属于 `MASCompositeConstraint` 的实例.\n\n```objectivec\n// MASConstraintMaker.m\n\nNSMutableArray *children = [NSMutableArray arrayWithCapacity:attributes.count];\n\nfor (MASViewAttribute *a in attributes) {\n[children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];\n}\n\nMASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];\nconstraint.delegate = self;\n[self.constraints addObject:constraint];\nreturn constraint;\n```\n\n### mas_equalTo\n\nMasonry 中还有一个类似与 magic 的宏, 这个宏将 C 和 Objective-C 语言中的一些基本数据结构比如说 `double` `CGPoint` `CGSize` 这些值用 `NSValue` 进行包装.\n\n这是一种非常简洁的使用方式, 如果你对这个非常感兴趣, 可以看一下 `MASUtilities.h` 中的源代码, 在这里就不对这个做出解释了.\n\n## Masonry 如何为视图添加约束(面试回答)\n\nMasonry 与其它的第三方开源框架一样选择了使用分类的方式为 UIKit 添加一个方法 `mas_makeConstraint`, 这个方法接受了一个 block, 这个 block 有一个 `MASConstraintMaker` 类型的参数, 这个 maker 会持有一个**约束的数组**, 这里保存着所有将被加入到视图中的约束.\n\n我们通过链式的语法配置 maker, 设置它的 `left` `right` 等属性, 比如说 `make.left.equalTo(view)`, 其实这个 `left` `equalTo` 还有像 `with` `offset` 之类的方法都会返回一个 `MASConstraint` 的实例, 所以在这里才可以用类似 Ruby 中链式的语法. \n\n在配置结束后, 首先会调用 maker 的 `install` 方法, 而这个 maker 的 `install` 方法会遍历其持有的约束数组, 对其中的每一个约束发送 `install` 消息. 在这里就会使用到在上一步中配置的属性, 初始化 `NSLayoutConstraint` 的子类 `MASLayoutConstraint` 并添加到合适的视图上.\n\n视图的选择会通过调用一个方法 `mas_closestCommonSuperview:` 来返回两个视图的**最近公共父视图**.\n\n## 总结\n\n虽然 Masonry 这个框架中的代码并不是非常的多, 只有 1,2 万行的代码, 但是感觉这个项目阅读起来十分的困难, 没有 SDWebImage 清晰, 因为代码中类的属性非常的多, 而且有很多相似的属性会干扰我们对这个项目的阅读, 整个框架运用了大量的 block 语法进行回调. \n\n虽然代码十分整洁不过我觉得却降低了可读性, 但是还是那句话, 把简洁留给别人复杂留给自己, 只要为开发者提供简洁的接口就可以了.\n\nFollow: [@Draveness](https://github.com/Draveness)\n\n\n","slug":"iOS-源代码分析-Masonry","published":1,"updated":"2019-05-28T09:54:11.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfym10002fw0477k4mdcb","content":"<p><a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a> 是 Objective-C 中用于自动布局的第三方框架, 我们一般使用它来代替冗长, 繁琐的 AutoLayout 代码. </p>\n<p>Masonry 的使用还是很简洁的:<br><a id=\"more\"></a></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[button mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">make.centerX.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">make.top.equalTo(<span class=\"keyword\">self</span>.view).with.offset(<span class=\"number\">40</span>);</span><br><span class=\"line\">make.width.equalTo(@<span class=\"number\">185</span>);</span><br><span class=\"line\">make.height.equalTo(@<span class=\"number\">38</span>);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"从-mas-makeConstraints-开始\"><a href=\"#从-mas-makeConstraints-开始\" class=\"headerlink\" title=\"从 mas_makeConstraints: 开始\"></a>从 mas_makeConstraints: 开始</h2><p>其中最常用的方法就是 </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br></pre></td></tr></table></figure>\n<p>同样, 也有用于<strong>更新和重新构建</strong>约束的分类方法:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constraint-Maker-Block\"><a href=\"#Constraint-Maker-Block\" class=\"headerlink\" title=\"Constraint Maker Block\"></a>Constraint Maker Block</h2><p>我们以 <code>mas_makeConstraints:</code> 方法为入口来分析一下 Masonry 以及类似的框架(SnapKit)是如何工作的. <code>mas_makeConstraints:</code> 方法位于 <code>UIView</code> 的分类 <code>MASAdditions</code> 中.</p>\n<blockquote>\n<pre><code>Provides constraint maker block and convience methods for creating MASViewAttribute which are view + NSLayoutAttribute pairs.\n</code></pre></blockquote>\n<p>这个分类为我们提供一种非常便捷的方法来配置 <code>MASConstraintMaker</code>, 并为视图添加 <code>mas_left</code> <code>mas_right</code> 等属性.</p>\n<p>方法的实现如下:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *))block &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">block(constraintMaker);</span><br><span class=\"line\"><span class=\"keyword\">return</span> [constraintMaker install];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 Masonry 是封装的苹果的 AutoLayout 框架, 所以我们要在为视图添加约束前将 <code>translatesAutoresizingMaskIntoConstraints</code> 属性设置为 <code>NO</code>. 如果这个属性没有被正确设置, 那么视图的约束不会被成功添加.</p>\n<p>在设置 <code>translatesAutoresizingMaskIntoConstraints</code> 属性之后, </p>\n<ul>\n<li>我们会初始化一个 <code>MASConstraintMaker</code> 的实例.</li>\n<li>然后将 maker 传入 block 配置其属性.</li>\n<li>最后调用 maker 的 <code>install</code> 方法为视图添加约束.</li>\n</ul>\n<h2 id=\"MASConstraintMaker\"><a href=\"#MASConstraintMaker\" class=\"headerlink\" title=\"MASConstraintMaker\"></a>MASConstraintMaker</h2><p><code>MASConstraintMaker</code> 为我们提供了工厂方法来创建 <code>MASConstraint</code>. 所有的约束都会被收集直到它们最后调用 <code>install</code> 方法添加到视图上.</p>\n<blockquote>\n<p>Provides factory methods for creating MASConstraints. Constraints are collected until they are ready to be installed</p>\n</blockquote>\n<p>在初始化 <code>MASConstraintMaker</code> 的实例时, 它会<strong>持有一个对应 view 的弱引用</strong>, 并初始化一个  <code>constraints</code> 的空可变数组用来之后配置属性时持有所有的约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)initWithView:(MAS_VIEW *)view &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.view = view;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.constraints = <span class=\"built_in\">NSMutableArray</span>.new;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>MAS_VIEW</code> 是一个宏, 是 <code>UIView</code> 的 alias.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASUtilities.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAS_VIEW UIView</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setup-MASConstraintMaker\"><a href=\"#Setup-MASConstraintMaker\" class=\"headerlink\" title=\"Setup MASConstraintMaker\"></a>Setup MASConstraintMaker</h2><p>在调用 <code>block(constraintMaker)</code> 时, 实际上是对 <code>constraintMaker</code> 的配置.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.centerX.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">make.top.equalTo(<span class=\"keyword\">self</span>.view).with.offset(<span class=\"number\">40</span>);</span><br><span class=\"line\">make.width.equalTo(@<span class=\"number\">185</span>);</span><br><span class=\"line\">make.height.equalTo(@<span class=\"number\">38</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"make-left\"><a href=\"#make-left\" class=\"headerlink\" title=\"make.left\"></a>make.left</h3><p>访问 <code>make</code> 的 <code>left</code> <code>right</code> <code>top</code> <code>bottom</code>  等属性时, 会调用 <code>constraint:addConstraintWithLayoutAttribute:</code> 方法.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)left &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithLayoutAttribute:<span class=\"built_in\">NSLayoutAttributeLeft</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class=\"built_in\">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> constraint:<span class=\"literal\">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class=\"built_in\">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class=\"line\">MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class=\"keyword\">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class=\"line\">MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!constraint) &#123;</span><br><span class=\"line\">newConstraint.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints addObject:newConstraint];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> newConstraint;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用链上最终会达到 <code>constraint:addConstraintWithLayoutAttribute:</code> 这一方法, 在这里省略了一些暂时不需要了解的问题. 因为在这个类中传入该方法的第一个参数一直为 <code>nil</code>, 所以这里省略的代码不会执行.</p>\n<p>这部分代码会先以布局属性 <code>left</code> 和视图本身初始化一个 <code>MASViewAttribute</code> 的实例, 之后使用 <code>MASViewAttribute</code> 的实例初始化一个 <code>constraint</code> 并设置它的代理, 加入数组, 然后返回.</p>\n<p>这些工作就是你在输入 <code>make.left</code> 进行的全部工作, 它会返回一个 <code>MASConstraint</code>, 用于之后的继续配置.</p>\n<h3 id=\"make-left-equalTo-80\"><a href=\"#make-left-equalTo-80\" class=\"headerlink\" title=\"make.left.equalTo(@80)\"></a>make.left.equalTo(@80)</h3><p>在 <code>make.left</code> 返回 <code>MASConstraint</code> 之后, 我们会继续在这个链式的语法中调用下一个方法来指定约束的关系.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))equalTo;</span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))greaterThanOrEqualTo;</span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))lessThanOrEqualTo;</span><br></pre></td></tr></table></figure>\n<p>这三个方法是在 <code>MASViewConstraint</code> 的父类, <code>MASConstraint</code> 中定义的.</p>\n<p><code>MASConstraint</code> 是一个抽象类, 其中有很多的方法都<strong>必须在子类中覆写</strong>的. Masonry 中有两个 <code>MASConstraint</code> 的子类, 分别是 <code>MASViewConstraint</code> 和 <code>MASCompositeConstraint</code>. 后者实际上是一些<strong>约束的集合</strong>. 这么设计的原因我们会在 post 的最后解释.</p>\n<p>先来看一下这三个方法是怎么实现的:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>))equalTo &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ^<span class=\"keyword\">id</span>(<span class=\"keyword\">id</span> attribute) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.equalToWithRelation(attribute, <span class=\"built_in\">NSLayoutRelationEqual</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法会导致 <code>self.equalToWithRelation</code> 的执行, 而这个方法是定义在子类中的, 因为父类作为抽象类没有提供这个方法的具体实现.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSLayoutRelation</span>))equalToWithRelation &#123; MASMethodNotImplemented(); &#125;</span><br></pre></td></tr></table></figure>\n<p><code>MASMethodNotImplemented</code> 也是一个宏定义, 用于在<strong>子类未继承这个方法</strong>或者<strong>直接使用这个类</strong>时抛出异常.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MASMethodNotImplemented() \\</span></span><br><span class=\"line\">@<span class=\"keyword\">throw</span> [NSException exceptionWithName:NSInternalInconsistencyException \\</span><br><span class=\"line\">reason:[NSString stringWithFormat:@<span class=\"string\">\"You must override %@ in a subclass.\"</span>, NSStringFromSelector(_cmd)] \\</span><br><span class=\"line\">userInfo:nil]</span><br></pre></td></tr></table></figure>\n<p>因为我们为 <code>equalTo</code> 提供了参数 <code>attribute</code> 和布局关系 <code>NSLayoutRelationEqual</code>, 这两个参数会传递到 <code>equalToWithRelation</code> 中, 设置 <code>constraint</code> 的布局关系和 <code>secondViewAttribute</code> 属性, 为即将 maker 的 <code>install</code> 做准备.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSLayoutRelation</span>))equalToWithRelation &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ^<span class=\"keyword\">id</span>(<span class=\"keyword\">id</span> attribute, <span class=\"built_in\">NSLayoutRelation</span> relation) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([attribute isKindOfClass:<span class=\"built_in\">NSArray</span>.class]) &#123; ... &#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutRelation = relation;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.secondViewAttribute = attribute;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们不得不提一下 <code>setSecondViewAttribute:</code> 方法, 它并不只是一个简单的 setter 方法, 它会根据你传入的值的种类赋值.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setSecondViewAttribute:(<span class=\"keyword\">id</span>)secondViewAttribute &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:<span class=\"built_in\">NSValue</span>.class]) &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setLayoutConstantWithValue:secondViewAttribute];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</span><br><span class=\"line\">_secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class=\"keyword\">self</span>.firstViewAttribute.layoutAttribute];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</span><br><span class=\"line\">_secondViewAttribute = secondViewAttribute;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSAssert</span>(<span class=\"literal\">NO</span>, <span class=\"string\">@\"attempting to add unsupported attribute: %@\"</span>, secondViewAttribute);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种情况对应的就是:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(@<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n<p>传入 <code>NSValue</code> 的时, 会直接设置 <code>constraint</code> 的 <code>offset</code>, <code>centerOffset</code>, <code>sizeOffset</code>, 或者 <code>insets</code></p>\n<p>第二种情况一般会直接传入一个视图:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(view);</span><br></pre></td></tr></table></figure>\n<p>这时, 就会初始化一个 <code>layoutAttribute</code> 属性与 <code>firstViewArribute</code> 相同的 <code>MASViewAttribute</code>, 上面的代码就会使视图与 <code>view</code> 左对齐.</p>\n<p>第三种情况会传入一个视图的 <code>MASViewAttribute</code>:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(view.mas_right);</span><br></pre></td></tr></table></figure>\n<p>使用这种写法时, 一般是因为约束的方向不同. 这行代码会使视图的左侧与 <code>view</code> 的右侧对齐.</p>\n<p>到这里我们就基本完成了对<strong>一个</strong>约束的配置, 接下来可以使用相同的语法完成对一个视图上所有约束进行配置, 然后进入了最后一个环节.</p>\n<h2 id=\"Install-MASConstraintMaker\"><a href=\"#Install-MASConstraintMaker\" class=\"headerlink\" title=\"Install MASConstraintMaker\"></a>Install MASConstraintMaker</h2><p>我们会在 <code>mas_makeConstraints:</code> 方法的最后调用 <code>[constraintMaker install]</code> 方法来安装所有存储在 <code>self.constraints</code> 数组中的所有约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)install &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.removeExisting) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *installedConstraints = [MASViewConstraint installedConstraintsForView:<span class=\"keyword\">self</span>.view];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASConstraint *constraint <span class=\"keyword\">in</span> installedConstraints) &#123;</span><br><span class=\"line\">[constraint uninstall];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *constraints = <span class=\"keyword\">self</span>.constraints.copy;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASConstraint *constraint <span class=\"keyword\">in</span> constraints) &#123;</span><br><span class=\"line\">constraint.updateExisting = <span class=\"keyword\">self</span>.updateExisting;</span><br><span class=\"line\">[constraint install];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints removeAllObjects];</span><br><span class=\"line\"><span class=\"keyword\">return</span> constraints;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方法会先判断当前的视图的约束是否应该要被 <code>uninstall</code>, 如果我们在最开始调用 <code>mas_remakeConstraints:</code> 方法时, 视图中原来的约束就会全部被 <code>uninstall</code>.</p>\n<p>然后就会遍历 <code>constraints</code> 数组, 发送 <code>install</code> 消息.</p>\n<h3 id=\"MASViewConstraint-install\"><a href=\"#MASViewConstraint-install\" class=\"headerlink\" title=\"MASViewConstraint install\"></a>MASViewConstraint install</h3><p>MASViewConstraint 的 <code>install</code> 方法就是最后为当前视图添加约束的最后的方法, 首先这个方法会先获取即将用于初始化 <code>NSLayoutConstraint</code> 的子类的几个属性.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAS_VIEW *firstLayoutItem = <span class=\"keyword\">self</span>.firstViewAttribute.view;</span><br><span class=\"line\"><span class=\"built_in\">NSLayoutAttribute</span> firstLayoutAttribute = <span class=\"keyword\">self</span>.firstViewAttribute.layoutAttribute;</span><br><span class=\"line\">MAS_VIEW *secondLayoutItem = <span class=\"keyword\">self</span>.secondViewAttribute.view;</span><br><span class=\"line\"><span class=\"built_in\">NSLayoutAttribute</span> secondLayoutAttribute = <span class=\"keyword\">self</span>.secondViewAttribute.layoutAttribute;</span><br></pre></td></tr></table></figure>\n<p>Masonry 之后会判断当前即将添加的约束是否是 size 类型的约束</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.firstViewAttribute.isSizeAttribute &amp;&amp; !<span class=\"keyword\">self</span>.secondViewAttribute) &#123;</span><br><span class=\"line\">secondLayoutItem = firstLayoutItem.superview;</span><br><span class=\"line\">secondLayoutAttribute = firstLayoutAttribute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不是 size 类型并且没有提供第二个 <code>viewAttribute</code>, (e.g. <code>make.left.equalTo(@10);</code>) 会自动将约束添加到 <code>superview</code> 上. 它等价于:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(superView.mas_left).with.offset(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>然后就会初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code>:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MASLayoutConstraint *layoutConstraint</span><br><span class=\"line\">= [MASLayoutConstraint constraintWithItem:firstLayoutItem</span><br><span class=\"line\">attribute:firstLayoutAttribute</span><br><span class=\"line\">relatedBy:<span class=\"keyword\">self</span>.layoutRelation</span><br><span class=\"line\">toItem:secondLayoutItem</span><br><span class=\"line\">attribute:secondLayoutAttribute</span><br><span class=\"line\">multiplier:<span class=\"keyword\">self</span>.layoutMultiplier</span><br><span class=\"line\">constant:<span class=\"keyword\">self</span>.layoutConstant];</span><br><span class=\"line\">layoutConstraint.priority = <span class=\"keyword\">self</span>.layoutPriority;</span><br></pre></td></tr></table></figure>\n<p>接下来它会寻找 <code>firstLayoutItem</code> 和 <code>secondLayoutItem</code> 两个视图的公共 <code>superview</code>, 相当于求两个数的最小公倍数. </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)mas_closestCommonSuperview:(MAS_VIEW *)view &#123;</span><br><span class=\"line\">MAS_VIEW *closestCommonSuperview = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MAS_VIEW *secondViewSuperview = view;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!closestCommonSuperview &amp;&amp; secondViewSuperview) &#123;</span><br><span class=\"line\">MAS_VIEW *firstViewSuperview = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!closestCommonSuperview &amp;&amp; firstViewSuperview) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (secondViewSuperview == firstViewSuperview) &#123;</span><br><span class=\"line\">closestCommonSuperview = secondViewSuperview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">firstViewSuperview = firstViewSuperview.superview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">secondViewSuperview = secondViewSuperview.superview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> closestCommonSuperview;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要升级当前的约束就会获取原有的约束, 并替换为新的约束, 这样就不需要再次为 <code>view</code> 安装约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MASLayoutConstraint *existingConstraint = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.updateExisting) &#123;</span><br><span class=\"line\">existingConstraint = [<span class=\"keyword\">self</span> layoutConstraintSimilarTo:layoutConstraint];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (existingConstraint) &#123;</span><br><span class=\"line\"><span class=\"comment\">// just update the constant</span></span><br><span class=\"line\">existingConstraint.constant = layoutConstraint.constant;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstraint = existingConstraint;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.installedView addConstraint:layoutConstraint];</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstraint = layoutConstraint;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[firstLayoutItem.mas_installedConstraints addObject:<span class=\"keyword\">self</span>];</span><br></pre></td></tr></table></figure>\n<p>如果原来的 <code>view</code> 中不存在可以升级的约束, 或者没有调用 <code>mas_updateConstraint:</code> 方法, 那么就会在上一步寻找到的 <code>installedView</code> 上面添加约束. </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.installedView addConstraint:layoutConstraint];</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><p>到现在为止整个 Masonry 为视图添加约束的过程就已经完成了, 然而我们还有一些待解决的其它问题.</p>\n<h3 id=\"make-left-equal-view-with-offset-30\"><a href=\"#make-left-equal-view-with-offset-30\" class=\"headerlink\" title=\"make.left.equal(view).with.offset(30)\"></a>make.left.equal(view).with.offset(30)</h3><p>我们在前面的讨论中已经讨论了这个链式语法的前半部分, 但是在使用中也会”延长”这个链式语句, 比如添加 <code>with</code> <code>offset</code>.</p>\n<p>其实在 Masonry 中使用 <code>with</code> 并不是必须的, 它的作用仅仅是使代码更加的易读.</p>\n<blockquote>\n<p>Optional semantic property which has no effect but improves the readability of constraint</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\">- (MASConstraint *)with &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)and &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与 <code>with</code> 有着相同作用的还有 <code>and</code>, 这两个方法都会直接返回 <code>MASConstraint</code>, 方法本身不做任何的修改.</p>\n<p>而 <code>offset</code> 方法其实是修改 <code>layoutConstraint</code> 中的常量, 因为 <code>self.layoutConstant</code> 在初始化时会被设置为 0, 我们可以通过修改 <code>offset</code> 属性来改变它.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setOffset:(<span class=\"built_in\">CGFloat</span>)offset &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstant = offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MASCompositeConstraint\"><a href=\"#MASCompositeConstraint\" class=\"headerlink\" title=\"MASCompositeConstraint\"></a>MASCompositeConstraint</h3><p><code>MASCompositeConstraint</code> 是一些 <code>MASConstraint</code> 的集合, 它能够提供一种更加便捷的方法同时为一个视图来添加多个约束.</p>\n<blockquote>\n<p>A group of MASConstraint objects</p>\n</blockquote>\n<p>通过 <code>make</code> 直接调用 <code>edges</code> <code>size</code> <code>center</code> 时, 就会产生一个 <code>MASCompositeConstraint</code> 的实例, 而这个实例会初始化所有对应的单独的约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)edges &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)size &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeWidth | MASAttributeHeight];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)center &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeCenterX | MASAttributeCenterY];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些属性都会调用 <code>addConstraintWithAttributes:</code> 方法, 生成多个属于 <code>MASCompositeConstraint</code> 的实例.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *children = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:attributes.count];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASViewAttribute *a <span class=\"keyword\">in</span> attributes) &#123;</span><br><span class=\"line\">[children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];</span><br><span class=\"line\">constraint.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints addObject:constraint];</span><br><span class=\"line\"><span class=\"keyword\">return</span> constraint;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mas-equalTo\"><a href=\"#mas-equalTo\" class=\"headerlink\" title=\"mas_equalTo\"></a>mas_equalTo</h3><p>Masonry 中还有一个类似与 magic 的宏, 这个宏将 C 和 Objective-C 语言中的一些基本数据结构比如说 <code>double</code> <code>CGPoint</code> <code>CGSize</code> 这些值用 <code>NSValue</code> 进行包装.</p>\n<p>这是一种非常简洁的使用方式, 如果你对这个非常感兴趣, 可以看一下 <code>MASUtilities.h</code> 中的源代码, 在这里就不对这个做出解释了.</p>\n<h2 id=\"Masonry-如何为视图添加约束-面试回答\"><a href=\"#Masonry-如何为视图添加约束-面试回答\" class=\"headerlink\" title=\"Masonry 如何为视图添加约束(面试回答)\"></a>Masonry 如何为视图添加约束(面试回答)</h2><p>Masonry 与其它的第三方开源框架一样选择了使用分类的方式为 UIKit 添加一个方法 <code>mas_makeConstraint</code>, 这个方法接受了一个 block, 这个 block 有一个 <code>MASConstraintMaker</code> 类型的参数, 这个 maker 会持有一个<strong>约束的数组</strong>, 这里保存着所有将被加入到视图中的约束.</p>\n<p>我们通过链式的语法配置 maker, 设置它的 <code>left</code> <code>right</code> 等属性, 比如说 <code>make.left.equalTo(view)</code>, 其实这个 <code>left</code> <code>equalTo</code> 还有像 <code>with</code> <code>offset</code> 之类的方法都会返回一个 <code>MASConstraint</code> 的实例, 所以在这里才可以用类似 Ruby 中链式的语法. </p>\n<p>在配置结束后, 首先会调用 maker 的 <code>install</code> 方法, 而这个 maker 的 <code>install</code> 方法会遍历其持有的约束数组, 对其中的每一个约束发送 <code>install</code> 消息. 在这里就会使用到在上一步中配置的属性, 初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code> 并添加到合适的视图上.</p>\n<p>视图的选择会通过调用一个方法 <code>mas_closestCommonSuperview:</code> 来返回两个视图的<strong>最近公共父视图</strong>.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然 Masonry 这个框架中的代码并不是非常的多, 只有 1,2 万行的代码, 但是感觉这个项目阅读起来十分的困难, 没有 SDWebImage 清晰, 因为代码中类的属性非常的多, 而且有很多相似的属性会干扰我们对这个项目的阅读, 整个框架运用了大量的 block 语法进行回调. </p>\n<p>虽然代码十分整洁不过我觉得却降低了可读性, 但是还是那句话, 把简洁留给别人复杂留给自己, 只要为开发者提供简洁的接口就可以了.</p>\n<p>Follow: <a href=\"https://github.com/Draveness\" target=\"_blank\" rel=\"noopener\">@Draveness</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"noopener\">Masonry</a> 是 Objective-C 中用于自动布局的第三方框架, 我们一般使用它来代替冗长, 繁琐的 AutoLayout 代码. </p>\n<p>Masonry 的使用还是很简洁的:<br>","more":"</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[button mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class=\"line\">make.centerX.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">make.top.equalTo(<span class=\"keyword\">self</span>.view).with.offset(<span class=\"number\">40</span>);</span><br><span class=\"line\">make.width.equalTo(@<span class=\"number\">185</span>);</span><br><span class=\"line\">make.height.equalTo(@<span class=\"number\">38</span>);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"从-mas-makeConstraints-开始\"><a href=\"#从-mas-makeConstraints-开始\" class=\"headerlink\" title=\"从 mas_makeConstraints: 开始\"></a>从 mas_makeConstraints: 开始</h2><p>其中最常用的方法就是 </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br></pre></td></tr></table></figure>\n<p>同样, 也有用于<strong>更新和重新构建</strong>约束的分类方法:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_updateConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_remakeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *make))block;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constraint-Maker-Block\"><a href=\"#Constraint-Maker-Block\" class=\"headerlink\" title=\"Constraint Maker Block\"></a>Constraint Maker Block</h2><p>我们以 <code>mas_makeConstraints:</code> 方法为入口来分析一下 Masonry 以及类似的框架(SnapKit)是如何工作的. <code>mas_makeConstraints:</code> 方法位于 <code>UIView</code> 的分类 <code>MASAdditions</code> 中.</p>\n<blockquote>\n<pre><code>Provides constraint maker block and convience methods for creating MASViewAttribute which are view + NSLayoutAttribute pairs.\n</code></pre></blockquote>\n<p>这个分类为我们提供一种非常便捷的方法来配置 <code>MASConstraintMaker</code>, 并为视图添加 <code>mas_left</code> <code>mas_right</code> 等属性.</p>\n<p>方法的实现如下:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)mas_makeConstraints:(<span class=\"keyword\">void</span>(^)(MASConstraintMaker *))block &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.translatesAutoresizingMaskIntoConstraints = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">block(constraintMaker);</span><br><span class=\"line\"><span class=\"keyword\">return</span> [constraintMaker install];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 Masonry 是封装的苹果的 AutoLayout 框架, 所以我们要在为视图添加约束前将 <code>translatesAutoresizingMaskIntoConstraints</code> 属性设置为 <code>NO</code>. 如果这个属性没有被正确设置, 那么视图的约束不会被成功添加.</p>\n<p>在设置 <code>translatesAutoresizingMaskIntoConstraints</code> 属性之后, </p>\n<ul>\n<li>我们会初始化一个 <code>MASConstraintMaker</code> 的实例.</li>\n<li>然后将 maker 传入 block 配置其属性.</li>\n<li>最后调用 maker 的 <code>install</code> 方法为视图添加约束.</li>\n</ul>\n<h2 id=\"MASConstraintMaker\"><a href=\"#MASConstraintMaker\" class=\"headerlink\" title=\"MASConstraintMaker\"></a>MASConstraintMaker</h2><p><code>MASConstraintMaker</code> 为我们提供了工厂方法来创建 <code>MASConstraint</code>. 所有的约束都会被收集直到它们最后调用 <code>install</code> 方法添加到视图上.</p>\n<blockquote>\n<p>Provides factory methods for creating MASConstraints. Constraints are collected until they are ready to be installed</p>\n</blockquote>\n<p>在初始化 <code>MASConstraintMaker</code> 的实例时, 它会<strong>持有一个对应 view 的弱引用</strong>, 并初始化一个  <code>constraints</code> 的空可变数组用来之后配置属性时持有所有的约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)initWithView:(MAS_VIEW *)view &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">self</span>.view = view;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.constraints = <span class=\"built_in\">NSMutableArray</span>.new;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>MAS_VIEW</code> 是一个宏, 是 <code>UIView</code> 的 alias.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASUtilities.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAS_VIEW UIView</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Setup-MASConstraintMaker\"><a href=\"#Setup-MASConstraintMaker\" class=\"headerlink\" title=\"Setup MASConstraintMaker\"></a>Setup MASConstraintMaker</h2><p>在调用 <code>block(constraintMaker)</code> 时, 实际上是对 <code>constraintMaker</code> 的配置.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.centerX.equalTo(<span class=\"keyword\">self</span>.view);</span><br><span class=\"line\">make.top.equalTo(<span class=\"keyword\">self</span>.view).with.offset(<span class=\"number\">40</span>);</span><br><span class=\"line\">make.width.equalTo(@<span class=\"number\">185</span>);</span><br><span class=\"line\">make.height.equalTo(@<span class=\"number\">38</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"make-left\"><a href=\"#make-left\" class=\"headerlink\" title=\"make.left\"></a>make.left</h3><p>访问 <code>make</code> 的 <code>left</code> <code>right</code> <code>top</code> <code>bottom</code>  等属性时, 会调用 <code>constraint:addConstraintWithLayoutAttribute:</code> 方法.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)left &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithLayoutAttribute:<span class=\"built_in\">NSLayoutAttributeLeft</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class=\"built_in\">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> constraint:<span class=\"literal\">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class=\"built_in\">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class=\"line\">MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class=\"keyword\">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class=\"line\">MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!constraint) &#123;</span><br><span class=\"line\">newConstraint.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints addObject:newConstraint];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> newConstraint;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用链上最终会达到 <code>constraint:addConstraintWithLayoutAttribute:</code> 这一方法, 在这里省略了一些暂时不需要了解的问题. 因为在这个类中传入该方法的第一个参数一直为 <code>nil</code>, 所以这里省略的代码不会执行.</p>\n<p>这部分代码会先以布局属性 <code>left</code> 和视图本身初始化一个 <code>MASViewAttribute</code> 的实例, 之后使用 <code>MASViewAttribute</code> 的实例初始化一个 <code>constraint</code> 并设置它的代理, 加入数组, 然后返回.</p>\n<p>这些工作就是你在输入 <code>make.left</code> 进行的全部工作, 它会返回一个 <code>MASConstraint</code>, 用于之后的继续配置.</p>\n<h3 id=\"make-left-equalTo-80\"><a href=\"#make-left-equalTo-80\" class=\"headerlink\" title=\"make.left.equalTo(@80)\"></a>make.left.equalTo(@80)</h3><p>在 <code>make.left</code> 返回 <code>MASConstraint</code> 之后, 我们会继续在这个链式的语法中调用下一个方法来指定约束的关系.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.h</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))equalTo;</span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))greaterThanOrEqualTo;</span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span> attr))lessThanOrEqualTo;</span><br></pre></td></tr></table></figure>\n<p>这三个方法是在 <code>MASViewConstraint</code> 的父类, <code>MASConstraint</code> 中定义的.</p>\n<p><code>MASConstraint</code> 是一个抽象类, 其中有很多的方法都<strong>必须在子类中覆写</strong>的. Masonry 中有两个 <code>MASConstraint</code> 的子类, 分别是 <code>MASViewConstraint</code> 和 <code>MASCompositeConstraint</code>. 后者实际上是一些<strong>约束的集合</strong>. 这么设计的原因我们会在 post 的最后解释.</p>\n<p>先来看一下这三个方法是怎么实现的:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>))equalTo &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ^<span class=\"keyword\">id</span>(<span class=\"keyword\">id</span> attribute) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.equalToWithRelation(attribute, <span class=\"built_in\">NSLayoutRelationEqual</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法会导致 <code>self.equalToWithRelation</code> 的执行, 而这个方法是定义在子类中的, 因为父类作为抽象类没有提供这个方法的具体实现.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSLayoutRelation</span>))equalToWithRelation &#123; MASMethodNotImplemented(); &#125;</span><br></pre></td></tr></table></figure>\n<p><code>MASMethodNotImplemented</code> 也是一个宏定义, 用于在<strong>子类未继承这个方法</strong>或者<strong>直接使用这个类</strong>时抛出异常.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MASMethodNotImplemented() \\</span></span><br><span class=\"line\">@<span class=\"keyword\">throw</span> [NSException exceptionWithName:NSInternalInconsistencyException \\</span><br><span class=\"line\">reason:[NSString stringWithFormat:@<span class=\"string\">\"You must override %@ in a subclass.\"</span>, NSStringFromSelector(_cmd)] \\</span><br><span class=\"line\">userInfo:nil]</span><br></pre></td></tr></table></figure>\n<p>因为我们为 <code>equalTo</code> 提供了参数 <code>attribute</code> 和布局关系 <code>NSLayoutRelationEqual</code>, 这两个参数会传递到 <code>equalToWithRelation</code> 中, 设置 <code>constraint</code> 的布局关系和 <code>secondViewAttribute</code> 属性, 为即将 maker 的 <code>install</code> 做准备.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint * (^)(<span class=\"keyword\">id</span>, <span class=\"built_in\">NSLayoutRelation</span>))equalToWithRelation &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ^<span class=\"keyword\">id</span>(<span class=\"keyword\">id</span> attribute, <span class=\"built_in\">NSLayoutRelation</span> relation) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([attribute isKindOfClass:<span class=\"built_in\">NSArray</span>.class]) &#123; ... &#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutRelation = relation;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.secondViewAttribute = attribute;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们不得不提一下 <code>setSecondViewAttribute:</code> 方法, 它并不只是一个简单的 setter 方法, 它会根据你传入的值的种类赋值.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setSecondViewAttribute:(<span class=\"keyword\">id</span>)secondViewAttribute &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:<span class=\"built_in\">NSValue</span>.class]) &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setLayoutConstantWithValue:secondViewAttribute];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</span><br><span class=\"line\">_secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class=\"keyword\">self</span>.firstViewAttribute.layoutAttribute];</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</span><br><span class=\"line\">_secondViewAttribute = secondViewAttribute;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSAssert</span>(<span class=\"literal\">NO</span>, <span class=\"string\">@\"attempting to add unsupported attribute: %@\"</span>, secondViewAttribute);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种情况对应的就是:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(@<span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n<p>传入 <code>NSValue</code> 的时, 会直接设置 <code>constraint</code> 的 <code>offset</code>, <code>centerOffset</code>, <code>sizeOffset</code>, 或者 <code>insets</code></p>\n<p>第二种情况一般会直接传入一个视图:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(view);</span><br></pre></td></tr></table></figure>\n<p>这时, 就会初始化一个 <code>layoutAttribute</code> 属性与 <code>firstViewArribute</code> 相同的 <code>MASViewAttribute</code>, 上面的代码就会使视图与 <code>view</code> 左对齐.</p>\n<p>第三种情况会传入一个视图的 <code>MASViewAttribute</code>:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(view.mas_right);</span><br></pre></td></tr></table></figure>\n<p>使用这种写法时, 一般是因为约束的方向不同. 这行代码会使视图的左侧与 <code>view</code> 的右侧对齐.</p>\n<p>到这里我们就基本完成了对<strong>一个</strong>约束的配置, 接下来可以使用相同的语法完成对一个视图上所有约束进行配置, 然后进入了最后一个环节.</p>\n<h2 id=\"Install-MASConstraintMaker\"><a href=\"#Install-MASConstraintMaker\" class=\"headerlink\" title=\"Install MASConstraintMaker\"></a>Install MASConstraintMaker</h2><p>我们会在 <code>mas_makeConstraints:</code> 方法的最后调用 <code>[constraintMaker install]</code> 方法来安装所有存储在 <code>self.constraints</code> 数组中的所有约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span> *)install &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.removeExisting) &#123;</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *installedConstraints = [MASViewConstraint installedConstraintsForView:<span class=\"keyword\">self</span>.view];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASConstraint *constraint <span class=\"keyword\">in</span> installedConstraints) &#123;</span><br><span class=\"line\">[constraint uninstall];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">NSArray</span> *constraints = <span class=\"keyword\">self</span>.constraints.copy;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASConstraint *constraint <span class=\"keyword\">in</span> constraints) &#123;</span><br><span class=\"line\">constraint.updateExisting = <span class=\"keyword\">self</span>.updateExisting;</span><br><span class=\"line\">[constraint install];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints removeAllObjects];</span><br><span class=\"line\"><span class=\"keyword\">return</span> constraints;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方法会先判断当前的视图的约束是否应该要被 <code>uninstall</code>, 如果我们在最开始调用 <code>mas_remakeConstraints:</code> 方法时, 视图中原来的约束就会全部被 <code>uninstall</code>.</p>\n<p>然后就会遍历 <code>constraints</code> 数组, 发送 <code>install</code> 消息.</p>\n<h3 id=\"MASViewConstraint-install\"><a href=\"#MASViewConstraint-install\" class=\"headerlink\" title=\"MASViewConstraint install\"></a>MASViewConstraint install</h3><p>MASViewConstraint 的 <code>install</code> 方法就是最后为当前视图添加约束的最后的方法, 首先这个方法会先获取即将用于初始化 <code>NSLayoutConstraint</code> 的子类的几个属性.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAS_VIEW *firstLayoutItem = <span class=\"keyword\">self</span>.firstViewAttribute.view;</span><br><span class=\"line\"><span class=\"built_in\">NSLayoutAttribute</span> firstLayoutAttribute = <span class=\"keyword\">self</span>.firstViewAttribute.layoutAttribute;</span><br><span class=\"line\">MAS_VIEW *secondLayoutItem = <span class=\"keyword\">self</span>.secondViewAttribute.view;</span><br><span class=\"line\"><span class=\"built_in\">NSLayoutAttribute</span> secondLayoutAttribute = <span class=\"keyword\">self</span>.secondViewAttribute.layoutAttribute;</span><br></pre></td></tr></table></figure>\n<p>Masonry 之后会判断当前即将添加的约束是否是 size 类型的约束</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.firstViewAttribute.isSizeAttribute &amp;&amp; !<span class=\"keyword\">self</span>.secondViewAttribute) &#123;</span><br><span class=\"line\">secondLayoutItem = firstLayoutItem.superview;</span><br><span class=\"line\">secondLayoutAttribute = firstLayoutAttribute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不是 size 类型并且没有提供第二个 <code>viewAttribute</code>, (e.g. <code>make.left.equalTo(@10);</code>) 会自动将约束添加到 <code>superview</code> 上. 它等价于:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make.left.equalTo(superView.mas_left).with.offset(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>然后就会初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code>:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MASLayoutConstraint *layoutConstraint</span><br><span class=\"line\">= [MASLayoutConstraint constraintWithItem:firstLayoutItem</span><br><span class=\"line\">attribute:firstLayoutAttribute</span><br><span class=\"line\">relatedBy:<span class=\"keyword\">self</span>.layoutRelation</span><br><span class=\"line\">toItem:secondLayoutItem</span><br><span class=\"line\">attribute:secondLayoutAttribute</span><br><span class=\"line\">multiplier:<span class=\"keyword\">self</span>.layoutMultiplier</span><br><span class=\"line\">constant:<span class=\"keyword\">self</span>.layoutConstant];</span><br><span class=\"line\">layoutConstraint.priority = <span class=\"keyword\">self</span>.layoutPriority;</span><br></pre></td></tr></table></figure>\n<p>接下来它会寻找 <code>firstLayoutItem</code> 和 <code>secondLayoutItem</code> 两个视图的公共 <code>superview</code>, 相当于求两个数的最小公倍数. </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View+MASAdditions.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)mas_closestCommonSuperview:(MAS_VIEW *)view &#123;</span><br><span class=\"line\">MAS_VIEW *closestCommonSuperview = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MAS_VIEW *secondViewSuperview = view;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!closestCommonSuperview &amp;&amp; secondViewSuperview) &#123;</span><br><span class=\"line\">MAS_VIEW *firstViewSuperview = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!closestCommonSuperview &amp;&amp; firstViewSuperview) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (secondViewSuperview == firstViewSuperview) &#123;</span><br><span class=\"line\">closestCommonSuperview = secondViewSuperview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">firstViewSuperview = firstViewSuperview.superview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">secondViewSuperview = secondViewSuperview.superview;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> closestCommonSuperview;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果需要升级当前的约束就会获取原有的约束, 并替换为新的约束, 这样就不需要再次为 <code>view</code> 安装约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">MASLayoutConstraint *existingConstraint = <span class=\"literal\">nil</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.updateExisting) &#123;</span><br><span class=\"line\">existingConstraint = [<span class=\"keyword\">self</span> layoutConstraintSimilarTo:layoutConstraint];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (existingConstraint) &#123;</span><br><span class=\"line\"><span class=\"comment\">// just update the constant</span></span><br><span class=\"line\">existingConstraint.constant = layoutConstraint.constant;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstraint = existingConstraint;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.installedView addConstraint:layoutConstraint];</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstraint = layoutConstraint;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[firstLayoutItem.mas_installedConstraints addObject:<span class=\"keyword\">self</span>];</span><br></pre></td></tr></table></figure>\n<p>如果原来的 <code>view</code> 中不存在可以升级的约束, 或者没有调用 <code>mas_updateConstraint:</code> 方法, 那么就会在上一步寻找到的 <code>installedView</code> 上面添加约束. </p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span>.installedView addConstraint:layoutConstraint];</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><p>到现在为止整个 Masonry 为视图添加约束的过程就已经完成了, 然而我们还有一些待解决的其它问题.</p>\n<h3 id=\"make-left-equal-view-with-offset-30\"><a href=\"#make-left-equal-view-with-offset-30\" class=\"headerlink\" title=\"make.left.equal(view).with.offset(30)\"></a>make.left.equal(view).with.offset(30)</h3><p>我们在前面的讨论中已经讨论了这个链式语法的前半部分, 但是在使用中也会”延长”这个链式语句, 比如添加 <code>with</code> <code>offset</code>.</p>\n<p>其实在 Masonry 中使用 <code>with</code> 并不是必须的, 它的作用仅仅是使代码更加的易读.</p>\n<blockquote>\n<p>Optional semantic property which has no effect but improves the readability of constraint</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraint.m</span></span><br><span class=\"line\">- (MASConstraint *)with &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)and &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与 <code>with</code> 有着相同作用的还有 <code>and</code>, 这两个方法都会直接返回 <code>MASConstraint</code>, 方法本身不做任何的修改.</p>\n<p>而 <code>offset</code> 方法其实是修改 <code>layoutConstraint</code> 中的常量, 因为 <code>self.layoutConstant</code> 在初始化时会被设置为 0, 我们可以通过修改 <code>offset</code> 属性来改变它.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASViewConstraint.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setOffset:(<span class=\"built_in\">CGFloat</span>)offset &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.layoutConstant = offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MASCompositeConstraint\"><a href=\"#MASCompositeConstraint\" class=\"headerlink\" title=\"MASCompositeConstraint\"></a>MASCompositeConstraint</h3><p><code>MASCompositeConstraint</code> 是一些 <code>MASConstraint</code> 的集合, 它能够提供一种更加便捷的方法同时为一个视图来添加多个约束.</p>\n<blockquote>\n<p>A group of MASConstraint objects</p>\n</blockquote>\n<p>通过 <code>make</code> 直接调用 <code>edges</code> <code>size</code> <code>center</code> 时, 就会产生一个 <code>MASCompositeConstraint</code> 的实例, 而这个实例会初始化所有对应的单独的约束.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)edges &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)size &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeWidth | MASAttributeHeight];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (MASConstraint *)center &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addConstraintWithAttributes:MASAttributeCenterX | MASAttributeCenterY];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些属性都会调用 <code>addConstraintWithAttributes:</code> 方法, 生成多个属于 <code>MASCompositeConstraint</code> 的实例.</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MASConstraintMaker.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">NSMutableArray</span> *children = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:attributes.count];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MASViewAttribute *a <span class=\"keyword\">in</span> attributes) &#123;</span><br><span class=\"line\">[children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];</span><br><span class=\"line\">constraint.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.constraints addObject:constraint];</span><br><span class=\"line\"><span class=\"keyword\">return</span> constraint;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mas-equalTo\"><a href=\"#mas-equalTo\" class=\"headerlink\" title=\"mas_equalTo\"></a>mas_equalTo</h3><p>Masonry 中还有一个类似与 magic 的宏, 这个宏将 C 和 Objective-C 语言中的一些基本数据结构比如说 <code>double</code> <code>CGPoint</code> <code>CGSize</code> 这些值用 <code>NSValue</code> 进行包装.</p>\n<p>这是一种非常简洁的使用方式, 如果你对这个非常感兴趣, 可以看一下 <code>MASUtilities.h</code> 中的源代码, 在这里就不对这个做出解释了.</p>\n<h2 id=\"Masonry-如何为视图添加约束-面试回答\"><a href=\"#Masonry-如何为视图添加约束-面试回答\" class=\"headerlink\" title=\"Masonry 如何为视图添加约束(面试回答)\"></a>Masonry 如何为视图添加约束(面试回答)</h2><p>Masonry 与其它的第三方开源框架一样选择了使用分类的方式为 UIKit 添加一个方法 <code>mas_makeConstraint</code>, 这个方法接受了一个 block, 这个 block 有一个 <code>MASConstraintMaker</code> 类型的参数, 这个 maker 会持有一个<strong>约束的数组</strong>, 这里保存着所有将被加入到视图中的约束.</p>\n<p>我们通过链式的语法配置 maker, 设置它的 <code>left</code> <code>right</code> 等属性, 比如说 <code>make.left.equalTo(view)</code>, 其实这个 <code>left</code> <code>equalTo</code> 还有像 <code>with</code> <code>offset</code> 之类的方法都会返回一个 <code>MASConstraint</code> 的实例, 所以在这里才可以用类似 Ruby 中链式的语法. </p>\n<p>在配置结束后, 首先会调用 maker 的 <code>install</code> 方法, 而这个 maker 的 <code>install</code> 方法会遍历其持有的约束数组, 对其中的每一个约束发送 <code>install</code> 消息. 在这里就会使用到在上一步中配置的属性, 初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code> 并添加到合适的视图上.</p>\n<p>视图的选择会通过调用一个方法 <code>mas_closestCommonSuperview:</code> 来返回两个视图的<strong>最近公共父视图</strong>.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然 Masonry 这个框架中的代码并不是非常的多, 只有 1,2 万行的代码, 但是感觉这个项目阅读起来十分的困难, 没有 SDWebImage 清晰, 因为代码中类的属性非常的多, 而且有很多相似的属性会干扰我们对这个项目的阅读, 整个框架运用了大量的 block 语法进行回调. </p>\n<p>虽然代码十分整洁不过我觉得却降低了可读性, 但是还是那句话, 把简洁留给别人复杂留给自己, 只要为开发者提供简洁的接口就可以了.</p>\n<p>Follow: <a href=\"https://github.com/Draveness\" target=\"_blank\" rel=\"noopener\">@Draveness</a></p>"},{"title":"iOS对象是如何初始化的","date":"2018-11-17T23:25:53.000Z","_content":"\n`+ alloc` 和 `- init` 这一对我们在 iOS 开发中每天都要用到的初始化方法一直困扰着我, 于是笔者仔细研究了一下 objc 源码中 `NSObject` 如何进行初始化。\n\n在具体分析对象的初始化过程之前，我想先放出结论，以免文章中的细枝末节对读者的理解有所影响；整个对象的初始化过程其实只是**为一个分配内存空间，并且初始化 isa_t 结构体的过程**。\n<!-- more -->\n\n## alloc 方法分析\n\n先来看一下 `+ alloc` 方法的调用栈(在调用栈中省略了很多不必要的方法的调用):\n\n```objectivec\nid _objc_rootAlloc(Class cls)\n└── static id callAlloc(Class cls, bool checkNil, bool allocWithZone=false)\n└── id class_createInstance(Class cls, size_t extraBytes)\n└── id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct, size_t *outAllocatedSize)\n├── size_t instanceSize(size_t extraBytes)\n├── void    *calloc(size_t, size_t)\n└── inline void objc_object::initInstanceIsa(Class cls, bool hasCxxDtor)\n```\n\n这个调用栈中的方法涉及了多个文件中的代码，在下面的章节中会对调用的方法逐步进行分析，如果这个调用栈让你觉得很头疼，也不是什么问题。\n\n### alloc 的实现\n\n```objectivec\n+ (id)alloc {\nreturn _objc_rootAlloc(self);\n}\n```\n\n`alloc` 方法的实现真的是非常的简单, 它直接调用了另一个私有方法 `id _objc_rootAlloc(Class cls)`\n\n```objectivec\nid _objc_rootAlloc(Class cls) {\nreturn callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);\n}\n```\n\n这就是上帝类 `NSObject` 对 `callAlloc` 的实现，我们省略了非常多的代码，展示了最常见的执行路径：\n\n```objectivec\nstatic id callAlloc(Class cls, bool checkNil, bool allocWithZone=false) {\nid obj = class_createInstance(cls, 0);\nreturn obj;\n}\n\nid class_createInstance(Class cls, size_t extraBytes) {\nreturn _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\n\n对象初始化中最重要的操作都在 `_class_createInstanceFromZone` 方法中执行：\n\n```objectivec\nstatic id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct = true, size_t *outAllocatedSize = nil) {\nsize_t size = cls->instanceSize(extraBytes);\n\nid obj = (id)calloc(1, size);\nif (!obj) return nil;\nobj->initInstanceIsa(cls, hasCxxDtor);\n\nreturn obj;\n}\n```\n\n### 对象的大小\n\n在使用 `calloc` 为对象分配一块内存空间之前，我们要先获取对象在内存的大小：\n\n```objectivec\nsize_t instanceSize(size_t extraBytes) {\nsize_t size = alignedInstanceSize() + extraBytes;\nif (size < 16) size = 16;\nreturn size;\n}\n\nuint32_t alignedInstanceSize() {\nreturn word_align(unalignedInstanceSize());\n}\n\nuint32_t unalignedInstanceSize() {\nassert(isRealized());\nreturn data()->ro->instanceSize;\n}\n```\n\n实例大小 `instanceSize` 会存储在类的 `isa_t` 结构体中，然后经过对齐最后返回。\n\n> Core Foundation 需要所有的对象的大小都必须大于或等于 16 字节。\n\n在获取对象大小之后，直接调用 `calloc` 函数就可以为对象分配内存空间了。\n\n### isa 的初始化\n\n在对象的初始化过程中除了使用 `calloc` 来分配内存之外，还需要根据类初始化 `isa_t` 结构体：\n\n```objectivec\ninline void objc_object::initIsa(Class cls, bool indexed, bool hasCxxDtor) { \nif (!indexed) {\nisa.cls = cls;\n} else {\nisa.bits = ISA_MAGIC_VALUE;\nisa.has_cxx_dtor = hasCxxDtor;\nisa.shiftcls = (uintptr_t)cls >> 3;\n}\n}\n```\n\n上面的代码只是对 `isa_t` 结构体进行初始化而已：\n\n```objectivec\nunion isa_t {\nisa_t() { }\nisa_t(uintptr_t value) : bits(value) { }\n\nClass cls;\nuintptr_t bits;\n\nstruct {\nuintptr_t indexed           : 1;\nuintptr_t has_assoc         : 1;\nuintptr_t has_cxx_dtor      : 1;\nuintptr_t shiftcls          : 44;\nuintptr_t magic             : 6;\nuintptr_t weakly_referenced : 1;\nuintptr_t deallocating      : 1;\nuintptr_t has_sidetable_rc  : 1;\nuintptr_t extra_rc          : 8;\n};\n};\n```\n\n> 介绍关于 `isa_t` 结构体的内容，你可以看[从 NSObject 的初始化了解 isa](https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/objc/从%20NSObject%20的初始化了解%20isa.md) 关于 `isa_t` 的内容。\n\n## init 方法\n\n`NSObject` 的 `- init` 方法只是调用了 `_objc_rootInit` 并返回了当前对象：\n\n```objectivec\n- (id)init {\nreturn _objc_rootInit(self);\n}\n\nid _objc_rootInit(id obj) {\nreturn obj;\n}\n```\n\n## 总结\n\n在 iOS 中一个对象的初始化过程很符合直觉，只是分配内存空间、然后初始化 `isa_t` 结构体，其实现也并不复杂。\n\n> 参考资料: [Draveness · Github](https://github.com/Draveness)\n","source":"_posts/iOS对象是如何初始化的.md","raw":"---\ntitle: iOS对象是如何初始化的\ndate: 2018-11-18 07:25:53\ntags:\ncategories: iOS\n---\n\n`+ alloc` 和 `- init` 这一对我们在 iOS 开发中每天都要用到的初始化方法一直困扰着我, 于是笔者仔细研究了一下 objc 源码中 `NSObject` 如何进行初始化。\n\n在具体分析对象的初始化过程之前，我想先放出结论，以免文章中的细枝末节对读者的理解有所影响；整个对象的初始化过程其实只是**为一个分配内存空间，并且初始化 isa_t 结构体的过程**。\n<!-- more -->\n\n## alloc 方法分析\n\n先来看一下 `+ alloc` 方法的调用栈(在调用栈中省略了很多不必要的方法的调用):\n\n```objectivec\nid _objc_rootAlloc(Class cls)\n└── static id callAlloc(Class cls, bool checkNil, bool allocWithZone=false)\n└── id class_createInstance(Class cls, size_t extraBytes)\n└── id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct, size_t *outAllocatedSize)\n├── size_t instanceSize(size_t extraBytes)\n├── void    *calloc(size_t, size_t)\n└── inline void objc_object::initInstanceIsa(Class cls, bool hasCxxDtor)\n```\n\n这个调用栈中的方法涉及了多个文件中的代码，在下面的章节中会对调用的方法逐步进行分析，如果这个调用栈让你觉得很头疼，也不是什么问题。\n\n### alloc 的实现\n\n```objectivec\n+ (id)alloc {\nreturn _objc_rootAlloc(self);\n}\n```\n\n`alloc` 方法的实现真的是非常的简单, 它直接调用了另一个私有方法 `id _objc_rootAlloc(Class cls)`\n\n```objectivec\nid _objc_rootAlloc(Class cls) {\nreturn callAlloc(cls, false/*checkNil*/, true/*allocWithZone*/);\n}\n```\n\n这就是上帝类 `NSObject` 对 `callAlloc` 的实现，我们省略了非常多的代码，展示了最常见的执行路径：\n\n```objectivec\nstatic id callAlloc(Class cls, bool checkNil, bool allocWithZone=false) {\nid obj = class_createInstance(cls, 0);\nreturn obj;\n}\n\nid class_createInstance(Class cls, size_t extraBytes) {\nreturn _class_createInstanceFromZone(cls, extraBytes, nil);\n}\n```\n\n对象初始化中最重要的操作都在 `_class_createInstanceFromZone` 方法中执行：\n\n```objectivec\nstatic id _class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone, bool cxxConstruct = true, size_t *outAllocatedSize = nil) {\nsize_t size = cls->instanceSize(extraBytes);\n\nid obj = (id)calloc(1, size);\nif (!obj) return nil;\nobj->initInstanceIsa(cls, hasCxxDtor);\n\nreturn obj;\n}\n```\n\n### 对象的大小\n\n在使用 `calloc` 为对象分配一块内存空间之前，我们要先获取对象在内存的大小：\n\n```objectivec\nsize_t instanceSize(size_t extraBytes) {\nsize_t size = alignedInstanceSize() + extraBytes;\nif (size < 16) size = 16;\nreturn size;\n}\n\nuint32_t alignedInstanceSize() {\nreturn word_align(unalignedInstanceSize());\n}\n\nuint32_t unalignedInstanceSize() {\nassert(isRealized());\nreturn data()->ro->instanceSize;\n}\n```\n\n实例大小 `instanceSize` 会存储在类的 `isa_t` 结构体中，然后经过对齐最后返回。\n\n> Core Foundation 需要所有的对象的大小都必须大于或等于 16 字节。\n\n在获取对象大小之后，直接调用 `calloc` 函数就可以为对象分配内存空间了。\n\n### isa 的初始化\n\n在对象的初始化过程中除了使用 `calloc` 来分配内存之外，还需要根据类初始化 `isa_t` 结构体：\n\n```objectivec\ninline void objc_object::initIsa(Class cls, bool indexed, bool hasCxxDtor) { \nif (!indexed) {\nisa.cls = cls;\n} else {\nisa.bits = ISA_MAGIC_VALUE;\nisa.has_cxx_dtor = hasCxxDtor;\nisa.shiftcls = (uintptr_t)cls >> 3;\n}\n}\n```\n\n上面的代码只是对 `isa_t` 结构体进行初始化而已：\n\n```objectivec\nunion isa_t {\nisa_t() { }\nisa_t(uintptr_t value) : bits(value) { }\n\nClass cls;\nuintptr_t bits;\n\nstruct {\nuintptr_t indexed           : 1;\nuintptr_t has_assoc         : 1;\nuintptr_t has_cxx_dtor      : 1;\nuintptr_t shiftcls          : 44;\nuintptr_t magic             : 6;\nuintptr_t weakly_referenced : 1;\nuintptr_t deallocating      : 1;\nuintptr_t has_sidetable_rc  : 1;\nuintptr_t extra_rc          : 8;\n};\n};\n```\n\n> 介绍关于 `isa_t` 结构体的内容，你可以看[从 NSObject 的初始化了解 isa](https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/objc/从%20NSObject%20的初始化了解%20isa.md) 关于 `isa_t` 的内容。\n\n## init 方法\n\n`NSObject` 的 `- init` 方法只是调用了 `_objc_rootInit` 并返回了当前对象：\n\n```objectivec\n- (id)init {\nreturn _objc_rootInit(self);\n}\n\nid _objc_rootInit(id obj) {\nreturn obj;\n}\n```\n\n## 总结\n\n在 iOS 中一个对象的初始化过程很符合直觉，只是分配内存空间、然后初始化 `isa_t` 结构体，其实现也并不复杂。\n\n> 参考资料: [Draveness · Github](https://github.com/Draveness)\n","slug":"iOS对象是如何初始化的","published":1,"updated":"2019-05-28T09:54:20.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfym50005fw04zfryjdfx","content":"<p><code>+ alloc</code> 和 <code>- init</code> 这一对我们在 iOS 开发中每天都要用到的初始化方法一直困扰着我, 于是笔者仔细研究了一下 objc 源码中 <code>NSObject</code> 如何进行初始化。</p>\n<p>在具体分析对象的初始化过程之前，我想先放出结论，以免文章中的细枝末节对读者的理解有所影响；整个对象的初始化过程其实只是<strong>为一个分配内存空间，并且初始化 isa_t 结构体的过程</strong>。<br><a id=\"more\"></a></p>\n<h2 id=\"alloc-方法分析\"><a href=\"#alloc-方法分析\" class=\"headerlink\" title=\"alloc 方法分析\"></a>alloc 方法分析</h2><p>先来看一下 <code>+ alloc</code> 方法的调用栈(在调用栈中省略了很多不必要的方法的调用):</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls)</span><br><span class=\"line\">└── <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>)</span><br><span class=\"line\">└── <span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes)</span><br><span class=\"line\">└── <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct, size_t *outAllocatedSize)</span><br><span class=\"line\">├── size_t instanceSize(size_t extraBytes)</span><br><span class=\"line\">├── <span class=\"keyword\">void</span>    *calloc(size_t, size_t)</span><br><span class=\"line\">└── <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> objc_object::initInstanceIsa(Class cls, <span class=\"keyword\">bool</span> hasCxxDtor)</span><br></pre></td></tr></table></figure>\n<p>这个调用栈中的方法涉及了多个文件中的代码，在下面的章节中会对调用的方法逐步进行分析，如果这个调用栈让你觉得很头疼，也不是什么问题。</p>\n<h3 id=\"alloc-的实现\"><a href=\"#alloc-的实现\" class=\"headerlink\" title=\"alloc 的实现\"></a>alloc 的实现</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)alloc &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _objc_rootAlloc(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>alloc</code> 方法的实现真的是非常的简单, 它直接调用了另一个私有方法 <code>id _objc_rootAlloc(Class cls)</code></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> callAlloc(cls, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>, <span class=\"literal\">true</span><span class=\"comment\">/*allocWithZone*/</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是上帝类 <code>NSObject</code> 对 <code>callAlloc</code> 的实现，我们省略了非常多的代码，展示了最常见的执行路径：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">id</span> obj = class_createInstance(cls, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class=\"literal\">nil</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象初始化中最重要的操作都在 <code>_class_createInstanceFromZone</code> 方法中执行：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct = <span class=\"literal\">true</span>, size_t *outAllocatedSize = <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的大小\"><a href=\"#对象的大小\" class=\"headerlink\" title=\"对象的大小\"></a>对象的大小</h3><p>在使用 <code>calloc</code> 为对象分配一块内存空间之前，我们要先获取对象在内存的大小：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t instanceSize(size_t extraBytes) &#123;</span><br><span class=\"line\">size_t size = alignedInstanceSize() + extraBytes;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (size &lt; <span class=\"number\">16</span>) size = <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uint32_t alignedInstanceSize() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uint32_t unalignedInstanceSize() &#123;</span><br><span class=\"line\">assert(isRealized());</span><br><span class=\"line\"><span class=\"keyword\">return</span> data()-&gt;ro-&gt;instanceSize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例大小 <code>instanceSize</code> 会存储在类的 <code>isa_t</code> 结构体中，然后经过对齐最后返回。</p>\n<blockquote>\n<p>Core Foundation 需要所有的对象的大小都必须大于或等于 16 字节。</p>\n</blockquote>\n<p>在获取对象大小之后，直接调用 <code>calloc</code> 函数就可以为对象分配内存空间了。</p>\n<h3 id=\"isa-的初始化\"><a href=\"#isa-的初始化\" class=\"headerlink\" title=\"isa 的初始化\"></a>isa 的初始化</h3><p>在对象的初始化过程中除了使用 <code>calloc</code> 来分配内存之外，还需要根据类初始化 <code>isa_t</code> 结构体：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> objc_object::initIsa(Class cls, <span class=\"keyword\">bool</span> indexed, <span class=\"keyword\">bool</span> hasCxxDtor) &#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!indexed) &#123;</span><br><span class=\"line\">isa.cls = cls;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">isa.bits = ISA_MAGIC_VALUE;</span><br><span class=\"line\">isa.has_cxx_dtor = hasCxxDtor;</span><br><span class=\"line\">isa.shiftcls = (uintptr_t)cls &gt;&gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码只是对 <code>isa_t</code> 结构体进行初始化而已：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> isa_t &#123;</span><br><span class=\"line\">isa_t() &#123; &#125;</span><br><span class=\"line\">isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class cls;</span><br><span class=\"line\">uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">uintptr_t indexed           : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_assoc         : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_cxx_dtor      : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t shiftcls          : <span class=\"number\">44</span>;</span><br><span class=\"line\">uintptr_t magic             : <span class=\"number\">6</span>;</span><br><span class=\"line\">uintptr_t weakly_referenced : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t deallocating      : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_sidetable_rc  : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t extra_rc          : <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>介绍关于 <code>isa_t</code> 结构体的内容，你可以看<a href=\"https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/objc/从%20NSObject%20的初始化了解%20isa.md\" target=\"_blank\" rel=\"noopener\">从 NSObject 的初始化了解 isa</a> 关于 <code>isa_t</code> 的内容。</p>\n</blockquote>\n<h2 id=\"init-方法\"><a href=\"#init-方法\" class=\"headerlink\" title=\"init 方法\"></a>init 方法</h2><p><code>NSObject</code> 的 <code>- init</code> 方法只是调用了 <code>_objc_rootInit</code> 并返回了当前对象：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _objc_rootInit(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootInit(<span class=\"keyword\">id</span> obj) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在 iOS 中一个对象的初始化过程很符合直觉，只是分配内存空间、然后初始化 <code>isa_t</code> 结构体，其实现也并不复杂。</p>\n<blockquote>\n<p>参考资料: <a href=\"https://github.com/Draveness\" target=\"_blank\" rel=\"noopener\">Draveness · Github</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><code>+ alloc</code> 和 <code>- init</code> 这一对我们在 iOS 开发中每天都要用到的初始化方法一直困扰着我, 于是笔者仔细研究了一下 objc 源码中 <code>NSObject</code> 如何进行初始化。</p>\n<p>在具体分析对象的初始化过程之前，我想先放出结论，以免文章中的细枝末节对读者的理解有所影响；整个对象的初始化过程其实只是<strong>为一个分配内存空间，并且初始化 isa_t 结构体的过程</strong>。<br>","more":"</p>\n<h2 id=\"alloc-方法分析\"><a href=\"#alloc-方法分析\" class=\"headerlink\" title=\"alloc 方法分析\"></a>alloc 方法分析</h2><p>先来看一下 <code>+ alloc</code> 方法的调用栈(在调用栈中省略了很多不必要的方法的调用):</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls)</span><br><span class=\"line\">└── <span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>)</span><br><span class=\"line\">└── <span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes)</span><br><span class=\"line\">└── <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct, size_t *outAllocatedSize)</span><br><span class=\"line\">├── size_t instanceSize(size_t extraBytes)</span><br><span class=\"line\">├── <span class=\"keyword\">void</span>    *calloc(size_t, size_t)</span><br><span class=\"line\">└── <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> objc_object::initInstanceIsa(Class cls, <span class=\"keyword\">bool</span> hasCxxDtor)</span><br></pre></td></tr></table></figure>\n<p>这个调用栈中的方法涉及了多个文件中的代码，在下面的章节中会对调用的方法逐步进行分析，如果这个调用栈让你觉得很头疼，也不是什么问题。</p>\n<h3 id=\"alloc-的实现\"><a href=\"#alloc-的实现\" class=\"headerlink\" title=\"alloc 的实现\"></a>alloc 的实现</h3><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)alloc &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _objc_rootAlloc(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>alloc</code> 方法的实现真的是非常的简单, 它直接调用了另一个私有方法 <code>id _objc_rootAlloc(Class cls)</code></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootAlloc(Class cls) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> callAlloc(cls, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>, <span class=\"literal\">true</span><span class=\"comment\">/*allocWithZone*/</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是上帝类 <code>NSObject</code> 对 <code>callAlloc</code> 的实现，我们省略了非常多的代码，展示了最常见的执行路径：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">id</span> obj = class_createInstance(cls, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> class_createInstance(Class cls, size_t extraBytes) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class=\"literal\">nil</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象初始化中最重要的操作都在 <code>_class_createInstanceFromZone</code> 方法中执行：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">id</span> _class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, <span class=\"keyword\">bool</span> cxxConstruct = <span class=\"literal\">true</span>, size_t *outAllocatedSize = <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的大小\"><a href=\"#对象的大小\" class=\"headerlink\" title=\"对象的大小\"></a>对象的大小</h3><p>在使用 <code>calloc</code> 为对象分配一块内存空间之前，我们要先获取对象在内存的大小：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t instanceSize(size_t extraBytes) &#123;</span><br><span class=\"line\">size_t size = alignedInstanceSize() + extraBytes;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (size &lt; <span class=\"number\">16</span>) size = <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uint32_t alignedInstanceSize() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uint32_t unalignedInstanceSize() &#123;</span><br><span class=\"line\">assert(isRealized());</span><br><span class=\"line\"><span class=\"keyword\">return</span> data()-&gt;ro-&gt;instanceSize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例大小 <code>instanceSize</code> 会存储在类的 <code>isa_t</code> 结构体中，然后经过对齐最后返回。</p>\n<blockquote>\n<p>Core Foundation 需要所有的对象的大小都必须大于或等于 16 字节。</p>\n</blockquote>\n<p>在获取对象大小之后，直接调用 <code>calloc</code> 函数就可以为对象分配内存空间了。</p>\n<h3 id=\"isa-的初始化\"><a href=\"#isa-的初始化\" class=\"headerlink\" title=\"isa 的初始化\"></a>isa 的初始化</h3><p>在对象的初始化过程中除了使用 <code>calloc</code> 来分配内存之外，还需要根据类初始化 <code>isa_t</code> 结构体：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> objc_object::initIsa(Class cls, <span class=\"keyword\">bool</span> indexed, <span class=\"keyword\">bool</span> hasCxxDtor) &#123; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (!indexed) &#123;</span><br><span class=\"line\">isa.cls = cls;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">isa.bits = ISA_MAGIC_VALUE;</span><br><span class=\"line\">isa.has_cxx_dtor = hasCxxDtor;</span><br><span class=\"line\">isa.shiftcls = (uintptr_t)cls &gt;&gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码只是对 <code>isa_t</code> 结构体进行初始化而已：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> isa_t &#123;</span><br><span class=\"line\">isa_t() &#123; &#125;</span><br><span class=\"line\">isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class cls;</span><br><span class=\"line\">uintptr_t bits;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">uintptr_t indexed           : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_assoc         : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_cxx_dtor      : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t shiftcls          : <span class=\"number\">44</span>;</span><br><span class=\"line\">uintptr_t magic             : <span class=\"number\">6</span>;</span><br><span class=\"line\">uintptr_t weakly_referenced : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t deallocating      : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t has_sidetable_rc  : <span class=\"number\">1</span>;</span><br><span class=\"line\">uintptr_t extra_rc          : <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>介绍关于 <code>isa_t</code> 结构体的内容，你可以看<a href=\"https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/objc/从%20NSObject%20的初始化了解%20isa.md\" target=\"_blank\" rel=\"noopener\">从 NSObject 的初始化了解 isa</a> 关于 <code>isa_t</code> 的内容。</p>\n</blockquote>\n<h2 id=\"init-方法\"><a href=\"#init-方法\" class=\"headerlink\" title=\"init 方法\"></a>init 方法</h2><p><code>NSObject</code> 的 <code>- init</code> 方法只是调用了 <code>_objc_rootInit</code> 并返回了当前对象：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> _objc_rootInit(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span> _objc_rootInit(<span class=\"keyword\">id</span> obj) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在 iOS 中一个对象的初始化过程很符合直觉，只是分配内存空间、然后初始化 <code>isa_t</code> 结构体，其实现也并不复杂。</p>\n<blockquote>\n<p>参考资料: <a href=\"https://github.com/Draveness\" target=\"_blank\" rel=\"noopener\">Draveness · Github</a></p>\n</blockquote>"},{"title":"javascript(一)","date":"2019-03-21T08:43:46.000Z","_content":"## javascript(JS)的组成？\n- DOM 文档对象模型\n- BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好]\n- ECMAScript 核心(翻译器)\n\n## javascript(JS)在页面中处理了什么事情？\n- 特效交互\n- 数据交互\n- 逻辑操作\n<!-- more -->\n\n## 常见特效的原理\n- 通过js修改元素的css样式，来操作元素的变化。\n\n## js可以写在那里？\n注意：行为(js)，样式（css），结构（html）三者分离\n- 写在标签内部，行间事件【不建议这样写，不容易实现分离】\n- 在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。\n```\n<!--行内js 作用于标签上面-->\n<button onclick=\"alert(123)\">按钮</button>\n```\n- 写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。\n```\n<button id=\"but2\">按钮2</botton>\n<script>\ndocument.getElementById(\"but2\").onclick = function(){\nalert('就是这么绑定事件！');\n}\n</script>\n```\n- 写在外部调用，专门的js文件中【通过src引入】\n```\n<!--外链JS-->\n<script src=\"js/1.js\"></script>\n```\n\n## 获取元素\n- 如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题]\n- document.getElementById(\"idName\"); 获取Id\n\n- 【单、双引号都可以，但是要成对存在】\n- 【翻译：在文档中 获取 元素 通过 ID】\n- 【获取该元素之前，请确保元素已经被解析了】\n\n```\n<script>\ndocument.getElementById(\"but\").onclick = function(){\ndocument.getElementById(\"div1\").style.width  = \"200px\";\ndocument.getElementById(\"div1\").style.height = \"200px\";\n}\n</script>\n```\n\n## 属性操作\n- 属性的读操作(获取元素的属性值)\n- clsss不叫class，叫className\n```\ndocument.getElementById('div').className;\n```\n- style 操作的是元素的行间样式\n```\n<div id=\"div\" style=\"border:#f00 1px solid;\"><div>\n<script>\ndocument.getElementById('div').style;\n</script>\n```\n- 获取src的时候获取到的是绝对路径\n- 获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式\n- eg:只设置了一个background:color。\n```\n<div id=\"div\" style=\"background:blue\"></div>\n<script>\n/*\n*火狐得到的是:blue none repeat scroll 0% 0%;\n*谷歌得到的是：blue\n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色\n- eg:background:#f60,得到的是rgb(255, 102, 0)\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\n/*\n* 得到的是rgb(255, 102, 0) \n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 遇到“-”，删除“-”，首字母大写\n- eg:background-color  => backgroundColor\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\ndocument.getElementById('div').style.backgroundColor;\n</script>\n\n```\n\n- 属性的写操作(修改元素的属性值)\n\n**【注意： 在写left，width等样式时，一定注意加单位 】**\n- 把等号右侧的值赋给左侧\n```\nvar sum = 100;\n```\n- cssText获取**style**中所有的内容\n- 直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style=\"color:#f00;\"\ndiv.cssText = \"color:#f00;\"\n//这个时候style=\"background:#f60;color:#f00;\"\ndiv.cssText +=\"color:#f00;\"\n</script>\n\n```\n- cssText = \"\" 可以直接清空所有的行间样式。\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style被清空\ndiv.cssText = \"\"\n</script>\n```\n\n- innerHTML 代表元素中的所有内容\n- 从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素\n- 直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； \n```\n<div id=\"div\"><span>aa</span></div>\n<script>\nvar div = document.getElementById('div');\n\n//<div id=\"div\">aaa</div>\ndiv.innerHTML = \"aaa\"\n\n//<div id=\"div\"><span>aa</span>aaa</div>\ndiv.innerHTML += \"aaa\"\n</script>\n```\n\n\n\n## 字符串\n- 一种数据格式，引号包起来的一串字符\n\n## undefined\n- 一种数据类型，未定义\n\n## +号运算符\n- 加法运算\n- 链接两个字符串\n- +=（a += b  --- a = a + b）\n- 加号有两个作用\n- 一个是加法运算\n- 一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。\n\n```\nvar a = \"哈哈哈\";\nvar b = 1000;\nconsole.log(a+b);//哈哈哈1000\nconsole.log(b+a);//1000哈哈哈\n```\n\n## 变量\n- 变量就相当于给数据起了一个简短的名字\n- 变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。\n- 变量声明\n- var 变量名 = 要存储的具体数据\n- 变量命名：\n- 1. 以字母开始\n- 2. 变量在命名时最好带有含义\n- 3. 注意不能使用关键字和保留字\n- 4. 驼峰方式命名\n- 5. 不能以数字、特殊符号（除了$,_）开头\n- 6. 后续内容不能包含特殊符号（除了$,_）\n```\n<button id=\"but\">按钮1</button>\n<div id=\"div1\"></div>\n<script>\nvar but1 = document.getElementById('but');\nvar div1 = document.getElementById('div1');\nbtn1.onclick = function(){\ndiv1.style.width = \"200px\";\ndiv1.style.height = \"200px\";\ndiv1.innerHTML = \"您好！\"；\n}\n</scirpt>\n```\n\n## 函数\n- 有名字的函数\n函数声明：\nfunction name(){\n要执行的内容\n}\n调用:name();\n\n- 匿名函数【不能直接使用，只能使用在事件中】\n- eg:btn1.onclick = function{要执行的内容}\n- 函数调用：把函数执行一遍\n- 事件调用 btn.onclick = name;[注意不加括号]\n- 非事件调用：添加括号\n\n【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】\n\n【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】\n\n- 什么时候加括号，什么时候不加括号？\n- 1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）；\n- 2.当某种特定的条件下才执行，不需要加（）；\n\n## window和window.onload\n- onload事件 加载完成\n\n## onmouseover和onmouseout\n> 鼠标移入和移出\n\n## 调试工具：\n- alert()【弹出对话框，接受的是一个字符串】\n- console.log【打印控制台】\n\n* 控制台\n* F12，或者右键->审查元素方式可以打开调试工具\n* 选择：console\n* 可以通过console进行数据输出，分析，代码调试\n\n```\n<button id=\"btn\">按钮1</button>\n<div id=\"div1\"></div>\n<script>\nvar div1 = document.getElementById('div1');\nvar div1 = document.getElementById('div1');\nbtn1.onclick = function(){\n//把信息以日志方式打印到控制台中\nconsole.log(\"你好\");\n//打印数据信息结构\nconsole.dir(div1);\n}\n</script>\n```\n","source":"_posts/javascript-一.md","raw":"---\ntitle: javascript(一)\ndate: 2019-03-21 16:43:46\ntags:\ncategories: JavaScript\n---\n## javascript(JS)的组成？\n- DOM 文档对象模型\n- BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好]\n- ECMAScript 核心(翻译器)\n\n## javascript(JS)在页面中处理了什么事情？\n- 特效交互\n- 数据交互\n- 逻辑操作\n<!-- more -->\n\n## 常见特效的原理\n- 通过js修改元素的css样式，来操作元素的变化。\n\n## js可以写在那里？\n注意：行为(js)，样式（css），结构（html）三者分离\n- 写在标签内部，行间事件【不建议这样写，不容易实现分离】\n- 在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。\n```\n<!--行内js 作用于标签上面-->\n<button onclick=\"alert(123)\">按钮</button>\n```\n- 写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。\n```\n<button id=\"but2\">按钮2</botton>\n<script>\ndocument.getElementById(\"but2\").onclick = function(){\nalert('就是这么绑定事件！');\n}\n</script>\n```\n- 写在外部调用，专门的js文件中【通过src引入】\n```\n<!--外链JS-->\n<script src=\"js/1.js\"></script>\n```\n\n## 获取元素\n- 如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题]\n- document.getElementById(\"idName\"); 获取Id\n\n- 【单、双引号都可以，但是要成对存在】\n- 【翻译：在文档中 获取 元素 通过 ID】\n- 【获取该元素之前，请确保元素已经被解析了】\n\n```\n<script>\ndocument.getElementById(\"but\").onclick = function(){\ndocument.getElementById(\"div1\").style.width  = \"200px\";\ndocument.getElementById(\"div1\").style.height = \"200px\";\n}\n</script>\n```\n\n## 属性操作\n- 属性的读操作(获取元素的属性值)\n- clsss不叫class，叫className\n```\ndocument.getElementById('div').className;\n```\n- style 操作的是元素的行间样式\n```\n<div id=\"div\" style=\"border:#f00 1px solid;\"><div>\n<script>\ndocument.getElementById('div').style;\n</script>\n```\n- 获取src的时候获取到的是绝对路径\n- 获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式\n- eg:只设置了一个background:color。\n```\n<div id=\"div\" style=\"background:blue\"></div>\n<script>\n/*\n*火狐得到的是:blue none repeat scroll 0% 0%;\n*谷歌得到的是：blue\n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色\n- eg:background:#f60,得到的是rgb(255, 102, 0)\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\n/*\n* 得到的是rgb(255, 102, 0) \n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 遇到“-”，删除“-”，首字母大写\n- eg:background-color  => backgroundColor\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\ndocument.getElementById('div').style.backgroundColor;\n</script>\n\n```\n\n- 属性的写操作(修改元素的属性值)\n\n**【注意： 在写left，width等样式时，一定注意加单位 】**\n- 把等号右侧的值赋给左侧\n```\nvar sum = 100;\n```\n- cssText获取**style**中所有的内容\n- 直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style=\"color:#f00;\"\ndiv.cssText = \"color:#f00;\"\n//这个时候style=\"background:#f60;color:#f00;\"\ndiv.cssText +=\"color:#f00;\"\n</script>\n\n```\n- cssText = \"\" 可以直接清空所有的行间样式。\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style被清空\ndiv.cssText = \"\"\n</script>\n```\n\n- innerHTML 代表元素中的所有内容\n- 从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素\n- 直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； \n```\n<div id=\"div\"><span>aa</span></div>\n<script>\nvar div = document.getElementById('div');\n\n//<div id=\"div\">aaa</div>\ndiv.innerHTML = \"aaa\"\n\n//<div id=\"div\"><span>aa</span>aaa</div>\ndiv.innerHTML += \"aaa\"\n</script>\n```\n\n\n\n## 字符串\n- 一种数据格式，引号包起来的一串字符\n\n## undefined\n- 一种数据类型，未定义\n\n## +号运算符\n- 加法运算\n- 链接两个字符串\n- +=（a += b  --- a = a + b）\n- 加号有两个作用\n- 一个是加法运算\n- 一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。\n\n```\nvar a = \"哈哈哈\";\nvar b = 1000;\nconsole.log(a+b);//哈哈哈1000\nconsole.log(b+a);//1000哈哈哈\n```\n\n## 变量\n- 变量就相当于给数据起了一个简短的名字\n- 变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。\n- 变量声明\n- var 变量名 = 要存储的具体数据\n- 变量命名：\n- 1. 以字母开始\n- 2. 变量在命名时最好带有含义\n- 3. 注意不能使用关键字和保留字\n- 4. 驼峰方式命名\n- 5. 不能以数字、特殊符号（除了$,_）开头\n- 6. 后续内容不能包含特殊符号（除了$,_）\n```\n<button id=\"but\">按钮1</button>\n<div id=\"div1\"></div>\n<script>\nvar but1 = document.getElementById('but');\nvar div1 = document.getElementById('div1');\nbtn1.onclick = function(){\ndiv1.style.width = \"200px\";\ndiv1.style.height = \"200px\";\ndiv1.innerHTML = \"您好！\"；\n}\n</scirpt>\n```\n\n## 函数\n- 有名字的函数\n函数声明：\nfunction name(){\n要执行的内容\n}\n调用:name();\n\n- 匿名函数【不能直接使用，只能使用在事件中】\n- eg:btn1.onclick = function{要执行的内容}\n- 函数调用：把函数执行一遍\n- 事件调用 btn.onclick = name;[注意不加括号]\n- 非事件调用：添加括号\n\n【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】\n\n【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】\n\n- 什么时候加括号，什么时候不加括号？\n- 1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）；\n- 2.当某种特定的条件下才执行，不需要加（）；\n\n## window和window.onload\n- onload事件 加载完成\n\n## onmouseover和onmouseout\n> 鼠标移入和移出\n\n## 调试工具：\n- alert()【弹出对话框，接受的是一个字符串】\n- console.log【打印控制台】\n\n* 控制台\n* F12，或者右键->审查元素方式可以打开调试工具\n* 选择：console\n* 可以通过console进行数据输出，分析，代码调试\n\n```\n<button id=\"btn\">按钮1</button>\n<div id=\"div1\"></div>\n<script>\nvar div1 = document.getElementById('div1');\nvar div1 = document.getElementById('div1');\nbtn1.onclick = function(){\n//把信息以日志方式打印到控制台中\nconsole.log(\"你好\");\n//打印数据信息结构\nconsole.dir(div1);\n}\n</script>\n```\n","slug":"javascript-一","published":1,"updated":"2019-05-28T09:56:29.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfym60006fw04fajtrxui","content":"<h2 id=\"javascript-JS-的组成？\"><a href=\"#javascript-JS-的组成？\" class=\"headerlink\" title=\"javascript(JS)的组成？\"></a>javascript(JS)的组成？</h2><ul>\n<li>DOM 文档对象模型</li>\n<li>BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好]</li>\n<li>ECMAScript 核心(翻译器)</li>\n</ul>\n<h2 id=\"javascript-JS-在页面中处理了什么事情？\"><a href=\"#javascript-JS-在页面中处理了什么事情？\" class=\"headerlink\" title=\"javascript(JS)在页面中处理了什么事情？\"></a>javascript(JS)在页面中处理了什么事情？</h2><ul>\n<li>特效交互</li>\n<li>数据交互</li>\n<li>逻辑操作<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"常见特效的原理\"><a href=\"#常见特效的原理\" class=\"headerlink\" title=\"常见特效的原理\"></a>常见特效的原理</h2><ul>\n<li>通过js修改元素的css样式，来操作元素的变化。</li>\n</ul>\n<h2 id=\"js可以写在那里？\"><a href=\"#js可以写在那里？\" class=\"headerlink\" title=\"js可以写在那里？\"></a>js可以写在那里？</h2><p>注意：行为(js)，样式（css），结构（html）三者分离</p>\n<ul>\n<li>写在标签内部，行间事件【不建议这样写，不容易实现分离】</li>\n<li><p>在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--行内js 作用于标签上面--&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;alert(123)&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;but2&quot;&gt;按钮2&lt;/botton&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&quot;but2&quot;).onclick = function()&#123;</span><br><span class=\"line\">alert(&apos;就是这么绑定事件！&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写在外部调用，专门的js文件中【通过src引入】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--外链JS--&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/1.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h2><ul>\n<li>如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题]</li>\n<li><p>document.getElementById(“idName”); 获取Id</p>\n</li>\n<li><p>【单、双引号都可以，但是要成对存在】</p>\n</li>\n<li>【翻译：在文档中 获取 元素 通过 ID】</li>\n<li>【获取该元素之前，请确保元素已经被解析了】</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&quot;but&quot;).onclick = function()&#123;</span><br><span class=\"line\">document.getElementById(&quot;div1&quot;).style.width  = &quot;200px&quot;;</span><br><span class=\"line\">document.getElementById(&quot;div1&quot;).style.height = &quot;200px&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性操作\"><a href=\"#属性操作\" class=\"headerlink\" title=\"属性操作\"></a>属性操作</h2><ul>\n<li>属性的读操作(获取元素的属性值)</li>\n<li><p>clsss不叫class，叫className</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;div&apos;).className;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>style 操作的是元素的行间样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取src的时候获取到的是绝对路径</p>\n</li>\n<li>获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</li>\n<li><p>eg:只设置了一个background:color。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*火狐得到的是:blue none repeat scroll 0% 0%;</span><br><span class=\"line\">*谷歌得到的是：blue</span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>\n</li>\n<li><p>eg:background:#f60,得到的是rgb(255, 102, 0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">* 得到的是rgb(255, 102, 0) </span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遇到“-”，删除“-”，首字母大写</p>\n</li>\n<li><p>eg:background-color  =&gt; backgroundColor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.backgroundColor;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性的写操作(修改元素的属性值)</p>\n</li>\n</ul>\n<p><strong>【注意： 在写left，width等样式时，一定注意加单位 】</strong></p>\n<ul>\n<li><p>把等号右侧的值赋给左侧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = 100;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cssText获取<strong>style</strong>中所有的内容</p>\n</li>\n<li><p>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style=&quot;color:#f00;&quot;</span><br><span class=\"line\">div.cssText = &quot;color:#f00;&quot;</span><br><span class=\"line\">//这个时候style=&quot;background:#f60;color:#f00;&quot;</span><br><span class=\"line\">div.cssText +=&quot;color:#f00;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cssText = “” 可以直接清空所有的行间样式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style被清空</span><br><span class=\"line\">div.cssText = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>innerHTML 代表元素中的所有内容</p>\n</li>\n<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>\n<li>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML = &quot;aaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML += &quot;aaa&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>一种数据格式，引号包起来的一串字符</li>\n</ul>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><ul>\n<li>一种数据类型，未定义</li>\n</ul>\n<h2 id=\"号运算符\"><a href=\"#号运算符\" class=\"headerlink\" title=\"+号运算符\"></a>+号运算符</h2><ul>\n<li>加法运算</li>\n<li>链接两个字符串</li>\n<li>+=（a += b  — a = a + b）</li>\n<li>加号有两个作用</li>\n<li>一个是加法运算</li>\n<li>一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;哈哈哈&quot;;</span><br><span class=\"line\">var b = 1000;</span><br><span class=\"line\">console.log(a+b);//哈哈哈1000</span><br><span class=\"line\">console.log(b+a);//1000哈哈哈</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量就相当于给数据起了一个简短的名字</li>\n<li>变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。</li>\n<li>变量声明</li>\n<li>var 变量名 = 要存储的具体数据</li>\n<li>变量命名：</li>\n<li><ol>\n<li>以字母开始</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>变量在命名时最好带有含义</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>注意不能使用关键字和保留字</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>驼峰方式命名</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>不能以数字、特殊符号（除了$,_）开头</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>后续内容不能包含特殊符号（除了$,_）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;but&quot;&gt;按钮1&lt;/button&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var but1 = document.getElementById(&apos;but&apos;);</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">btn1.onclick = function()&#123;</span><br><span class=\"line\">div1.style.width = &quot;200px&quot;;</span><br><span class=\"line\">div1.style.height = &quot;200px&quot;;</span><br><span class=\"line\">div1.innerHTML = &quot;您好！&quot;；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/scirpt&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><p>有名字的函数<br>函数声明：<br>function name(){<br>要执行的内容<br>}<br>调用:name();</p>\n</li>\n<li><p>匿名函数【不能直接使用，只能使用在事件中】</p>\n</li>\n<li>eg:btn1.onclick = function{要执行的内容}</li>\n<li>函数调用：把函数执行一遍</li>\n<li>事件调用 btn.onclick = name;[注意不加括号]</li>\n<li>非事件调用：添加括号</li>\n</ul>\n<p>【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】</p>\n<p>【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】</p>\n<ul>\n<li>什么时候加括号，什么时候不加括号？</li>\n<li>1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）；</li>\n<li>2.当某种特定的条件下才执行，不需要加（）；</li>\n</ul>\n<h2 id=\"window和window-onload\"><a href=\"#window和window-onload\" class=\"headerlink\" title=\"window和window.onload\"></a>window和window.onload</h2><ul>\n<li>onload事件 加载完成</li>\n</ul>\n<h2 id=\"onmouseover和onmouseout\"><a href=\"#onmouseover和onmouseout\" class=\"headerlink\" title=\"onmouseover和onmouseout\"></a>onmouseover和onmouseout</h2><blockquote>\n<p>鼠标移入和移出</p>\n</blockquote>\n<h2 id=\"调试工具：\"><a href=\"#调试工具：\" class=\"headerlink\" title=\"调试工具：\"></a>调试工具：</h2><ul>\n<li>alert()【弹出对话框，接受的是一个字符串】</li>\n<li>console.log【打印控制台】</li>\n</ul>\n<ul>\n<li>控制台</li>\n<li>F12，或者右键-&gt;审查元素方式可以打开调试工具</li>\n<li>选择：console</li>\n<li>可以通过console进行数据输出，分析，代码调试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;按钮1&lt;/button&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">btn1.onclick = function()&#123;</span><br><span class=\"line\">//把信息以日志方式打印到控制台中</span><br><span class=\"line\">console.log(&quot;你好&quot;);</span><br><span class=\"line\">//打印数据信息结构</span><br><span class=\"line\">console.dir(div1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"javascript-JS-的组成？\"><a href=\"#javascript-JS-的组成？\" class=\"headerlink\" title=\"javascript(JS)的组成？\"></a>javascript(JS)的组成？</h2><ul>\n<li>DOM 文档对象模型</li>\n<li>BOM 浏览器对象模型（滚动条之类） [没有标准，也就意味着兼容性不好]</li>\n<li>ECMAScript 核心(翻译器)</li>\n</ul>\n<h2 id=\"javascript-JS-在页面中处理了什么事情？\"><a href=\"#javascript-JS-在页面中处理了什么事情？\" class=\"headerlink\" title=\"javascript(JS)在页面中处理了什么事情？\"></a>javascript(JS)在页面中处理了什么事情？</h2><ul>\n<li>特效交互</li>\n<li>数据交互</li>\n<li>逻辑操作","more":"</li>\n</ul>\n<h2 id=\"常见特效的原理\"><a href=\"#常见特效的原理\" class=\"headerlink\" title=\"常见特效的原理\"></a>常见特效的原理</h2><ul>\n<li>通过js修改元素的css样式，来操作元素的变化。</li>\n</ul>\n<h2 id=\"js可以写在那里？\"><a href=\"#js可以写在那里？\" class=\"headerlink\" title=\"js可以写在那里？\"></a>js可以写在那里？</h2><p>注意：行为(js)，样式（css），结构（html）三者分离</p>\n<ul>\n<li>写在标签内部，行间事件【不建议这样写，不容易实现分离】</li>\n<li><p>在标签上通过一些特殊属性，比如onclick，onmouseover等来实现行为的，并且这个行为和当前元素进行了绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--行内js 作用于标签上面--&gt;</span><br><span class=\"line\">&lt;button onclick=&quot;alert(123)&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写在页面内部专门的script标签中，当浏览器读到script的时候就会解析代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;but2&quot;&gt;按钮2&lt;/botton&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&quot;but2&quot;).onclick = function()&#123;</span><br><span class=\"line\">alert(&apos;就是这么绑定事件！&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写在外部调用，专门的js文件中【通过src引入】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--外链JS--&gt;</span><br><span class=\"line\">&lt;script src=&quot;js/1.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h2><ul>\n<li>如果要获取的是个id，可以直接写元素的id名[存在浏览器兼容问题]</li>\n<li><p>document.getElementById(“idName”); 获取Id</p>\n</li>\n<li><p>【单、双引号都可以，但是要成对存在】</p>\n</li>\n<li>【翻译：在文档中 获取 元素 通过 ID】</li>\n<li>【获取该元素之前，请确保元素已经被解析了】</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&quot;but&quot;).onclick = function()&#123;</span><br><span class=\"line\">document.getElementById(&quot;div1&quot;).style.width  = &quot;200px&quot;;</span><br><span class=\"line\">document.getElementById(&quot;div1&quot;).style.height = &quot;200px&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性操作\"><a href=\"#属性操作\" class=\"headerlink\" title=\"属性操作\"></a>属性操作</h2><ul>\n<li>属性的读操作(获取元素的属性值)</li>\n<li><p>clsss不叫class，叫className</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;div&apos;).className;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>style 操作的是元素的行间样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取src的时候获取到的是绝对路径</p>\n</li>\n<li>获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</li>\n<li><p>eg:只设置了一个background:color。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*火狐得到的是:blue none repeat scroll 0% 0%;</span><br><span class=\"line\">*谷歌得到的是：blue</span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>\n</li>\n<li><p>eg:background:#f60,得到的是rgb(255, 102, 0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">* 得到的是rgb(255, 102, 0) </span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遇到“-”，删除“-”，首字母大写</p>\n</li>\n<li><p>eg:background-color  =&gt; backgroundColor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.backgroundColor;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性的写操作(修改元素的属性值)</p>\n</li>\n</ul>\n<p><strong>【注意： 在写left，width等样式时，一定注意加单位 】</strong></p>\n<ul>\n<li><p>把等号右侧的值赋给左侧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = 100;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cssText获取<strong>style</strong>中所有的内容</p>\n</li>\n<li><p>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style=&quot;color:#f00;&quot;</span><br><span class=\"line\">div.cssText = &quot;color:#f00;&quot;</span><br><span class=\"line\">//这个时候style=&quot;background:#f60;color:#f00;&quot;</span><br><span class=\"line\">div.cssText +=&quot;color:#f00;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cssText = “” 可以直接清空所有的行间样式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style被清空</span><br><span class=\"line\">div.cssText = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>innerHTML 代表元素中的所有内容</p>\n</li>\n<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>\n<li>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML = &quot;aaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML += &quot;aaa&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li>一种数据格式，引号包起来的一串字符</li>\n</ul>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><ul>\n<li>一种数据类型，未定义</li>\n</ul>\n<h2 id=\"号运算符\"><a href=\"#号运算符\" class=\"headerlink\" title=\"+号运算符\"></a>+号运算符</h2><ul>\n<li>加法运算</li>\n<li>链接两个字符串</li>\n<li>+=（a += b  — a = a + b）</li>\n<li>加号有两个作用</li>\n<li>一个是加法运算</li>\n<li>一个是字符串链接：只有加号左右两侧是数字的情况才会执行加法运算，如果有一侧是字符串就会执行字符串链接，结果也是字符串。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;哈哈哈&quot;;</span><br><span class=\"line\">var b = 1000;</span><br><span class=\"line\">console.log(a+b);//哈哈哈1000</span><br><span class=\"line\">console.log(b+a);//1000哈哈哈</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量就相当于给数据起了一个简短的名字</li>\n<li>变量的作用：为了方便数据的复用和维护，我们通常用一个东西存放这类数据，我们就把它称为变量。</li>\n<li>变量声明</li>\n<li>var 变量名 = 要存储的具体数据</li>\n<li>变量命名：</li>\n<li><ol>\n<li>以字母开始</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>变量在命名时最好带有含义</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>注意不能使用关键字和保留字</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>驼峰方式命名</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>不能以数字、特殊符号（除了$,_）开头</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>后续内容不能包含特殊符号（除了$,_）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;but&quot;&gt;按钮1&lt;/button&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var but1 = document.getElementById(&apos;but&apos;);</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">btn1.onclick = function()&#123;</span><br><span class=\"line\">div1.style.width = &quot;200px&quot;;</span><br><span class=\"line\">div1.style.height = &quot;200px&quot;;</span><br><span class=\"line\">div1.innerHTML = &quot;您好！&quot;；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/scirpt&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li><p>有名字的函数<br>函数声明：<br>function name(){<br>要执行的内容<br>}<br>调用:name();</p>\n</li>\n<li><p>匿名函数【不能直接使用，只能使用在事件中】</p>\n</li>\n<li>eg:btn1.onclick = function{要执行的内容}</li>\n<li>函数调用：把函数执行一遍</li>\n<li>事件调用 btn.onclick = name;[注意不加括号]</li>\n<li>非事件调用：添加括号</li>\n</ul>\n<p>【*注意：btn.onclick = name(); 只会直接执行一次，当点击btn的时候就不执行了；】</p>\n<p>【*注意：btn.onclick = function(){name()}; 不直接执行，当点击btn的时候执行；】</p>\n<ul>\n<li>什么时候加括号，什么时候不加括号？</li>\n<li>1.当浏览器直接读到这行代码的时候，就执行需要给函数调用加（）；</li>\n<li>2.当某种特定的条件下才执行，不需要加（）；</li>\n</ul>\n<h2 id=\"window和window-onload\"><a href=\"#window和window-onload\" class=\"headerlink\" title=\"window和window.onload\"></a>window和window.onload</h2><ul>\n<li>onload事件 加载完成</li>\n</ul>\n<h2 id=\"onmouseover和onmouseout\"><a href=\"#onmouseover和onmouseout\" class=\"headerlink\" title=\"onmouseover和onmouseout\"></a>onmouseover和onmouseout</h2><blockquote>\n<p>鼠标移入和移出</p>\n</blockquote>\n<h2 id=\"调试工具：\"><a href=\"#调试工具：\" class=\"headerlink\" title=\"调试工具：\"></a>调试工具：</h2><ul>\n<li>alert()【弹出对话框，接受的是一个字符串】</li>\n<li>console.log【打印控制台】</li>\n</ul>\n<ul>\n<li>控制台</li>\n<li>F12，或者右键-&gt;审查元素方式可以打开调试工具</li>\n<li>选择：console</li>\n<li>可以通过console进行数据输出，分析，代码调试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;按钮1&lt;/button&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">btn1.onclick = function()&#123;</span><br><span class=\"line\">//把信息以日志方式打印到控制台中</span><br><span class=\"line\">console.log(&quot;你好&quot;);</span><br><span class=\"line\">//打印数据信息结构</span><br><span class=\"line\">console.dir(div1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"javascript(七)","date":"2019-03-21T08:43:52.000Z","_content":"## 第一章复习\n### 1.获取元素的方法\n- 获取单个元素：\n- document.getElementById('idName');//只能从document获取\n- document.querySelector('cssSelector');//可以从父级获取\n- 获取一组元素//都可以从父级获取\n- document.querySelectorAll('cssSelector');\n- document.getElementsByTagName('tagName');\n- document.getElementsByClassName('className');\n- query和get方法的区别：\n- query方法只会在声明的时候，获取一次。\n- get方法每次使用的时候，都会获取一次。\n<!-- more -->\n\n### 2.事件\n- onload：加载完成之后（只有window、body能加onload事件）\n- onclick：点击事件\n- onmonuseover 鼠标移入\n- onmouseout 鼠标移除\n\n### 3.变量\n- 用来存储数据的一种方式（存值、存址）。\n- 变量声明：var 变量名 = 要存储的具体数据\n- 规则：在那个函数中声明的变量，就职能在这个函数中使用。\n\n### 4.变量命名\n1. 可以使用字母、数字、$、_。\n2. 变量名不能以数字开头\n3. 驼峰命名：从第二个单词开始首字母大写\n4. 常量命名：字母全部大些，每个单词中间用“_”隔开\n5. 注意关键字和保留字不能用于变量名\n\n### 5.函数\n- 匿名函数：没有名字的函数function(){};\n- 有名字的函数：\n函数声明：function name(){ //执行语句 }\n- 函数调用：\n- 事件调用：\n- el.onclick = name;\n- el.onclick = function(){}\n- 直接调用\n- name();\n\n### 6.属性操作\n- 属性的读操作\n- 属性读操作(获取属性值):obj.属性名\n- 属性写操作(获取修改属性值):obj.属性名 = 属性值；\n- 注意问题：\n- 1.clsss不叫class，叫className\n```\ndocument.getElementById('div').className;\n```\n- 2.style 操作的是元素的行间样式\n```\n<div id=\"div\" style=\"border:#f00 1px solid;\"><div>\n<script>\ndocument.getElementById('div').style;\n</script>\n```\n- 3.获取src的时候获取到的是绝对路径\n- 4.获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式\n- eg:只设置了一个background:color。\n```\n<div id=\"div\" style=\"background:blue\"></div>\n<script>\n/*\n*火狐得到的是:blue none repeat scroll 0% 0%;\n*谷歌得到的是：blue\n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 5.设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色\n- eg:background:#f60,得到的是rgb(255, 102, 0)\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\n/*\n* 得到的是rgb(255, 102, 0) \n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 6.遇到“-”，删除“-”，首字母大写\n- eg:background-color  => backgroundColor\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\ndocument.getElementById('div').style.backgroundColor;\n</script>\n\n```\n- 7.把等号右侧的值赋给左侧\n```\nvar sum = 100;\n```\n- 8.cssText获取**style**中所有的内容\n- 直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style=\"color:#f00;\"\ndiv.cssText = \"color:#f00;\"\n//这个时候style=\"background:#f60;color:#f00;\"\ndiv.cssText +=\"color:#f00;\"\n</script>\n\n```\n- 9.cssText = \"\" 可以直接清空所有的行间样式。\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style被清空\ndiv.cssText = \"\"\n</script>\n```\n\n- 10.innerHTML 代表元素中的所有内容\n- 从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素\n- 直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； \n```\n<div id=\"div\"><span>aa</span></div>\n<script>\nvar div = document.getElementById('div');\n\n//<div id=\"div\">aaa</div>\ndiv.innerHTML = \"aaa\"\n\n//<div id=\"div\"><span>aa</span>aaa</div>\ndiv.innerHTML += \"aaa\"\n</script>\n```\n- 11.在写left，width等样式时，一定注意加单位\n- 可以给元素设置它本身不具备的属性，这个叫自定义属性。\n- 自定义属性：\n- 1.对象本身不具备的属性（不是标准中规定的属性，而是我们自己设置的）\n- 2.索引中：在实践中，需要知道当前元素是一组元素中第几个的时候，需要使用索引值。\n\n### if语句\n- 扩展：\n- 字符串：引号包起来的一串自负\n- 布尔值：true 和 false\n- 运算符：\n- 1.“+”：\n1. 如果加号左右两边是数字，执行加法运算。\n2. 如果一遍是字符串，执行字符串链接。\n\n- 2.执行数字运算：“*,/,-,%,--,-=,++,+=”\n- 3.逻辑运算符，返回的结果是布尔值：>,==,<,>=,<=,!=;\n- 4.!非（否） 布尔值中取反\n- 语法:\n> 同一个位置，需要两种或两种以上的执行结果，用判断。\n\n```\nif(布尔值){\n\n}\n\nif(布尔值) {//布尔值为true执行if，为false接着向下执行\n\n}else if(布尔值) {\n\n}\n\nif(布尔值) {\n\n} else if(布尔值) {\n\n} else {\n\n}\n```\n\n### for循环：\n>当我们需要同时操作一组元素，或者一组数据的时候需要用到循环。\n1. 初始值：var i = 0;\n2. 判断条件：i < li.length;\n3. 执行语句：执行里面面的操作;\n4. 自增：i++;\n\n执行顺序：1，2，3，4\n\nfor(初始值;判断条件;自增){\n//执行语句\n}\n\n### 数组：\n- 用来存储一组数据\n- 格式[data1,data2,data3]\n- 每一个数据之间用，隔开\n- 一组数据不能直接操作，要操作一位需要使用下标。\n- 需要使用下标\n- 可以从数组length获取到数组中存储多少位数据。\n\n\n### this：\n1. 事件函数中\n2. this指向，触发当前事件的元素\n3. 目前的非事件函数，this指向window\n\n\n### 思路：\n1. 定点清除\n- 1.先清楚选中的元素的样式。\n- 2.给当前的元素加上选中样式。\n- 3.定义个变量记录之前选中的元素和当前选中的元素。\n2. 自定义属性\n3. 大清洗\n- 1.先清除所有元素的选中样式\n- 2.给当前的加上选中样式\n","source":"_posts/javascript-七.md","raw":"---\ntitle: javascript(七)\ndate: 2019-03-21 16:43:52\ntags:\ncategories: JavaScript\n---\n## 第一章复习\n### 1.获取元素的方法\n- 获取单个元素：\n- document.getElementById('idName');//只能从document获取\n- document.querySelector('cssSelector');//可以从父级获取\n- 获取一组元素//都可以从父级获取\n- document.querySelectorAll('cssSelector');\n- document.getElementsByTagName('tagName');\n- document.getElementsByClassName('className');\n- query和get方法的区别：\n- query方法只会在声明的时候，获取一次。\n- get方法每次使用的时候，都会获取一次。\n<!-- more -->\n\n### 2.事件\n- onload：加载完成之后（只有window、body能加onload事件）\n- onclick：点击事件\n- onmonuseover 鼠标移入\n- onmouseout 鼠标移除\n\n### 3.变量\n- 用来存储数据的一种方式（存值、存址）。\n- 变量声明：var 变量名 = 要存储的具体数据\n- 规则：在那个函数中声明的变量，就职能在这个函数中使用。\n\n### 4.变量命名\n1. 可以使用字母、数字、$、_。\n2. 变量名不能以数字开头\n3. 驼峰命名：从第二个单词开始首字母大写\n4. 常量命名：字母全部大些，每个单词中间用“_”隔开\n5. 注意关键字和保留字不能用于变量名\n\n### 5.函数\n- 匿名函数：没有名字的函数function(){};\n- 有名字的函数：\n函数声明：function name(){ //执行语句 }\n- 函数调用：\n- 事件调用：\n- el.onclick = name;\n- el.onclick = function(){}\n- 直接调用\n- name();\n\n### 6.属性操作\n- 属性的读操作\n- 属性读操作(获取属性值):obj.属性名\n- 属性写操作(获取修改属性值):obj.属性名 = 属性值；\n- 注意问题：\n- 1.clsss不叫class，叫className\n```\ndocument.getElementById('div').className;\n```\n- 2.style 操作的是元素的行间样式\n```\n<div id=\"div\" style=\"border:#f00 1px solid;\"><div>\n<script>\ndocument.getElementById('div').style;\n</script>\n```\n- 3.获取src的时候获取到的是绝对路径\n- 4.获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式\n- eg:只设置了一个background:color。\n```\n<div id=\"div\" style=\"background:blue\"></div>\n<script>\n/*\n*火狐得到的是:blue none repeat scroll 0% 0%;\n*谷歌得到的是：blue\n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 5.设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色\n- eg:background:#f60,得到的是rgb(255, 102, 0)\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\n/*\n* 得到的是rgb(255, 102, 0) \n*/\ndocument.getElementById('div').style.background;\n</script>\n\n```\n- 6.遇到“-”，删除“-”，首字母大写\n- eg:background-color  => backgroundColor\n```\n<div id=\"div\" style=\"background:#f60\"></div>\n<script>\ndocument.getElementById('div').style.backgroundColor;\n</script>\n\n```\n- 7.把等号右侧的值赋给左侧\n```\nvar sum = 100;\n```\n- 8.cssText获取**style**中所有的内容\n- 直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style=\"color:#f00;\"\ndiv.cssText = \"color:#f00;\"\n//这个时候style=\"background:#f60;color:#f00;\"\ndiv.cssText +=\"color:#f00;\"\n</script>\n\n```\n- 9.cssText = \"\" 可以直接清空所有的行间样式。\n```\n<div id=\"div\" style=\"background:#f60;\"></div>\n<script>\nvar div = document.getElementById('div');\n//这个时候style被清空\ndiv.cssText = \"\"\n</script>\n```\n\n- 10.innerHTML 代表元素中的所有内容\n- 从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素\n- 直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； \n```\n<div id=\"div\"><span>aa</span></div>\n<script>\nvar div = document.getElementById('div');\n\n//<div id=\"div\">aaa</div>\ndiv.innerHTML = \"aaa\"\n\n//<div id=\"div\"><span>aa</span>aaa</div>\ndiv.innerHTML += \"aaa\"\n</script>\n```\n- 11.在写left，width等样式时，一定注意加单位\n- 可以给元素设置它本身不具备的属性，这个叫自定义属性。\n- 自定义属性：\n- 1.对象本身不具备的属性（不是标准中规定的属性，而是我们自己设置的）\n- 2.索引中：在实践中，需要知道当前元素是一组元素中第几个的时候，需要使用索引值。\n\n### if语句\n- 扩展：\n- 字符串：引号包起来的一串自负\n- 布尔值：true 和 false\n- 运算符：\n- 1.“+”：\n1. 如果加号左右两边是数字，执行加法运算。\n2. 如果一遍是字符串，执行字符串链接。\n\n- 2.执行数字运算：“*,/,-,%,--,-=,++,+=”\n- 3.逻辑运算符，返回的结果是布尔值：>,==,<,>=,<=,!=;\n- 4.!非（否） 布尔值中取反\n- 语法:\n> 同一个位置，需要两种或两种以上的执行结果，用判断。\n\n```\nif(布尔值){\n\n}\n\nif(布尔值) {//布尔值为true执行if，为false接着向下执行\n\n}else if(布尔值) {\n\n}\n\nif(布尔值) {\n\n} else if(布尔值) {\n\n} else {\n\n}\n```\n\n### for循环：\n>当我们需要同时操作一组元素，或者一组数据的时候需要用到循环。\n1. 初始值：var i = 0;\n2. 判断条件：i < li.length;\n3. 执行语句：执行里面面的操作;\n4. 自增：i++;\n\n执行顺序：1，2，3，4\n\nfor(初始值;判断条件;自增){\n//执行语句\n}\n\n### 数组：\n- 用来存储一组数据\n- 格式[data1,data2,data3]\n- 每一个数据之间用，隔开\n- 一组数据不能直接操作，要操作一位需要使用下标。\n- 需要使用下标\n- 可以从数组length获取到数组中存储多少位数据。\n\n\n### this：\n1. 事件函数中\n2. this指向，触发当前事件的元素\n3. 目前的非事件函数，this指向window\n\n\n### 思路：\n1. 定点清除\n- 1.先清楚选中的元素的样式。\n- 2.给当前的元素加上选中样式。\n- 3.定义个变量记录之前选中的元素和当前选中的元素。\n2. 自定义属性\n3. 大清洗\n- 1.先清除所有元素的选中样式\n- 2.给当前的加上选中样式\n","slug":"javascript-七","published":1,"updated":"2019-05-28T09:55:39.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfym80007fw04hx7cra6v","content":"<h2 id=\"第一章复习\"><a href=\"#第一章复习\" class=\"headerlink\" title=\"第一章复习\"></a>第一章复习</h2><h3 id=\"1-获取元素的方法\"><a href=\"#1-获取元素的方法\" class=\"headerlink\" title=\"1.获取元素的方法\"></a>1.获取元素的方法</h3><ul>\n<li>获取单个元素：</li>\n<li>document.getElementById(‘idName’);//只能从document获取</li>\n<li>document.querySelector(‘cssSelector’);//可以从父级获取</li>\n<li>获取一组元素//都可以从父级获取</li>\n<li>document.querySelectorAll(‘cssSelector’);</li>\n<li>document.getElementsByTagName(‘tagName’);</li>\n<li>document.getElementsByClassName(‘className’);</li>\n<li>query和get方法的区别：</li>\n<li>query方法只会在声明的时候，获取一次。</li>\n<li>get方法每次使用的时候，都会获取一次。<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"2-事件\"><a href=\"#2-事件\" class=\"headerlink\" title=\"2.事件\"></a>2.事件</h3><ul>\n<li>onload：加载完成之后（只有window、body能加onload事件）</li>\n<li>onclick：点击事件</li>\n<li>onmonuseover 鼠标移入</li>\n<li>onmouseout 鼠标移除</li>\n</ul>\n<h3 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h3><ul>\n<li>用来存储数据的一种方式（存值、存址）。</li>\n<li>变量声明：var 变量名 = 要存储的具体数据</li>\n<li>规则：在那个函数中声明的变量，就职能在这个函数中使用。</li>\n</ul>\n<h3 id=\"4-变量命名\"><a href=\"#4-变量命名\" class=\"headerlink\" title=\"4.变量命名\"></a>4.变量命名</h3><ol>\n<li>可以使用字母、数字、$、_。</li>\n<li>变量名不能以数字开头</li>\n<li>驼峰命名：从第二个单词开始首字母大写</li>\n<li>常量命名：字母全部大些，每个单词中间用“_”隔开</li>\n<li>注意关键字和保留字不能用于变量名</li>\n</ol>\n<h3 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h3><ul>\n<li>匿名函数：没有名字的函数function(){};</li>\n<li>有名字的函数：<br>函数声明：function name(){ //执行语句 }</li>\n<li>函数调用：</li>\n<li>事件调用：</li>\n<li>el.onclick = name;</li>\n<li>el.onclick = function(){}</li>\n<li>直接调用</li>\n<li>name();</li>\n</ul>\n<h3 id=\"6-属性操作\"><a href=\"#6-属性操作\" class=\"headerlink\" title=\"6.属性操作\"></a>6.属性操作</h3><ul>\n<li>属性的读操作</li>\n<li>属性读操作(获取属性值):obj.属性名</li>\n<li>属性写操作(获取修改属性值):obj.属性名 = 属性值；</li>\n<li>注意问题：</li>\n<li><p>1.clsss不叫class，叫className</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;div&apos;).className;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.style 操作的是元素的行间样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.获取src的时候获取到的是绝对路径</p>\n</li>\n<li>4.获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</li>\n<li><p>eg:只设置了一个background:color。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*火狐得到的是:blue none repeat scroll 0% 0%;</span><br><span class=\"line\">*谷歌得到的是：blue</span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>\n</li>\n<li><p>eg:background:#f60,得到的是rgb(255, 102, 0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">* 得到的是rgb(255, 102, 0) </span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.遇到“-”，删除“-”，首字母大写</p>\n</li>\n<li><p>eg:background-color  =&gt; backgroundColor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.backgroundColor;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>7.把等号右侧的值赋给左侧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = 100;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>8.cssText获取<strong>style</strong>中所有的内容</p>\n</li>\n<li><p>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style=&quot;color:#f00;&quot;</span><br><span class=\"line\">div.cssText = &quot;color:#f00;&quot;</span><br><span class=\"line\">//这个时候style=&quot;background:#f60;color:#f00;&quot;</span><br><span class=\"line\">div.cssText +=&quot;color:#f00;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>9.cssText = “” 可以直接清空所有的行间样式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style被清空</span><br><span class=\"line\">div.cssText = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>10.innerHTML 代表元素中的所有内容</p>\n</li>\n<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>\n<li><p>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML = &quot;aaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML += &quot;aaa&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>11.在写left，width等样式时，一定注意加单位</p>\n</li>\n<li>可以给元素设置它本身不具备的属性，这个叫自定义属性。</li>\n<li>自定义属性：</li>\n<li>1.对象本身不具备的属性（不是标准中规定的属性，而是我们自己设置的）</li>\n<li>2.索引中：在实践中，需要知道当前元素是一组元素中第几个的时候，需要使用索引值。</li>\n</ul>\n<h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><ul>\n<li>扩展：</li>\n<li>字符串：引号包起来的一串自负</li>\n<li>布尔值：true 和 false</li>\n<li>运算符：</li>\n<li>1.“+”：</li>\n</ul>\n<ol>\n<li>如果加号左右两边是数字，执行加法运算。</li>\n<li>如果一遍是字符串，执行字符串链接。</li>\n</ol>\n<ul>\n<li>2.执行数字运算：“*,/,-,%,–,-=,++,+=”</li>\n<li>3.逻辑运算符，返回的结果是布尔值：&gt;,==,&lt;,&gt;=,&lt;=,!=;</li>\n<li>4.!非（否） 布尔值中取反</li>\n<li>语法:<blockquote>\n<p>同一个位置，需要两种或两种以上的执行结果，用判断。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(布尔值)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(布尔值) &#123;//布尔值为true执行if，为false接着向下执行</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环：\"><a href=\"#for循环：\" class=\"headerlink\" title=\"for循环：\"></a>for循环：</h3><blockquote>\n<p>当我们需要同时操作一组元素，或者一组数据的时候需要用到循环。</p>\n<ol>\n<li>初始值：var i = 0;</li>\n<li>判断条件：i &lt; li.length;</li>\n<li>执行语句：执行里面面的操作;</li>\n<li>自增：i++;</li>\n</ol>\n</blockquote>\n<p>执行顺序：1，2，3，4</p>\n<p>for(初始值;判断条件;自增){<br>//执行语句<br>}</p>\n<h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><ul>\n<li>用来存储一组数据</li>\n<li>格式[data1,data2,data3]</li>\n<li>每一个数据之间用，隔开</li>\n<li>一组数据不能直接操作，要操作一位需要使用下标。</li>\n<li>需要使用下标</li>\n<li>可以从数组length获取到数组中存储多少位数据。</li>\n</ul>\n<h3 id=\"this：\"><a href=\"#this：\" class=\"headerlink\" title=\"this：\"></a>this：</h3><ol>\n<li>事件函数中</li>\n<li>this指向，触发当前事件的元素</li>\n<li>目前的非事件函数，this指向window</li>\n</ol>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>定点清除</li>\n</ol>\n<ul>\n<li>1.先清楚选中的元素的样式。</li>\n<li>2.给当前的元素加上选中样式。</li>\n<li>3.定义个变量记录之前选中的元素和当前选中的元素。</li>\n</ul>\n<ol start=\"2\">\n<li>自定义属性</li>\n<li>大清洗</li>\n</ol>\n<ul>\n<li>1.先清除所有元素的选中样式</li>\n<li>2.给当前的加上选中样式</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一章复习\"><a href=\"#第一章复习\" class=\"headerlink\" title=\"第一章复习\"></a>第一章复习</h2><h3 id=\"1-获取元素的方法\"><a href=\"#1-获取元素的方法\" class=\"headerlink\" title=\"1.获取元素的方法\"></a>1.获取元素的方法</h3><ul>\n<li>获取单个元素：</li>\n<li>document.getElementById(‘idName’);//只能从document获取</li>\n<li>document.querySelector(‘cssSelector’);//可以从父级获取</li>\n<li>获取一组元素//都可以从父级获取</li>\n<li>document.querySelectorAll(‘cssSelector’);</li>\n<li>document.getElementsByTagName(‘tagName’);</li>\n<li>document.getElementsByClassName(‘className’);</li>\n<li>query和get方法的区别：</li>\n<li>query方法只会在声明的时候，获取一次。</li>\n<li>get方法每次使用的时候，都会获取一次。","more":"</li>\n</ul>\n<h3 id=\"2-事件\"><a href=\"#2-事件\" class=\"headerlink\" title=\"2.事件\"></a>2.事件</h3><ul>\n<li>onload：加载完成之后（只有window、body能加onload事件）</li>\n<li>onclick：点击事件</li>\n<li>onmonuseover 鼠标移入</li>\n<li>onmouseout 鼠标移除</li>\n</ul>\n<h3 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h3><ul>\n<li>用来存储数据的一种方式（存值、存址）。</li>\n<li>变量声明：var 变量名 = 要存储的具体数据</li>\n<li>规则：在那个函数中声明的变量，就职能在这个函数中使用。</li>\n</ul>\n<h3 id=\"4-变量命名\"><a href=\"#4-变量命名\" class=\"headerlink\" title=\"4.变量命名\"></a>4.变量命名</h3><ol>\n<li>可以使用字母、数字、$、_。</li>\n<li>变量名不能以数字开头</li>\n<li>驼峰命名：从第二个单词开始首字母大写</li>\n<li>常量命名：字母全部大些，每个单词中间用“_”隔开</li>\n<li>注意关键字和保留字不能用于变量名</li>\n</ol>\n<h3 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5.函数\"></a>5.函数</h3><ul>\n<li>匿名函数：没有名字的函数function(){};</li>\n<li>有名字的函数：<br>函数声明：function name(){ //执行语句 }</li>\n<li>函数调用：</li>\n<li>事件调用：</li>\n<li>el.onclick = name;</li>\n<li>el.onclick = function(){}</li>\n<li>直接调用</li>\n<li>name();</li>\n</ul>\n<h3 id=\"6-属性操作\"><a href=\"#6-属性操作\" class=\"headerlink\" title=\"6.属性操作\"></a>6.属性操作</h3><ul>\n<li>属性的读操作</li>\n<li>属性读操作(获取属性值):obj.属性名</li>\n<li>属性写操作(获取修改属性值):obj.属性名 = 属性值；</li>\n<li>注意问题：</li>\n<li><p>1.clsss不叫class，叫className</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;div&apos;).className;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.style 操作的是元素的行间样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;border:#f00 1px solid;&quot;&gt;&lt;div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.获取src的时候获取到的是绝对路径</p>\n</li>\n<li>4.获取background这类符合样式的时候，火狐（firefox）下可以获取到符合样式中的所有样式而谷歌（chrom）下获取到的只是我们写了的样式</li>\n<li><p>eg:只设置了一个background:color。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:blue&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*火狐得到的是:blue none repeat scroll 0% 0%;</span><br><span class=\"line\">*谷歌得到的是：blue</span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.设置了十六进制颜色，但是获取的时候，获取到的是rgb颜色</p>\n</li>\n<li><p>eg:background:#f60,得到的是rgb(255, 102, 0)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">* 得到的是rgb(255, 102, 0) </span><br><span class=\"line\">*/</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.background;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.遇到“-”，删除“-”，首字母大写</p>\n</li>\n<li><p>eg:background-color  =&gt; backgroundColor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&apos;div&apos;).style.backgroundColor;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>7.把等号右侧的值赋给左侧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = 100;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>8.cssText获取<strong>style</strong>中所有的内容</p>\n</li>\n<li><p>直接修改cssText会覆盖style中的所有内容，如果不想覆盖之前的所有内容，可以直接写style，或者用+=；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style=&quot;color:#f00;&quot;</span><br><span class=\"line\">div.cssText = &quot;color:#f00;&quot;</span><br><span class=\"line\">//这个时候style=&quot;background:#f60;color:#f00;&quot;</span><br><span class=\"line\">div.cssText +=&quot;color:#f00;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>9.cssText = “” 可以直接清空所有的行间样式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot; style=&quot;background:#f60;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\">//这个时候style被清空</span><br><span class=\"line\">div.cssText = &quot;&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>10.innerHTML 代表元素中的所有内容</p>\n</li>\n<li>从元素的开标签到闭合标签之间的所有内容，包括元素中的子元素</li>\n<li><p>直接设置元素的innerHTML,或者替换掉之前的所有内容，如果不想替换只是添加内容用+=； </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var div = document.getElementById(&apos;div&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML = &quot;aaa&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;div id=&quot;div&quot;&gt;&lt;span&gt;aa&lt;/span&gt;aaa&lt;/div&gt;</span><br><span class=\"line\">div.innerHTML += &quot;aaa&quot;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>11.在写left，width等样式时，一定注意加单位</p>\n</li>\n<li>可以给元素设置它本身不具备的属性，这个叫自定义属性。</li>\n<li>自定义属性：</li>\n<li>1.对象本身不具备的属性（不是标准中规定的属性，而是我们自己设置的）</li>\n<li>2.索引中：在实践中，需要知道当前元素是一组元素中第几个的时候，需要使用索引值。</li>\n</ul>\n<h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><ul>\n<li>扩展：</li>\n<li>字符串：引号包起来的一串自负</li>\n<li>布尔值：true 和 false</li>\n<li>运算符：</li>\n<li>1.“+”：</li>\n</ul>\n<ol>\n<li>如果加号左右两边是数字，执行加法运算。</li>\n<li>如果一遍是字符串，执行字符串链接。</li>\n</ol>\n<ul>\n<li>2.执行数字运算：“*,/,-,%,–,-=,++,+=”</li>\n<li>3.逻辑运算符，返回的结果是布尔值：&gt;,==,&lt;,&gt;=,&lt;=,!=;</li>\n<li>4.!非（否） 布尔值中取反</li>\n<li>语法:<blockquote>\n<p>同一个位置，需要两种或两种以上的执行结果，用判断。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(布尔值)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(布尔值) &#123;//布尔值为true执行if，为false接着向下执行</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else if(布尔值) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for循环：\"><a href=\"#for循环：\" class=\"headerlink\" title=\"for循环：\"></a>for循环：</h3><blockquote>\n<p>当我们需要同时操作一组元素，或者一组数据的时候需要用到循环。</p>\n<ol>\n<li>初始值：var i = 0;</li>\n<li>判断条件：i &lt; li.length;</li>\n<li>执行语句：执行里面面的操作;</li>\n<li>自增：i++;</li>\n</ol>\n</blockquote>\n<p>执行顺序：1，2，3，4</p>\n<p>for(初始值;判断条件;自增){<br>//执行语句<br>}</p>\n<h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><ul>\n<li>用来存储一组数据</li>\n<li>格式[data1,data2,data3]</li>\n<li>每一个数据之间用，隔开</li>\n<li>一组数据不能直接操作，要操作一位需要使用下标。</li>\n<li>需要使用下标</li>\n<li>可以从数组length获取到数组中存储多少位数据。</li>\n</ul>\n<h3 id=\"this：\"><a href=\"#this：\" class=\"headerlink\" title=\"this：\"></a>this：</h3><ol>\n<li>事件函数中</li>\n<li>this指向，触发当前事件的元素</li>\n<li>目前的非事件函数，this指向window</li>\n</ol>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>定点清除</li>\n</ol>\n<ul>\n<li>1.先清楚选中的元素的样式。</li>\n<li>2.给当前的元素加上选中样式。</li>\n<li>3.定义个变量记录之前选中的元素和当前选中的元素。</li>\n</ul>\n<ol start=\"2\">\n<li>自定义属性</li>\n<li>大清洗</li>\n</ol>\n<ul>\n<li>1.先清除所有元素的选中样式</li>\n<li>2.给当前的加上选中样式</li>\n</ul>"},{"title":"iOS面试题整理","date":"2018-09-27T09:33:20.000Z","_content":"面试 iOS 开发时，切入点很重要，不同的切入点会导致不同的结果，没有找到合适的切入点也无法对应聘者有一个全面的了解。所以这份面试问题列表更多的是提供方向，没有固定的答案，而且可以根据应聘者的回应引出更多有意思深层次的讨论。\n<!-- more -->\n\n如果有不错的问题，欢迎联系追加\n\n## 一般性问题\n* int和NSInteger有什么区别？\n```\n首先：在c语言中，int和long的字节数是和操作系统指针所占位数相等；但c语言中说，long的长度永远大于或等于int；objective-c里，苹果的官方文档中总是推荐用NSInteger；\n区别：原来在苹果的api实现中，NSInteger是一个封装，它会识别当前操作系统的位数，自动返回最大的类型。\n总结：NSInteger与int的区别是NSInteger会根据系统的位数（32or64）自动选择int的最大数值（int or long）还有就是他和NSString一样都可以是对象。\n```\n* 最近这两天你有学到什么知识/技能么？\n```\n这两天为了准备面试，整理了以前所做过的一些项目的笔记，回头看了看以前的工作日志。一来是整理一些在工作中经常遇到的坑，比如cell重用问题、最新机型的适配问题等；二来是回头告别过去的自己，在思想上、技术上迎来全新的自我；三来定位自己下一个目标：往架构师方向深入研究。\n```\n* 最近有做过比较酷或者比较有挑战的项目么？\n* 最近看过的书/文章有哪些？\n* 如何向一个只接触过互联网的孩子解释「电视」？\n* 为什么要学习编程，编程对你而言的乐趣在哪儿？\n* 如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？\n* 自身最大优点是什么，怎么证明？\n* 有没有在 GitHub 上发布过开源代码，参与过开源项目？\n* 你最近遇到过的一个技术挑战是什么？怎么解决的？\n* 开发常用的工具有哪些？\n* 熟悉 CocoaPods 么？能大概讲一下工作原理么？\n* 最常用的版本控制工具是什么，能大概讲讲原理么？\n* 今年你最想掌握的一门技术是什么？为什么？目前已经做到了哪个程度？\n* 你一般是怎么用 Instruments 的？\n* 你一般是如何调试 Bug 的？\n* 你在你的项目中用到了哪些设计模式？\n* 如何实现单例，单例会有什么弊端？\n* iOS 是如何管理内存的？\n\n## 知识性问题\n* 什么是响应链，它是怎么工作的？\n* 如何访问并修改一个类的私有属性？\n* iOS Extension 是什么？能列举几个常用的 Extension 么？\n* 如何把一个包含自定义对象的数组序列化到磁盘？\n* Apple Pay 是什么？它的大概工作流程是怎样的？\n* iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？\n* iOS 的签名机制大概是怎样的？\n* iOS 7的多任务添加了哪两个新的 API? 各自的使用场景是什么？\n* Objective-C 的 `class` 是如何实现的？`Selector` 是如何被转化为 C 语言的函数调用的？\n* `UIScrollView` 大概是如何实现的，它是如何捕捉、响应手势的？\n* Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？\n* `+load` 和 `+initialize` 的区别是什么？\n* 如何让 Category 支持属性？\n* `NSOperation` 相比于 GCD 有哪些优势？\n* `strong` / `weak` / `unsafe_unretained` 的区别？\n* 如何为 Class 定义一个对外只读对内可读写的属性?\n* Objective-C 中，meta-class 指的是什么？\n* `UIView` 和 `CALayer` 之间的关系？\n* `+[UIView animateWithDuration:animations:completion:]` 内部大概是如何实现的？\n* 什么时候会发生「隐式动画」？\n* 如何处理异步的网络请求？\n* `frame` 和 `bounds` 的区别是什么？\n* 如何把一张大图缩小为1/4大小的缩略图？\n* 一个 App 会处于哪些状态？\n* Push Notification 是如何工作的？\n* 什么是 Runloop？\n* Toll-Free Bridging 是什么？什么情况下会使用？\n* 当系统出现内存警告时会发生什么？\n* 什么是 `Protocol`，Delegate 一般是怎么用的？\n* autorelease 对象在什么情况下会被释放？\n* UIWebView 有哪些性能问题？有没有可替代的方案。\n* 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?\n* 当 `TableView` 的 `Cell` 改变时，如何让这些改变以动画的形式呈现？\n* 什么是 `Method Swizzle`，什么情况下会使用？\n\n## 经验类问题\n* 为什么 `UIScrollView` 的滚动会导致 `NSTimer` 失效？\n* 为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？\n* 你会如何存储用户的一些敏感信息，如登录的 token。\n* 有用过一些开源组件吧，能简单说几个么，大概说说它们的使用场景实现。\n* 什么时候会发生 `EXC BAD ACCESS` 异常？\n* 什么时候会使用 Core Graphics，有什么注意事项么？\n* NSNotification 和 KVO 的使用场景？\n* 使用 Block 时需要注意哪些问题？\n* `performSelector:withObject:afterDelay:` 内部大概是怎么实现的，有什么注意事项么？\n* 如何播放 GIF 图片，有什么优化方案么？\n* 使用 `NSUserDefaults` 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)\n* 有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？\n* 哪些途径可以让 ViewController 瘦下来？\n* 有哪些常见的 Crash 场景？\n\n## 综合类问题\n* 设计一个可以无限滚动并且支持自动滚动的 SlideShow。\n* 设计一个进度条。\n* 设计一套大文件（如上百M的视频）下载方案。\n* 如果让你来实现 `dispatch_once`，你会怎么做？\n* 设计一个类似 iOS 主屏可以下拉出现 Spotlight 的系统。(对 UIScrollView 的理解程度)\n\n## 编程实现\n* 简述[「Snakes and Ladders」](https://www.jianshu.com/p/2e1b3f54b4f3)的实现思路(这道题比较容易阐述清楚，且难度适中)\n\n## 参考\n\n* http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/\n* https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html\n* https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions\n\n","source":"_posts/iOS面试题整理.md","raw":"---\ntitle: iOS面试题整理\ndate: 2018-09-27 17:33:20\ntags:\ncategories: iOS\n---\n面试 iOS 开发时，切入点很重要，不同的切入点会导致不同的结果，没有找到合适的切入点也无法对应聘者有一个全面的了解。所以这份面试问题列表更多的是提供方向，没有固定的答案，而且可以根据应聘者的回应引出更多有意思深层次的讨论。\n<!-- more -->\n\n如果有不错的问题，欢迎联系追加\n\n## 一般性问题\n* int和NSInteger有什么区别？\n```\n首先：在c语言中，int和long的字节数是和操作系统指针所占位数相等；但c语言中说，long的长度永远大于或等于int；objective-c里，苹果的官方文档中总是推荐用NSInteger；\n区别：原来在苹果的api实现中，NSInteger是一个封装，它会识别当前操作系统的位数，自动返回最大的类型。\n总结：NSInteger与int的区别是NSInteger会根据系统的位数（32or64）自动选择int的最大数值（int or long）还有就是他和NSString一样都可以是对象。\n```\n* 最近这两天你有学到什么知识/技能么？\n```\n这两天为了准备面试，整理了以前所做过的一些项目的笔记，回头看了看以前的工作日志。一来是整理一些在工作中经常遇到的坑，比如cell重用问题、最新机型的适配问题等；二来是回头告别过去的自己，在思想上、技术上迎来全新的自我；三来定位自己下一个目标：往架构师方向深入研究。\n```\n* 最近有做过比较酷或者比较有挑战的项目么？\n* 最近看过的书/文章有哪些？\n* 如何向一个只接触过互联网的孩子解释「电视」？\n* 为什么要学习编程，编程对你而言的乐趣在哪儿？\n* 如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？\n* 自身最大优点是什么，怎么证明？\n* 有没有在 GitHub 上发布过开源代码，参与过开源项目？\n* 你最近遇到过的一个技术挑战是什么？怎么解决的？\n* 开发常用的工具有哪些？\n* 熟悉 CocoaPods 么？能大概讲一下工作原理么？\n* 最常用的版本控制工具是什么，能大概讲讲原理么？\n* 今年你最想掌握的一门技术是什么？为什么？目前已经做到了哪个程度？\n* 你一般是怎么用 Instruments 的？\n* 你一般是如何调试 Bug 的？\n* 你在你的项目中用到了哪些设计模式？\n* 如何实现单例，单例会有什么弊端？\n* iOS 是如何管理内存的？\n\n## 知识性问题\n* 什么是响应链，它是怎么工作的？\n* 如何访问并修改一个类的私有属性？\n* iOS Extension 是什么？能列举几个常用的 Extension 么？\n* 如何把一个包含自定义对象的数组序列化到磁盘？\n* Apple Pay 是什么？它的大概工作流程是怎样的？\n* iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？\n* iOS 的签名机制大概是怎样的？\n* iOS 7的多任务添加了哪两个新的 API? 各自的使用场景是什么？\n* Objective-C 的 `class` 是如何实现的？`Selector` 是如何被转化为 C 语言的函数调用的？\n* `UIScrollView` 大概是如何实现的，它是如何捕捉、响应手势的？\n* Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？\n* `+load` 和 `+initialize` 的区别是什么？\n* 如何让 Category 支持属性？\n* `NSOperation` 相比于 GCD 有哪些优势？\n* `strong` / `weak` / `unsafe_unretained` 的区别？\n* 如何为 Class 定义一个对外只读对内可读写的属性?\n* Objective-C 中，meta-class 指的是什么？\n* `UIView` 和 `CALayer` 之间的关系？\n* `+[UIView animateWithDuration:animations:completion:]` 内部大概是如何实现的？\n* 什么时候会发生「隐式动画」？\n* 如何处理异步的网络请求？\n* `frame` 和 `bounds` 的区别是什么？\n* 如何把一张大图缩小为1/4大小的缩略图？\n* 一个 App 会处于哪些状态？\n* Push Notification 是如何工作的？\n* 什么是 Runloop？\n* Toll-Free Bridging 是什么？什么情况下会使用？\n* 当系统出现内存警告时会发生什么？\n* 什么是 `Protocol`，Delegate 一般是怎么用的？\n* autorelease 对象在什么情况下会被释放？\n* UIWebView 有哪些性能问题？有没有可替代的方案。\n* 为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?\n* 当 `TableView` 的 `Cell` 改变时，如何让这些改变以动画的形式呈现？\n* 什么是 `Method Swizzle`，什么情况下会使用？\n\n## 经验类问题\n* 为什么 `UIScrollView` 的滚动会导致 `NSTimer` 失效？\n* 为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？\n* 你会如何存储用户的一些敏感信息，如登录的 token。\n* 有用过一些开源组件吧，能简单说几个么，大概说说它们的使用场景实现。\n* 什么时候会发生 `EXC BAD ACCESS` 异常？\n* 什么时候会使用 Core Graphics，有什么注意事项么？\n* NSNotification 和 KVO 的使用场景？\n* 使用 Block 时需要注意哪些问题？\n* `performSelector:withObject:afterDelay:` 内部大概是怎么实现的，有什么注意事项么？\n* 如何播放 GIF 图片，有什么优化方案么？\n* 使用 `NSUserDefaults` 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)\n* 有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？\n* 哪些途径可以让 ViewController 瘦下来？\n* 有哪些常见的 Crash 场景？\n\n## 综合类问题\n* 设计一个可以无限滚动并且支持自动滚动的 SlideShow。\n* 设计一个进度条。\n* 设计一套大文件（如上百M的视频）下载方案。\n* 如果让你来实现 `dispatch_once`，你会怎么做？\n* 设计一个类似 iOS 主屏可以下拉出现 Spotlight 的系统。(对 UIScrollView 的理解程度)\n\n## 编程实现\n* 简述[「Snakes and Ladders」](https://www.jianshu.com/p/2e1b3f54b4f3)的实现思路(这道题比较容易阐述清楚，且难度适中)\n\n## 参考\n\n* http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/\n* https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html\n* https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions\n\n","slug":"iOS面试题整理","published":1,"updated":"2019-05-30T23:59:22.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfym90009fw04hhqjf454","content":"<p>面试 iOS 开发时，切入点很重要，不同的切入点会导致不同的结果，没有找到合适的切入点也无法对应聘者有一个全面的了解。所以这份面试问题列表更多的是提供方向，没有固定的答案，而且可以根据应聘者的回应引出更多有意思深层次的讨论。<br><a id=\"more\"></a></p>\n<p>如果有不错的问题，欢迎联系追加</p>\n<h2 id=\"一般性问题\"><a href=\"#一般性问题\" class=\"headerlink\" title=\"一般性问题\"></a>一般性问题</h2><ul>\n<li><p>int和NSInteger有什么区别？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先：在c语言中，int和long的字节数是和操作系统指针所占位数相等；但c语言中说，long的长度永远大于或等于int；objective-c里，苹果的官方文档中总是推荐用NSInteger；</span><br><span class=\"line\">区别：原来在苹果的api实现中，NSInteger是一个封装，它会识别当前操作系统的位数，自动返回最大的类型。</span><br><span class=\"line\">总结：NSInteger与int的区别是NSInteger会根据系统的位数（32or64）自动选择int的最大数值（int or long）还有就是他和NSString一样都可以是对象。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最近这两天你有学到什么知识/技能么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两天为了准备面试，整理了以前所做过的一些项目的笔记，回头看了看以前的工作日志。一来是整理一些在工作中经常遇到的坑，比如cell重用问题、最新机型的适配问题等；二来是回头告别过去的自己，在思想上、技术上迎来全新的自我；三来定位自己下一个目标：往架构师方向深入研究。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最近有做过比较酷或者比较有挑战的项目么？</p>\n</li>\n<li>最近看过的书/文章有哪些？</li>\n<li>如何向一个只接触过互联网的孩子解释「电视」？</li>\n<li>为什么要学习编程，编程对你而言的乐趣在哪儿？</li>\n<li>如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？</li>\n<li>自身最大优点是什么，怎么证明？</li>\n<li>有没有在 GitHub 上发布过开源代码，参与过开源项目？</li>\n<li>你最近遇到过的一个技术挑战是什么？怎么解决的？</li>\n<li>开发常用的工具有哪些？</li>\n<li>熟悉 CocoaPods 么？能大概讲一下工作原理么？</li>\n<li>最常用的版本控制工具是什么，能大概讲讲原理么？</li>\n<li>今年你最想掌握的一门技术是什么？为什么？目前已经做到了哪个程度？</li>\n<li>你一般是怎么用 Instruments 的？</li>\n<li>你一般是如何调试 Bug 的？</li>\n<li>你在你的项目中用到了哪些设计模式？</li>\n<li>如何实现单例，单例会有什么弊端？</li>\n<li>iOS 是如何管理内存的？</li>\n</ul>\n<h2 id=\"知识性问题\"><a href=\"#知识性问题\" class=\"headerlink\" title=\"知识性问题\"></a>知识性问题</h2><ul>\n<li>什么是响应链，它是怎么工作的？</li>\n<li>如何访问并修改一个类的私有属性？</li>\n<li>iOS Extension 是什么？能列举几个常用的 Extension 么？</li>\n<li>如何把一个包含自定义对象的数组序列化到磁盘？</li>\n<li>Apple Pay 是什么？它的大概工作流程是怎样的？</li>\n<li>iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>\n<li>iOS 的签名机制大概是怎样的？</li>\n<li>iOS 7的多任务添加了哪两个新的 API? 各自的使用场景是什么？</li>\n<li>Objective-C 的 <code>class</code> 是如何实现的？<code>Selector</code> 是如何被转化为 C 语言的函数调用的？</li>\n<li><code>UIScrollView</code> 大概是如何实现的，它是如何捕捉、响应手势的？</li>\n<li>Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？</li>\n<li><code>+load</code> 和 <code>+initialize</code> 的区别是什么？</li>\n<li>如何让 Category 支持属性？</li>\n<li><code>NSOperation</code> 相比于 GCD 有哪些优势？</li>\n<li><code>strong</code> / <code>weak</code> / <code>unsafe_unretained</code> 的区别？</li>\n<li>如何为 Class 定义一个对外只读对内可读写的属性?</li>\n<li>Objective-C 中，meta-class 指的是什么？</li>\n<li><code>UIView</code> 和 <code>CALayer</code> 之间的关系？</li>\n<li><code>+[UIView animateWithDuration:animations:completion:]</code> 内部大概是如何实现的？</li>\n<li>什么时候会发生「隐式动画」？</li>\n<li>如何处理异步的网络请求？</li>\n<li><code>frame</code> 和 <code>bounds</code> 的区别是什么？</li>\n<li>如何把一张大图缩小为1/4大小的缩略图？</li>\n<li>一个 App 会处于哪些状态？</li>\n<li>Push Notification 是如何工作的？</li>\n<li>什么是 Runloop？</li>\n<li>Toll-Free Bridging 是什么？什么情况下会使用？</li>\n<li>当系统出现内存警告时会发生什么？</li>\n<li>什么是 <code>Protocol</code>，Delegate 一般是怎么用的？</li>\n<li>autorelease 对象在什么情况下会被释放？</li>\n<li>UIWebView 有哪些性能问题？有没有可替代的方案。</li>\n<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?</li>\n<li>当 <code>TableView</code> 的 <code>Cell</code> 改变时，如何让这些改变以动画的形式呈现？</li>\n<li>什么是 <code>Method Swizzle</code>，什么情况下会使用？</li>\n</ul>\n<h2 id=\"经验类问题\"><a href=\"#经验类问题\" class=\"headerlink\" title=\"经验类问题\"></a>经验类问题</h2><ul>\n<li>为什么 <code>UIScrollView</code> 的滚动会导致 <code>NSTimer</code> 失效？</li>\n<li>为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？</li>\n<li>你会如何存储用户的一些敏感信息，如登录的 token。</li>\n<li>有用过一些开源组件吧，能简单说几个么，大概说说它们的使用场景实现。</li>\n<li>什么时候会发生 <code>EXC BAD ACCESS</code> 异常？</li>\n<li>什么时候会使用 Core Graphics，有什么注意事项么？</li>\n<li>NSNotification 和 KVO 的使用场景？</li>\n<li>使用 Block 时需要注意哪些问题？</li>\n<li><code>performSelector:withObject:afterDelay:</code> 内部大概是怎么实现的，有什么注意事项么？</li>\n<li>如何播放 GIF 图片，有什么优化方案么？</li>\n<li>使用 <code>NSUserDefaults</code> 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)</li>\n<li>有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？</li>\n<li>哪些途径可以让 ViewController 瘦下来？</li>\n<li>有哪些常见的 Crash 场景？</li>\n</ul>\n<h2 id=\"综合类问题\"><a href=\"#综合类问题\" class=\"headerlink\" title=\"综合类问题\"></a>综合类问题</h2><ul>\n<li>设计一个可以无限滚动并且支持自动滚动的 SlideShow。</li>\n<li>设计一个进度条。</li>\n<li>设计一套大文件（如上百M的视频）下载方案。</li>\n<li>如果让你来实现 <code>dispatch_once</code>，你会怎么做？</li>\n<li>设计一个类似 iOS 主屏可以下拉出现 Spotlight 的系统。(对 UIScrollView 的理解程度)</li>\n</ul>\n<h2 id=\"编程实现\"><a href=\"#编程实现\" class=\"headerlink\" title=\"编程实现\"></a>编程实现</h2><ul>\n<li>简述<a href=\"https://www.jianshu.com/p/2e1b3f54b4f3\" target=\"_blank\" rel=\"noopener\">「Snakes and Ladders」</a>的实现思路(这道题比较容易阐述清楚，且难度适中)</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/\" target=\"_blank\" rel=\"noopener\">http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/</a></li>\n<li><a href=\"https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html\" target=\"_blank\" rel=\"noopener\">https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html</a></li>\n<li><a href=\"https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions\" target=\"_blank\" rel=\"noopener\">https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>面试 iOS 开发时，切入点很重要，不同的切入点会导致不同的结果，没有找到合适的切入点也无法对应聘者有一个全面的了解。所以这份面试问题列表更多的是提供方向，没有固定的答案，而且可以根据应聘者的回应引出更多有意思深层次的讨论。<br>","more":"</p>\n<p>如果有不错的问题，欢迎联系追加</p>\n<h2 id=\"一般性问题\"><a href=\"#一般性问题\" class=\"headerlink\" title=\"一般性问题\"></a>一般性问题</h2><ul>\n<li><p>int和NSInteger有什么区别？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先：在c语言中，int和long的字节数是和操作系统指针所占位数相等；但c语言中说，long的长度永远大于或等于int；objective-c里，苹果的官方文档中总是推荐用NSInteger；</span><br><span class=\"line\">区别：原来在苹果的api实现中，NSInteger是一个封装，它会识别当前操作系统的位数，自动返回最大的类型。</span><br><span class=\"line\">总结：NSInteger与int的区别是NSInteger会根据系统的位数（32or64）自动选择int的最大数值（int or long）还有就是他和NSString一样都可以是对象。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最近这两天你有学到什么知识/技能么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两天为了准备面试，整理了以前所做过的一些项目的笔记，回头看了看以前的工作日志。一来是整理一些在工作中经常遇到的坑，比如cell重用问题、最新机型的适配问题等；二来是回头告别过去的自己，在思想上、技术上迎来全新的自我；三来定位自己下一个目标：往架构师方向深入研究。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最近有做过比较酷或者比较有挑战的项目么？</p>\n</li>\n<li>最近看过的书/文章有哪些？</li>\n<li>如何向一个只接触过互联网的孩子解释「电视」？</li>\n<li>为什么要学习编程，编程对你而言的乐趣在哪儿？</li>\n<li>如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？</li>\n<li>自身最大优点是什么，怎么证明？</li>\n<li>有没有在 GitHub 上发布过开源代码，参与过开源项目？</li>\n<li>你最近遇到过的一个技术挑战是什么？怎么解决的？</li>\n<li>开发常用的工具有哪些？</li>\n<li>熟悉 CocoaPods 么？能大概讲一下工作原理么？</li>\n<li>最常用的版本控制工具是什么，能大概讲讲原理么？</li>\n<li>今年你最想掌握的一门技术是什么？为什么？目前已经做到了哪个程度？</li>\n<li>你一般是怎么用 Instruments 的？</li>\n<li>你一般是如何调试 Bug 的？</li>\n<li>你在你的项目中用到了哪些设计模式？</li>\n<li>如何实现单例，单例会有什么弊端？</li>\n<li>iOS 是如何管理内存的？</li>\n</ul>\n<h2 id=\"知识性问题\"><a href=\"#知识性问题\" class=\"headerlink\" title=\"知识性问题\"></a>知识性问题</h2><ul>\n<li>什么是响应链，它是怎么工作的？</li>\n<li>如何访问并修改一个类的私有属性？</li>\n<li>iOS Extension 是什么？能列举几个常用的 Extension 么？</li>\n<li>如何把一个包含自定义对象的数组序列化到磁盘？</li>\n<li>Apple Pay 是什么？它的大概工作流程是怎样的？</li>\n<li>iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？</li>\n<li>iOS 的签名机制大概是怎样的？</li>\n<li>iOS 7的多任务添加了哪两个新的 API? 各自的使用场景是什么？</li>\n<li>Objective-C 的 <code>class</code> 是如何实现的？<code>Selector</code> 是如何被转化为 C 语言的函数调用的？</li>\n<li><code>UIScrollView</code> 大概是如何实现的，它是如何捕捉、响应手势的？</li>\n<li>Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？</li>\n<li><code>+load</code> 和 <code>+initialize</code> 的区别是什么？</li>\n<li>如何让 Category 支持属性？</li>\n<li><code>NSOperation</code> 相比于 GCD 有哪些优势？</li>\n<li><code>strong</code> / <code>weak</code> / <code>unsafe_unretained</code> 的区别？</li>\n<li>如何为 Class 定义一个对外只读对内可读写的属性?</li>\n<li>Objective-C 中，meta-class 指的是什么？</li>\n<li><code>UIView</code> 和 <code>CALayer</code> 之间的关系？</li>\n<li><code>+[UIView animateWithDuration:animations:completion:]</code> 内部大概是如何实现的？</li>\n<li>什么时候会发生「隐式动画」？</li>\n<li>如何处理异步的网络请求？</li>\n<li><code>frame</code> 和 <code>bounds</code> 的区别是什么？</li>\n<li>如何把一张大图缩小为1/4大小的缩略图？</li>\n<li>一个 App 会处于哪些状态？</li>\n<li>Push Notification 是如何工作的？</li>\n<li>什么是 Runloop？</li>\n<li>Toll-Free Bridging 是什么？什么情况下会使用？</li>\n<li>当系统出现内存警告时会发生什么？</li>\n<li>什么是 <code>Protocol</code>，Delegate 一般是怎么用的？</li>\n<li>autorelease 对象在什么情况下会被释放？</li>\n<li>UIWebView 有哪些性能问题？有没有可替代的方案。</li>\n<li>为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?</li>\n<li>当 <code>TableView</code> 的 <code>Cell</code> 改变时，如何让这些改变以动画的形式呈现？</li>\n<li>什么是 <code>Method Swizzle</code>，什么情况下会使用？</li>\n</ul>\n<h2 id=\"经验类问题\"><a href=\"#经验类问题\" class=\"headerlink\" title=\"经验类问题\"></a>经验类问题</h2><ul>\n<li>为什么 <code>UIScrollView</code> 的滚动会导致 <code>NSTimer</code> 失效？</li>\n<li>为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？</li>\n<li>你会如何存储用户的一些敏感信息，如登录的 token。</li>\n<li>有用过一些开源组件吧，能简单说几个么，大概说说它们的使用场景实现。</li>\n<li>什么时候会发生 <code>EXC BAD ACCESS</code> 异常？</li>\n<li>什么时候会使用 Core Graphics，有什么注意事项么？</li>\n<li>NSNotification 和 KVO 的使用场景？</li>\n<li>使用 Block 时需要注意哪些问题？</li>\n<li><code>performSelector:withObject:afterDelay:</code> 内部大概是怎么实现的，有什么注意事项么？</li>\n<li>如何播放 GIF 图片，有什么优化方案么？</li>\n<li>使用 <code>NSUserDefaults</code> 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)</li>\n<li>有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？</li>\n<li>哪些途径可以让 ViewController 瘦下来？</li>\n<li>有哪些常见的 Crash 场景？</li>\n</ul>\n<h2 id=\"综合类问题\"><a href=\"#综合类问题\" class=\"headerlink\" title=\"综合类问题\"></a>综合类问题</h2><ul>\n<li>设计一个可以无限滚动并且支持自动滚动的 SlideShow。</li>\n<li>设计一个进度条。</li>\n<li>设计一套大文件（如上百M的视频）下载方案。</li>\n<li>如果让你来实现 <code>dispatch_once</code>，你会怎么做？</li>\n<li>设计一个类似 iOS 主屏可以下拉出现 Spotlight 的系统。(对 UIScrollView 的理解程度)</li>\n</ul>\n<h2 id=\"编程实现\"><a href=\"#编程实现\" class=\"headerlink\" title=\"编程实现\"></a>编程实现</h2><ul>\n<li>简述<a href=\"https://www.jianshu.com/p/2e1b3f54b4f3\" target=\"_blank\" rel=\"noopener\">「Snakes and Ladders」</a>的实现思路(这道题比较容易阐述清楚，且难度适中)</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/\" target=\"_blank\" rel=\"noopener\">http://way2ios.com/development/ios-development-2/iphone-interview-question-answers/</a></li>\n<li><a href=\"https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html\" target=\"_blank\" rel=\"noopener\">https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html</a></li>\n<li><a href=\"https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions\" target=\"_blank\" rel=\"noopener\">https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions</a></li>\n</ul>"},{"title":"javascript(三)","date":"2019-03-21T08:43:48.000Z","_content":"## 数组\n- 数组[] Array是一种数据格式。\n- 数组中，每个数据之间用“,”隔开。\n- 获取数组中的其中一位，需要用下标。\n- 数组的长度 length。\n- 数组中可以存放任意类型的数据,但是一般为了代码的可读性极维护性，我每一个数组中，只存放一种类型的数据。\n- 当判断不大于这个数组的时候可以两种方式。\n- i>=arr.length-1;\n- i>arr.length\n<!-- more -->\n\n```\nvar = [123,\"abc\",true,document,function(){},,\"\",[]];\nconsole.log(arr[5]); //undefined;\nconsole.log(arr.length);//8\n\n```\n## 练习和作业\n**详细分析：**\n1. 布局\n2. 获取元素，定义变量，定义数组\n2. 循环切换和顺序切换的按钮\n- 1.点击切换下面的文字说明。\n- 2.点击加className,去掉另一个的className\n3. 循环切换\n- 1.点击左边箭头控制数字一直减，到0的时候回到5.\n- 2.点击右边尖头控制数字一直加，到最大的时候回到0.\n- 3.上面的1/4修改值\n- 4.切换文字描述\n4.顺序切换\n- 1.点击左边箭头控制数字一直减，到0的时候弹出提示，并且下面的不能点击.\n- 2.点击右边尖头控制数字一直加，到最大的时候弹出提示，并且下面的不能点击.\n- 3.上面的1/4修改值\n- 4.切换文字描述\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Title</title>\n<style>\nbody{\nfont-family: Arial;\n}\np{\nmargin: 20px 0;\npadding:0;\n}\ninput{\noutline: none;\n}\n.wrap{\nposition: relative;\nwidth:550px;\nmargin:50px auto 0;\n}\n.tab{\nwidth:550px;\nmargin:0 auto;\ntext-align: center;\nbackground-color: #000;\npadding:20px 0;\n}\n.tab div{\nwidth:164px;\nmargin:0 auto;\n}\n.tab div::after{\ncontent:\".\";\ndisplay:block;\nheight:0;\nclear:both;\n}\n.tab input{\ndisplay: inline-block;\nborder-radius: 3px;\nwidth: 80px;\nline-height:20px;\nmargin-left:-1px;\nborder:#fff 1px solid;\nbackground: #000;\ncolor:#fff;\nfloat: left;\ncursor: pointer;\n}\n.tab input.cur{\nbackground: #fff;\ncolor:#000;\n}\n.tab p{\ncolor:#ccc;\nfont-size: 13px;\n}\n.box{\nmargin: 0 auto;\nwidth: 550px;\nheight: 310px;\nposition: relative;\n}\n.box input{\nposition: absolute;\ntop: 50%;\nmargin-top:-25px;\nwidth: 40px;\nheight: 50px;\nborder: 0;\nbackground: none;\ncolor:#fff;\nfont-size: 26px;\n}\n.box input:hover{\nbackground-color: rgba(0,0,0,.4);\ncursor: pointer;\n}\n.box input:nth-of-type(1){\nleft: 0;\n}\n.box input:nth-of-type(2){\nright:0;\n}\n.box nav{\nposition: absolute;\nleft:0;\nbottom:0;\nwidth:100%;\nline-height:40px;\ncolor: #fff;\ntext-align: center;\nbackground-color: rgba(0,0,0,.3);\n}\n.box span{\nposition: absolute;\nwidth:100%;\nline-height:45px;\ntext-align: center;\ntop:0;\ncolor: #fff;\n}\n.mask{\nposition: absolute;\ndisplay: none;\ntop:0;\nleft:0;\nwidth:100%;\nheight:100%;\nbackground-color: rgba(255,255,255,0);\nz-index: 99;\n}\n.fixed{\nwidth: 300px;\nheight:150px;\nposition: absolute;\nleft:50%;\nmargin-left: -150px;\ntop:50%;\nmargin-top: -75px;\nbackground-color:rgba(0,0,0,.8);\ncolor:#fff;\ntext-align: center;\n}\n.fixed p:nth-of-type(2){\nfont-size: 12px;\n}\n.fixed a{\ntext-decoration: none;\ncolor:#fff;\nfont-size: 12px;\n}\n.fixed a:nth-of-type(1){\nborder:#fff 1px solid;\npadding:5px 15px;\n}\n.fixed a:nth-of-type(2){\nposition: absolute;\nright:10px;\ntop:10px;\n\n}\n</style>\n</head>\n<body>\n<div class=\"wrap\">\n<div class=\"tab\">\n<div>\n<input type=\"button\" value=\"循环切换\" class=\"cur\">\n<input type=\"button\" value=\"顺序切换\">\n</div>\n<p>图片可以从最后一张转到第一张循环</p>\n</div>\n<div class=\"box\">\n<span>1/4</span>\n<input type=\"button\" value=\"<\">\n<img src=\"img/1.jpg\" />\n<input type=\"button\" value=\">\">\n<nav>文字描述一</nav>\n</div>\n<div class=\"mask\">\n<div class=\"fixed\">\n<p>Javascript 提醒</p>\n<p>已经到第一张啦～</p>\n<a href=\"javascript:\">确定</a>\n<a href=\"javascript:\">X</a>\n</div>\n</div>\n</div>\n<script>\n\n//获取控制循环和顺序的元素\nvar tab = document.querySelector('.tab');\nvar tabP = tab.querySelector('p');\nvar tabs = tab.querySelectorAll('input');\n\n//获取要进行修改处理的元素\nvar box = document.querySelector('.box');\nvar inputs = box.querySelectorAll('input');\nvar span = box.querySelector('span');\nvar img = box.querySelector('img');\nvar navText = box.querySelector('nav');\n\n//弹出提示框\nvar mask  = document.querySelector('.mask');\nvar fixed = document.querySelector('.fixed');\nvar fText = fixed.querySelectorAll('p')[1];\nvar fSure = fixed.querySelectorAll('a');\n\n//创建数组\nvar arrImg = ['img/1.jpg','img/2.jpg','img/3.jpg','img/4.jpg'];\nvar arrImgText = ['文字描述一','文字描述二','文字描述三','文字描述四'];\nvar arrText = ['图片可以从最后一张转到第一张循环','图片只能到第一张或者最后一张'];\n\nvar srcNum = 0,max = arrImg.length-1,min = 0,isIn = true;\n\ntabs[0].onclick = function() {\nisIn = true;\ntoFunText();\n}\ntabs[1].onclick = function() {\nisIn = false;\ntoFunText();\n}\n\n//切换按钮的样式和文字变换\nfunction toFunText(){\nif(isIn){\ntabP.innerHTML = arrText[0];\ntabs[0].className = 'cur';\ntabs[1].className = '';\n}else{\ntabP.innerHTML = arrText[1];\ntabs[1].className = 'cur';\ntabs[0].className = '';\n}\n}\n//上一张\ninputs[0].onclick = function(){\nsrcNum-- ;\nif(srcNum<min){\nif(isIn){\nsrcNum = max;//循环\n}else{\nsrcNum = min;\n//alert('这是第一张');\nfText.innerHTML = '已经是第一张了哦～';\nmask.style.display = 'block';\n}\n\n}\nimg.src = arrImg[srcNum];\nnavText.innerHTML = arrImgText[srcNum];\nspan.innerHTML =(srcNum+1)+'/'+arrImg.length;\n\n}\n//下一张\ninputs[1].onclick = function(){\nsrcNum++ ;\nif(srcNum>max){\nif(isIn){\nsrcNum = min;//循环\n}else{\nsrcNum = max;\nfText.innerHTML = '已经是最后一张了哦～';\nmask.style.display = 'block';\n//alert('这是最后一张')\n}\n\n}\nimg.src = arrImg[srcNum];\nnavText.innerHTML = arrImgText[srcNum];\nspan.innerHTML =(srcNum+1)+'/'+arrImg.length;\n\n}\n//点击关闭提示弹框\nfSure[0].onclick=function(){\ncloseFun();\n}\nfSure[1].onclick=function(){\ncloseFun();\n}\nfunction closeFun(){\nmask.style.display = 'none';\n}\n</script>\n</body>\n</html>\n```\n","source":"_posts/javascript-三.md","raw":"---\ntitle: javascript(三)\ndate: 2019-03-21 16:43:48\ntags:\ncategories: JavaScript\n---\n## 数组\n- 数组[] Array是一种数据格式。\n- 数组中，每个数据之间用“,”隔开。\n- 获取数组中的其中一位，需要用下标。\n- 数组的长度 length。\n- 数组中可以存放任意类型的数据,但是一般为了代码的可读性极维护性，我每一个数组中，只存放一种类型的数据。\n- 当判断不大于这个数组的时候可以两种方式。\n- i>=arr.length-1;\n- i>arr.length\n<!-- more -->\n\n```\nvar = [123,\"abc\",true,document,function(){},,\"\",[]];\nconsole.log(arr[5]); //undefined;\nconsole.log(arr.length);//8\n\n```\n## 练习和作业\n**详细分析：**\n1. 布局\n2. 获取元素，定义变量，定义数组\n2. 循环切换和顺序切换的按钮\n- 1.点击切换下面的文字说明。\n- 2.点击加className,去掉另一个的className\n3. 循环切换\n- 1.点击左边箭头控制数字一直减，到0的时候回到5.\n- 2.点击右边尖头控制数字一直加，到最大的时候回到0.\n- 3.上面的1/4修改值\n- 4.切换文字描述\n4.顺序切换\n- 1.点击左边箭头控制数字一直减，到0的时候弹出提示，并且下面的不能点击.\n- 2.点击右边尖头控制数字一直加，到最大的时候弹出提示，并且下面的不能点击.\n- 3.上面的1/4修改值\n- 4.切换文字描述\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Title</title>\n<style>\nbody{\nfont-family: Arial;\n}\np{\nmargin: 20px 0;\npadding:0;\n}\ninput{\noutline: none;\n}\n.wrap{\nposition: relative;\nwidth:550px;\nmargin:50px auto 0;\n}\n.tab{\nwidth:550px;\nmargin:0 auto;\ntext-align: center;\nbackground-color: #000;\npadding:20px 0;\n}\n.tab div{\nwidth:164px;\nmargin:0 auto;\n}\n.tab div::after{\ncontent:\".\";\ndisplay:block;\nheight:0;\nclear:both;\n}\n.tab input{\ndisplay: inline-block;\nborder-radius: 3px;\nwidth: 80px;\nline-height:20px;\nmargin-left:-1px;\nborder:#fff 1px solid;\nbackground: #000;\ncolor:#fff;\nfloat: left;\ncursor: pointer;\n}\n.tab input.cur{\nbackground: #fff;\ncolor:#000;\n}\n.tab p{\ncolor:#ccc;\nfont-size: 13px;\n}\n.box{\nmargin: 0 auto;\nwidth: 550px;\nheight: 310px;\nposition: relative;\n}\n.box input{\nposition: absolute;\ntop: 50%;\nmargin-top:-25px;\nwidth: 40px;\nheight: 50px;\nborder: 0;\nbackground: none;\ncolor:#fff;\nfont-size: 26px;\n}\n.box input:hover{\nbackground-color: rgba(0,0,0,.4);\ncursor: pointer;\n}\n.box input:nth-of-type(1){\nleft: 0;\n}\n.box input:nth-of-type(2){\nright:0;\n}\n.box nav{\nposition: absolute;\nleft:0;\nbottom:0;\nwidth:100%;\nline-height:40px;\ncolor: #fff;\ntext-align: center;\nbackground-color: rgba(0,0,0,.3);\n}\n.box span{\nposition: absolute;\nwidth:100%;\nline-height:45px;\ntext-align: center;\ntop:0;\ncolor: #fff;\n}\n.mask{\nposition: absolute;\ndisplay: none;\ntop:0;\nleft:0;\nwidth:100%;\nheight:100%;\nbackground-color: rgba(255,255,255,0);\nz-index: 99;\n}\n.fixed{\nwidth: 300px;\nheight:150px;\nposition: absolute;\nleft:50%;\nmargin-left: -150px;\ntop:50%;\nmargin-top: -75px;\nbackground-color:rgba(0,0,0,.8);\ncolor:#fff;\ntext-align: center;\n}\n.fixed p:nth-of-type(2){\nfont-size: 12px;\n}\n.fixed a{\ntext-decoration: none;\ncolor:#fff;\nfont-size: 12px;\n}\n.fixed a:nth-of-type(1){\nborder:#fff 1px solid;\npadding:5px 15px;\n}\n.fixed a:nth-of-type(2){\nposition: absolute;\nright:10px;\ntop:10px;\n\n}\n</style>\n</head>\n<body>\n<div class=\"wrap\">\n<div class=\"tab\">\n<div>\n<input type=\"button\" value=\"循环切换\" class=\"cur\">\n<input type=\"button\" value=\"顺序切换\">\n</div>\n<p>图片可以从最后一张转到第一张循环</p>\n</div>\n<div class=\"box\">\n<span>1/4</span>\n<input type=\"button\" value=\"<\">\n<img src=\"img/1.jpg\" />\n<input type=\"button\" value=\">\">\n<nav>文字描述一</nav>\n</div>\n<div class=\"mask\">\n<div class=\"fixed\">\n<p>Javascript 提醒</p>\n<p>已经到第一张啦～</p>\n<a href=\"javascript:\">确定</a>\n<a href=\"javascript:\">X</a>\n</div>\n</div>\n</div>\n<script>\n\n//获取控制循环和顺序的元素\nvar tab = document.querySelector('.tab');\nvar tabP = tab.querySelector('p');\nvar tabs = tab.querySelectorAll('input');\n\n//获取要进行修改处理的元素\nvar box = document.querySelector('.box');\nvar inputs = box.querySelectorAll('input');\nvar span = box.querySelector('span');\nvar img = box.querySelector('img');\nvar navText = box.querySelector('nav');\n\n//弹出提示框\nvar mask  = document.querySelector('.mask');\nvar fixed = document.querySelector('.fixed');\nvar fText = fixed.querySelectorAll('p')[1];\nvar fSure = fixed.querySelectorAll('a');\n\n//创建数组\nvar arrImg = ['img/1.jpg','img/2.jpg','img/3.jpg','img/4.jpg'];\nvar arrImgText = ['文字描述一','文字描述二','文字描述三','文字描述四'];\nvar arrText = ['图片可以从最后一张转到第一张循环','图片只能到第一张或者最后一张'];\n\nvar srcNum = 0,max = arrImg.length-1,min = 0,isIn = true;\n\ntabs[0].onclick = function() {\nisIn = true;\ntoFunText();\n}\ntabs[1].onclick = function() {\nisIn = false;\ntoFunText();\n}\n\n//切换按钮的样式和文字变换\nfunction toFunText(){\nif(isIn){\ntabP.innerHTML = arrText[0];\ntabs[0].className = 'cur';\ntabs[1].className = '';\n}else{\ntabP.innerHTML = arrText[1];\ntabs[1].className = 'cur';\ntabs[0].className = '';\n}\n}\n//上一张\ninputs[0].onclick = function(){\nsrcNum-- ;\nif(srcNum<min){\nif(isIn){\nsrcNum = max;//循环\n}else{\nsrcNum = min;\n//alert('这是第一张');\nfText.innerHTML = '已经是第一张了哦～';\nmask.style.display = 'block';\n}\n\n}\nimg.src = arrImg[srcNum];\nnavText.innerHTML = arrImgText[srcNum];\nspan.innerHTML =(srcNum+1)+'/'+arrImg.length;\n\n}\n//下一张\ninputs[1].onclick = function(){\nsrcNum++ ;\nif(srcNum>max){\nif(isIn){\nsrcNum = min;//循环\n}else{\nsrcNum = max;\nfText.innerHTML = '已经是最后一张了哦～';\nmask.style.display = 'block';\n//alert('这是最后一张')\n}\n\n}\nimg.src = arrImg[srcNum];\nnavText.innerHTML = arrImgText[srcNum];\nspan.innerHTML =(srcNum+1)+'/'+arrImg.length;\n\n}\n//点击关闭提示弹框\nfSure[0].onclick=function(){\ncloseFun();\n}\nfSure[1].onclick=function(){\ncloseFun();\n}\nfunction closeFun(){\nmask.style.display = 'none';\n}\n</script>\n</body>\n</html>\n```\n","slug":"javascript-三","published":1,"updated":"2019-05-28T09:55:45.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfyma000afw04cs996l5c","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>数组[] Array是一种数据格式。</li>\n<li>数组中，每个数据之间用“,”隔开。</li>\n<li>获取数组中的其中一位，需要用下标。</li>\n<li>数组的长度 length。</li>\n<li>数组中可以存放任意类型的数据,但是一般为了代码的可读性极维护性，我每一个数组中，只存放一种类型的数据。</li>\n<li>当判断不大于这个数组的时候可以两种方式。</li>\n<li>i&gt;=arr.length-1;</li>\n<li>i&gt;arr.length<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = [123,&quot;abc&quot;,true,document,function()&#123;&#125;,,&quot;&quot;,[]];</span><br><span class=\"line\">console.log(arr[5]); //undefined;</span><br><span class=\"line\">console.log(arr.length);//8</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习和作业\"><a href=\"#练习和作业\" class=\"headerlink\" title=\"练习和作业\"></a>练习和作业</h2><p><strong>详细分析：</strong></p>\n<ol>\n<li>布局</li>\n<li>获取元素，定义变量，定义数组</li>\n<li>循环切换和顺序切换的按钮</li>\n</ol>\n<ul>\n<li>1.点击切换下面的文字说明。</li>\n<li>2.点击加className,去掉另一个的className</li>\n</ul>\n<ol start=\"3\">\n<li>循环切换</li>\n</ol>\n<ul>\n<li>1.点击左边箭头控制数字一直减，到0的时候回到5.</li>\n<li>2.点击右边尖头控制数字一直加，到最大的时候回到0.</li>\n<li>3.上面的1/4修改值</li>\n<li>4.切换文字描述<br>4.顺序切换</li>\n<li>1.点击左边箭头控制数字一直减，到0的时候弹出提示，并且下面的不能点击.</li>\n<li>2.点击右边尖头控制数字一直加，到最大的时候弹出提示，并且下面的不能点击.</li>\n<li>3.上面的1/4修改值</li>\n<li>4.切换文字描述<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">body&#123;</span><br><span class=\"line\">font-family: Arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p&#123;</span><br><span class=\"line\">margin: 20px 0;</span><br><span class=\"line\">padding:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">outline: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width:550px;</span><br><span class=\"line\">margin:50px auto 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab&#123;</span><br><span class=\"line\">width:550px;</span><br><span class=\"line\">margin:0 auto;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background-color: #000;</span><br><span class=\"line\">padding:20px 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab div&#123;</span><br><span class=\"line\">width:164px;</span><br><span class=\"line\">margin:0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab div::after&#123;</span><br><span class=\"line\">content:&quot;.&quot;;</span><br><span class=\"line\">display:block;</span><br><span class=\"line\">height:0;</span><br><span class=\"line\">clear:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab input&#123;</span><br><span class=\"line\">display: inline-block;</span><br><span class=\"line\">border-radius: 3px;</span><br><span class=\"line\">width: 80px;</span><br><span class=\"line\">line-height:20px;</span><br><span class=\"line\">margin-left:-1px;</span><br><span class=\"line\">border:#fff 1px solid;</span><br><span class=\"line\">background: #000;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">float: left;</span><br><span class=\"line\">cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab input.cur&#123;</span><br><span class=\"line\">background: #fff;</span><br><span class=\"line\">color:#000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab p&#123;</span><br><span class=\"line\">color:#ccc;</span><br><span class=\"line\">font-size: 13px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">margin: 0 auto;</span><br><span class=\"line\">width: 550px;</span><br><span class=\"line\">height: 310px;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 50%;</span><br><span class=\"line\">margin-top:-25px;</span><br><span class=\"line\">width: 40px;</span><br><span class=\"line\">height: 50px;</span><br><span class=\"line\">border: 0;</span><br><span class=\"line\">background: none;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">font-size: 26px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:hover&#123;</span><br><span class=\"line\">background-color: rgba(0,0,0,.4);</span><br><span class=\"line\">cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:nth-of-type(1)&#123;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:nth-of-type(2)&#123;</span><br><span class=\"line\">right:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box nav&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:0;</span><br><span class=\"line\">bottom:0;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">line-height:40px;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background-color: rgba(0,0,0,.3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box span&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">line-height:45px;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">top:0;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.mask&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">display: none;</span><br><span class=\"line\">top:0;</span><br><span class=\"line\">left:0;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">height:100%;</span><br><span class=\"line\">background-color: rgba(255,255,255,0);</span><br><span class=\"line\">z-index: 99;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed&#123;</span><br><span class=\"line\">width: 300px;</span><br><span class=\"line\">height:150px;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:50%;</span><br><span class=\"line\">margin-left: -150px;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">margin-top: -75px;</span><br><span class=\"line\">background-color:rgba(0,0,0,.8);</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed p:nth-of-type(2)&#123;</span><br><span class=\"line\">font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a&#123;</span><br><span class=\"line\">text-decoration: none;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a:nth-of-type(1)&#123;</span><br><span class=\"line\">border:#fff 1px solid;</span><br><span class=\"line\">padding:5px 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a:nth-of-type(2)&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">right:10px;</span><br><span class=\"line\">top:10px;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;tab&quot;&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;循环切换&quot; class=&quot;cur&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;顺序切换&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;p&gt;图片可以从最后一张转到第一张循环&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">&lt;span&gt;1/4&lt;/span&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;&lt;&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img/1.jpg&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;&gt;&quot;&gt;</span><br><span class=\"line\">&lt;nav&gt;文字描述一&lt;/nav&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;mask&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;fixed&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;Javascript 提醒&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;已经到第一张啦～&lt;/p&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:&quot;&gt;确定&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:&quot;&gt;X&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取控制循环和顺序的元素</span><br><span class=\"line\">var tab = document.querySelector(&apos;.tab&apos;);</span><br><span class=\"line\">var tabP = tab.querySelector(&apos;p&apos;);</span><br><span class=\"line\">var tabs = tab.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//获取要进行修改处理的元素</span><br><span class=\"line\">var box = document.querySelector(&apos;.box&apos;);</span><br><span class=\"line\">var inputs = box.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">var span = box.querySelector(&apos;span&apos;);</span><br><span class=\"line\">var img = box.querySelector(&apos;img&apos;);</span><br><span class=\"line\">var navText = box.querySelector(&apos;nav&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//弹出提示框</span><br><span class=\"line\">var mask  = document.querySelector(&apos;.mask&apos;);</span><br><span class=\"line\">var fixed = document.querySelector(&apos;.fixed&apos;);</span><br><span class=\"line\">var fText = fixed.querySelectorAll(&apos;p&apos;)[1];</span><br><span class=\"line\">var fSure = fixed.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建数组</span><br><span class=\"line\">var arrImg = [&apos;img/1.jpg&apos;,&apos;img/2.jpg&apos;,&apos;img/3.jpg&apos;,&apos;img/4.jpg&apos;];</span><br><span class=\"line\">var arrImgText = [&apos;文字描述一&apos;,&apos;文字描述二&apos;,&apos;文字描述三&apos;,&apos;文字描述四&apos;];</span><br><span class=\"line\">var arrText = [&apos;图片可以从最后一张转到第一张循环&apos;,&apos;图片只能到第一张或者最后一张&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var srcNum = 0,max = arrImg.length-1,min = 0,isIn = true;</span><br><span class=\"line\"></span><br><span class=\"line\">tabs[0].onclick = function() &#123;</span><br><span class=\"line\">isIn = true;</span><br><span class=\"line\">toFunText();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tabs[1].onclick = function() &#123;</span><br><span class=\"line\">isIn = false;</span><br><span class=\"line\">toFunText();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//切换按钮的样式和文字变换</span><br><span class=\"line\">function toFunText()&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">tabP.innerHTML = arrText[0];</span><br><span class=\"line\">tabs[0].className = &apos;cur&apos;;</span><br><span class=\"line\">tabs[1].className = &apos;&apos;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">tabP.innerHTML = arrText[1];</span><br><span class=\"line\">tabs[1].className = &apos;cur&apos;;</span><br><span class=\"line\">tabs[0].className = &apos;&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//上一张</span><br><span class=\"line\">inputs[0].onclick = function()&#123;</span><br><span class=\"line\">srcNum-- ;</span><br><span class=\"line\">if(srcNum&lt;min)&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">srcNum = max;//循环</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">srcNum = min;</span><br><span class=\"line\">//alert(&apos;这是第一张&apos;);</span><br><span class=\"line\">fText.innerHTML = &apos;已经是第一张了哦～&apos;;</span><br><span class=\"line\">mask.style.display = &apos;block&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = arrImg[srcNum];</span><br><span class=\"line\">navText.innerHTML = arrImgText[srcNum];</span><br><span class=\"line\">span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//下一张</span><br><span class=\"line\">inputs[1].onclick = function()&#123;</span><br><span class=\"line\">srcNum++ ;</span><br><span class=\"line\">if(srcNum&gt;max)&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">srcNum = min;//循环</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">srcNum = max;</span><br><span class=\"line\">fText.innerHTML = &apos;已经是最后一张了哦～&apos;;</span><br><span class=\"line\">mask.style.display = &apos;block&apos;;</span><br><span class=\"line\">//alert(&apos;这是最后一张&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = arrImg[srcNum];</span><br><span class=\"line\">navText.innerHTML = arrImgText[srcNum];</span><br><span class=\"line\">span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//点击关闭提示弹框</span><br><span class=\"line\">fSure[0].onclick=function()&#123;</span><br><span class=\"line\">closeFun();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fSure[1].onclick=function()&#123;</span><br><span class=\"line\">closeFun();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function closeFun()&#123;</span><br><span class=\"line\">mask.style.display = &apos;none&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li>数组[] Array是一种数据格式。</li>\n<li>数组中，每个数据之间用“,”隔开。</li>\n<li>获取数组中的其中一位，需要用下标。</li>\n<li>数组的长度 length。</li>\n<li>数组中可以存放任意类型的数据,但是一般为了代码的可读性极维护性，我每一个数组中，只存放一种类型的数据。</li>\n<li>当判断不大于这个数组的时候可以两种方式。</li>\n<li>i&gt;=arr.length-1;</li>\n<li>i&gt;arr.length","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = [123,&quot;abc&quot;,true,document,function()&#123;&#125;,,&quot;&quot;,[]];</span><br><span class=\"line\">console.log(arr[5]); //undefined;</span><br><span class=\"line\">console.log(arr.length);//8</span><br></pre></td></tr></table></figure>\n<h2 id=\"练习和作业\"><a href=\"#练习和作业\" class=\"headerlink\" title=\"练习和作业\"></a>练习和作业</h2><p><strong>详细分析：</strong></p>\n<ol>\n<li>布局</li>\n<li>获取元素，定义变量，定义数组</li>\n<li>循环切换和顺序切换的按钮</li>\n</ol>\n<ul>\n<li>1.点击切换下面的文字说明。</li>\n<li>2.点击加className,去掉另一个的className</li>\n</ul>\n<ol start=\"3\">\n<li>循环切换</li>\n</ol>\n<ul>\n<li>1.点击左边箭头控制数字一直减，到0的时候回到5.</li>\n<li>2.点击右边尖头控制数字一直加，到最大的时候回到0.</li>\n<li>3.上面的1/4修改值</li>\n<li>4.切换文字描述<br>4.顺序切换</li>\n<li>1.点击左边箭头控制数字一直减，到0的时候弹出提示，并且下面的不能点击.</li>\n<li>2.点击右边尖头控制数字一直加，到最大的时候弹出提示，并且下面的不能点击.</li>\n<li>3.上面的1/4修改值</li>\n<li>4.切换文字描述<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">body&#123;</span><br><span class=\"line\">font-family: Arial;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p&#123;</span><br><span class=\"line\">margin: 20px 0;</span><br><span class=\"line\">padding:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">input&#123;</span><br><span class=\"line\">outline: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap&#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width:550px;</span><br><span class=\"line\">margin:50px auto 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab&#123;</span><br><span class=\"line\">width:550px;</span><br><span class=\"line\">margin:0 auto;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background-color: #000;</span><br><span class=\"line\">padding:20px 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab div&#123;</span><br><span class=\"line\">width:164px;</span><br><span class=\"line\">margin:0 auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab div::after&#123;</span><br><span class=\"line\">content:&quot;.&quot;;</span><br><span class=\"line\">display:block;</span><br><span class=\"line\">height:0;</span><br><span class=\"line\">clear:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab input&#123;</span><br><span class=\"line\">display: inline-block;</span><br><span class=\"line\">border-radius: 3px;</span><br><span class=\"line\">width: 80px;</span><br><span class=\"line\">line-height:20px;</span><br><span class=\"line\">margin-left:-1px;</span><br><span class=\"line\">border:#fff 1px solid;</span><br><span class=\"line\">background: #000;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">float: left;</span><br><span class=\"line\">cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab input.cur&#123;</span><br><span class=\"line\">background: #fff;</span><br><span class=\"line\">color:#000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.tab p&#123;</span><br><span class=\"line\">color:#ccc;</span><br><span class=\"line\">font-size: 13px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box&#123;</span><br><span class=\"line\">margin: 0 auto;</span><br><span class=\"line\">width: 550px;</span><br><span class=\"line\">height: 310px;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 50%;</span><br><span class=\"line\">margin-top:-25px;</span><br><span class=\"line\">width: 40px;</span><br><span class=\"line\">height: 50px;</span><br><span class=\"line\">border: 0;</span><br><span class=\"line\">background: none;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">font-size: 26px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:hover&#123;</span><br><span class=\"line\">background-color: rgba(0,0,0,.4);</span><br><span class=\"line\">cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:nth-of-type(1)&#123;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box input:nth-of-type(2)&#123;</span><br><span class=\"line\">right:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box nav&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:0;</span><br><span class=\"line\">bottom:0;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">line-height:40px;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background-color: rgba(0,0,0,.3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box span&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">line-height:45px;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">top:0;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.mask&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">display: none;</span><br><span class=\"line\">top:0;</span><br><span class=\"line\">left:0;</span><br><span class=\"line\">width:100%;</span><br><span class=\"line\">height:100%;</span><br><span class=\"line\">background-color: rgba(255,255,255,0);</span><br><span class=\"line\">z-index: 99;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed&#123;</span><br><span class=\"line\">width: 300px;</span><br><span class=\"line\">height:150px;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left:50%;</span><br><span class=\"line\">margin-left: -150px;</span><br><span class=\"line\">top:50%;</span><br><span class=\"line\">margin-top: -75px;</span><br><span class=\"line\">background-color:rgba(0,0,0,.8);</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed p:nth-of-type(2)&#123;</span><br><span class=\"line\">font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a&#123;</span><br><span class=\"line\">text-decoration: none;</span><br><span class=\"line\">color:#fff;</span><br><span class=\"line\">font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a:nth-of-type(1)&#123;</span><br><span class=\"line\">border:#fff 1px solid;</span><br><span class=\"line\">padding:5px 15px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fixed a:nth-of-type(2)&#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">right:10px;</span><br><span class=\"line\">top:10px;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;tab&quot;&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;循环切换&quot; class=&quot;cur&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;顺序切换&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;p&gt;图片可以从最后一张转到第一张循环&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">&lt;span&gt;1/4&lt;/span&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;&lt;&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img/1.jpg&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;&gt;&quot;&gt;</span><br><span class=\"line\">&lt;nav&gt;文字描述一&lt;/nav&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;mask&quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;fixed&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;Javascript 提醒&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;已经到第一张啦～&lt;/p&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:&quot;&gt;确定&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:&quot;&gt;X&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取控制循环和顺序的元素</span><br><span class=\"line\">var tab = document.querySelector(&apos;.tab&apos;);</span><br><span class=\"line\">var tabP = tab.querySelector(&apos;p&apos;);</span><br><span class=\"line\">var tabs = tab.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//获取要进行修改处理的元素</span><br><span class=\"line\">var box = document.querySelector(&apos;.box&apos;);</span><br><span class=\"line\">var inputs = box.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">var span = box.querySelector(&apos;span&apos;);</span><br><span class=\"line\">var img = box.querySelector(&apos;img&apos;);</span><br><span class=\"line\">var navText = box.querySelector(&apos;nav&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//弹出提示框</span><br><span class=\"line\">var mask  = document.querySelector(&apos;.mask&apos;);</span><br><span class=\"line\">var fixed = document.querySelector(&apos;.fixed&apos;);</span><br><span class=\"line\">var fText = fixed.querySelectorAll(&apos;p&apos;)[1];</span><br><span class=\"line\">var fSure = fixed.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建数组</span><br><span class=\"line\">var arrImg = [&apos;img/1.jpg&apos;,&apos;img/2.jpg&apos;,&apos;img/3.jpg&apos;,&apos;img/4.jpg&apos;];</span><br><span class=\"line\">var arrImgText = [&apos;文字描述一&apos;,&apos;文字描述二&apos;,&apos;文字描述三&apos;,&apos;文字描述四&apos;];</span><br><span class=\"line\">var arrText = [&apos;图片可以从最后一张转到第一张循环&apos;,&apos;图片只能到第一张或者最后一张&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var srcNum = 0,max = arrImg.length-1,min = 0,isIn = true;</span><br><span class=\"line\"></span><br><span class=\"line\">tabs[0].onclick = function() &#123;</span><br><span class=\"line\">isIn = true;</span><br><span class=\"line\">toFunText();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tabs[1].onclick = function() &#123;</span><br><span class=\"line\">isIn = false;</span><br><span class=\"line\">toFunText();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//切换按钮的样式和文字变换</span><br><span class=\"line\">function toFunText()&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">tabP.innerHTML = arrText[0];</span><br><span class=\"line\">tabs[0].className = &apos;cur&apos;;</span><br><span class=\"line\">tabs[1].className = &apos;&apos;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">tabP.innerHTML = arrText[1];</span><br><span class=\"line\">tabs[1].className = &apos;cur&apos;;</span><br><span class=\"line\">tabs[0].className = &apos;&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//上一张</span><br><span class=\"line\">inputs[0].onclick = function()&#123;</span><br><span class=\"line\">srcNum-- ;</span><br><span class=\"line\">if(srcNum&lt;min)&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">srcNum = max;//循环</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">srcNum = min;</span><br><span class=\"line\">//alert(&apos;这是第一张&apos;);</span><br><span class=\"line\">fText.innerHTML = &apos;已经是第一张了哦～&apos;;</span><br><span class=\"line\">mask.style.display = &apos;block&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = arrImg[srcNum];</span><br><span class=\"line\">navText.innerHTML = arrImgText[srcNum];</span><br><span class=\"line\">span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//下一张</span><br><span class=\"line\">inputs[1].onclick = function()&#123;</span><br><span class=\"line\">srcNum++ ;</span><br><span class=\"line\">if(srcNum&gt;max)&#123;</span><br><span class=\"line\">if(isIn)&#123;</span><br><span class=\"line\">srcNum = min;//循环</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">srcNum = max;</span><br><span class=\"line\">fText.innerHTML = &apos;已经是最后一张了哦～&apos;;</span><br><span class=\"line\">mask.style.display = &apos;block&apos;;</span><br><span class=\"line\">//alert(&apos;这是最后一张&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = arrImg[srcNum];</span><br><span class=\"line\">navText.innerHTML = arrImgText[srcNum];</span><br><span class=\"line\">span.innerHTML =(srcNum+1)+&apos;/&apos;+arrImg.length;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//点击关闭提示弹框</span><br><span class=\"line\">fSure[0].onclick=function()&#123;</span><br><span class=\"line\">closeFun();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fSure[1].onclick=function()&#123;</span><br><span class=\"line\">closeFun();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function closeFun()&#123;</span><br><span class=\"line\">mask.style.display = &apos;none&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"javascript(二)","date":"2019-03-21T08:43:47.000Z","_content":"## 元素获取的其他方法\n- **1.document.querySelector('Css Selector');**\n> 接收一个css选择器（通配，群组，包含，id，类...等等\n\n【注意：如果这个选择器对应的是一组元素，就只找到第0个。】\n<!-- more -->\n\n```\nvar box = document.querySelector('.box');//第一个\nvar box = document.querySelector('.box:last-of-type');//最后一个\nbox.style.background = \"red\"; \n```\n- **2.父级.querySelectorAll('Css选择器');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n\n【注意：一组元素不能在js直接操作,需要添加下标】\n\n- **3.父级.getElementsByTagName('标签名');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n- **4.document.getElementsClassName('Class名');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n\n- **解：一组元素（元素集合，类数组）**\n- 1. 一组元素不能直接操作\n- 2. 一组元素哪怕只有一个，它也是一组元素。\n- 3. 一组元素在操作的时候，可以使用下标。\n- 4. 如果需要知道这组元素有几个，可以使用 length属性\n\n## if语法\n>一种操作下会有两种或者以上的执行结果，记得用判断。\n\n```\nif(条件){\n条件成立的时候需要执行的代码\n}\n\nif(条件){\n条件成立的时候需要执行的代码\n}else{\n条件不成立的时候需要执行代码\n}\n\nif(条件一){\n条件一成立的时候需要执行的代码\n}else if(条件二){\n条件二成立的时候需要执行的代码\n}\n....else{\n以上条件都不成立的时候执行的代码\n}\n```\n【style提取的是行间样式，所以不建议大家直接使用style里的内容当作判断条件】\n\n## 运算符\n- 逻辑运算符\n- “==” 等于\n- “!=” 不等于\n- “>=” 大于等于\n- “<=” 小于等于\n- “<” 小于\n- “<” 大于\n\n## 数据类型\n为了能够更方便的描述和使用，程序通常会把要操作的数据，根据其特性，分成不同的类型进行操作。\n在javascript中，数据一共可以分成如下七种类型：\n1. 简单类型（值）\n```\n1. Number\n由0-9组成的值，还有几个比较特殊的值\na. NaN ->Not a Number\nb. Infinity-> 无穷的\n2. String\n由一对单引号或双引号包含的内容【单引号双引号需要成对】\n3. Booleans\n用来描述逻辑的真假的，这种类型有且仅有两个值\na. true 表示真\nb. false 表示假\n【js严格比较大小写字母】\nvar a = true;\na = !a;//a = false;\nvar a = false;\na = !a;//a = true;\n4. Null\n用来描述空值，这种类型有且仅有一个值【注意：当我们使用typeof的时候，返回的是‘object’】\n5. Undefined\n用来描述不存在的值，这种类型有且仅有一个值\n6. Symbol\n7. function(){} function函数\n```\n2. 复杂类型（复合类型、引用类型）\n- object：由7种数据类型组合的类型，object中包含7种类型中的任意类型。\n\n\n## for循环\n1. var i = 0;\n2. i < li.length;\n3. 执行里面面的操作;\n4. i++;\n\n**易混解析：**\n```\nfor(var i = 0; i < li.length; i++){\n//循环在页面加载完成之后就执行了\nli[i].onclick = function(){\n/*\n*点击li时执行\n*这会循环肯定已经执行完了，\n*所以在获取i的时候，是循环执行完之后的结果\n*/\nalert(i);\n}\n}\n\n```\n\n## this\n>在事件函数中this代表触发当前事件的元素\n\n```\nfor(var i = 0; i < li.length; i++) {\nli[i].onclick = function(){\nconsole.log(this,this.innerHTML);\n//结果是<span>1111</span>  1111\n// 在事件函数中，this代表触发当前事件的元素\n};\n}\n```\n## 作业\n```\n总共有5张图片，src分别为1.jpg,2.jpg,3.jpg,4.jpg,5.jpg\n点击 上一张 切换至 上一张图 如果已经是最开始1张 不做任何操作\n点击 下一张 切换至 下一张图\n如果已经是最后1张 不做任何操作\n```\n","source":"_posts/javascript-二.md","raw":"---\ntitle: javascript(二)\ndate: 2019-03-21 16:43:47\ntags:\ncategories: JavaScript\n---\n## 元素获取的其他方法\n- **1.document.querySelector('Css Selector');**\n> 接收一个css选择器（通配，群组，包含，id，类...等等\n\n【注意：如果这个选择器对应的是一组元素，就只找到第0个。】\n<!-- more -->\n\n```\nvar box = document.querySelector('.box');//第一个\nvar box = document.querySelector('.box:last-of-type');//最后一个\nbox.style.background = \"red\"; \n```\n- **2.父级.querySelectorAll('Css选择器');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n\n【注意：一组元素不能在js直接操作,需要添加下标】\n\n- **3.父级.getElementsByTagName('标签名');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n- **4.document.getElementsClassName('Class名');**\n- 获取元素下某个类型的标签\n- 获取结果是一种元素\n\n- **解：一组元素（元素集合，类数组）**\n- 1. 一组元素不能直接操作\n- 2. 一组元素哪怕只有一个，它也是一组元素。\n- 3. 一组元素在操作的时候，可以使用下标。\n- 4. 如果需要知道这组元素有几个，可以使用 length属性\n\n## if语法\n>一种操作下会有两种或者以上的执行结果，记得用判断。\n\n```\nif(条件){\n条件成立的时候需要执行的代码\n}\n\nif(条件){\n条件成立的时候需要执行的代码\n}else{\n条件不成立的时候需要执行代码\n}\n\nif(条件一){\n条件一成立的时候需要执行的代码\n}else if(条件二){\n条件二成立的时候需要执行的代码\n}\n....else{\n以上条件都不成立的时候执行的代码\n}\n```\n【style提取的是行间样式，所以不建议大家直接使用style里的内容当作判断条件】\n\n## 运算符\n- 逻辑运算符\n- “==” 等于\n- “!=” 不等于\n- “>=” 大于等于\n- “<=” 小于等于\n- “<” 小于\n- “<” 大于\n\n## 数据类型\n为了能够更方便的描述和使用，程序通常会把要操作的数据，根据其特性，分成不同的类型进行操作。\n在javascript中，数据一共可以分成如下七种类型：\n1. 简单类型（值）\n```\n1. Number\n由0-9组成的值，还有几个比较特殊的值\na. NaN ->Not a Number\nb. Infinity-> 无穷的\n2. String\n由一对单引号或双引号包含的内容【单引号双引号需要成对】\n3. Booleans\n用来描述逻辑的真假的，这种类型有且仅有两个值\na. true 表示真\nb. false 表示假\n【js严格比较大小写字母】\nvar a = true;\na = !a;//a = false;\nvar a = false;\na = !a;//a = true;\n4. Null\n用来描述空值，这种类型有且仅有一个值【注意：当我们使用typeof的时候，返回的是‘object’】\n5. Undefined\n用来描述不存在的值，这种类型有且仅有一个值\n6. Symbol\n7. function(){} function函数\n```\n2. 复杂类型（复合类型、引用类型）\n- object：由7种数据类型组合的类型，object中包含7种类型中的任意类型。\n\n\n## for循环\n1. var i = 0;\n2. i < li.length;\n3. 执行里面面的操作;\n4. i++;\n\n**易混解析：**\n```\nfor(var i = 0; i < li.length; i++){\n//循环在页面加载完成之后就执行了\nli[i].onclick = function(){\n/*\n*点击li时执行\n*这会循环肯定已经执行完了，\n*所以在获取i的时候，是循环执行完之后的结果\n*/\nalert(i);\n}\n}\n\n```\n\n## this\n>在事件函数中this代表触发当前事件的元素\n\n```\nfor(var i = 0; i < li.length; i++) {\nli[i].onclick = function(){\nconsole.log(this,this.innerHTML);\n//结果是<span>1111</span>  1111\n// 在事件函数中，this代表触发当前事件的元素\n};\n}\n```\n## 作业\n```\n总共有5张图片，src分别为1.jpg,2.jpg,3.jpg,4.jpg,5.jpg\n点击 上一张 切换至 上一张图 如果已经是最开始1张 不做任何操作\n点击 下一张 切换至 下一张图\n如果已经是最后1张 不做任何操作\n```\n","slug":"javascript-二","published":1,"updated":"2019-05-28T09:54:54.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymd000dfw04scvuocng","content":"<h2 id=\"元素获取的其他方法\"><a href=\"#元素获取的其他方法\" class=\"headerlink\" title=\"元素获取的其他方法\"></a>元素获取的其他方法</h2><ul>\n<li><strong>1.document.querySelector(‘Css Selector’);</strong><blockquote>\n<p>接收一个css选择器（通配，群组，包含，id，类…等等</p>\n</blockquote>\n</li>\n</ul>\n<p>【注意：如果这个选择器对应的是一组元素，就只找到第0个。】<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var box = document.querySelector(&apos;.box&apos;);//第一个</span><br><span class=\"line\">var box = document.querySelector(&apos;.box:last-of-type&apos;);//最后一个</span><br><span class=\"line\">box.style.background = &quot;red&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>2.父级.querySelectorAll(‘Css选择器’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li>获取结果是一种元素</li>\n</ul>\n<p>【注意：一组元素不能在js直接操作,需要添加下标】</p>\n<ul>\n<li><strong>3.父级.getElementsByTagName(‘标签名’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li>获取结果是一种元素</li>\n<li><strong>4.document.getElementsClassName(‘Class名’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li><p>获取结果是一种元素</p>\n</li>\n<li><p><strong>解：一组元素（元素集合，类数组）</strong></p>\n</li>\n<li><ol>\n<li>一组元素不能直接操作</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>一组元素哪怕只有一个，它也是一组元素。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>一组元素在操作的时候，可以使用下标。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>如果需要知道这组元素有几个，可以使用 length属性</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"if语法\"><a href=\"#if语法\" class=\"headerlink\" title=\"if语法\"></a>if语法</h2><blockquote>\n<p>一种操作下会有两种或者以上的执行结果，记得用判断。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件)&#123;</span><br><span class=\"line\">条件成立的时候需要执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件)&#123;</span><br><span class=\"line\">条件成立的时候需要执行的代码</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">条件不成立的时候需要执行代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件一)&#123;</span><br><span class=\"line\">条件一成立的时候需要执行的代码</span><br><span class=\"line\">&#125;else if(条件二)&#123;</span><br><span class=\"line\">条件二成立的时候需要执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....else&#123;</span><br><span class=\"line\">以上条件都不成立的时候执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【style提取的是行间样式，所以不建议大家直接使用style里的内容当作判断条件】</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>逻辑运算符</li>\n<li>“==” 等于</li>\n<li>“!=” 不等于</li>\n<li>“&gt;=” 大于等于</li>\n<li>“&lt;=” 小于等于</li>\n<li>“&lt;” 小于</li>\n<li>“&lt;” 大于</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>为了能够更方便的描述和使用，程序通常会把要操作的数据，根据其特性，分成不同的类型进行操作。<br>在javascript中，数据一共可以分成如下七种类型：</p>\n<ol>\n<li><p>简单类型（值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Number</span><br><span class=\"line\">由0-9组成的值，还有几个比较特殊的值</span><br><span class=\"line\">a. NaN -&gt;Not a Number</span><br><span class=\"line\">b. Infinity-&gt; 无穷的</span><br><span class=\"line\">2. String</span><br><span class=\"line\">由一对单引号或双引号包含的内容【单引号双引号需要成对】</span><br><span class=\"line\">3. Booleans</span><br><span class=\"line\">用来描述逻辑的真假的，这种类型有且仅有两个值</span><br><span class=\"line\">a. true 表示真</span><br><span class=\"line\">b. false 表示假</span><br><span class=\"line\">【js严格比较大小写字母】</span><br><span class=\"line\">var a = true;</span><br><span class=\"line\">a = !a;//a = false;</span><br><span class=\"line\">var a = false;</span><br><span class=\"line\">a = !a;//a = true;</span><br><span class=\"line\">4. Null</span><br><span class=\"line\">用来描述空值，这种类型有且仅有一个值【注意：当我们使用typeof的时候，返回的是‘object’】</span><br><span class=\"line\">5. Undefined</span><br><span class=\"line\">用来描述不存在的值，这种类型有且仅有一个值</span><br><span class=\"line\">6. Symbol</span><br><span class=\"line\">7. function()&#123;&#125; function函数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂类型（复合类型、引用类型）</p>\n</li>\n</ol>\n<ul>\n<li>object：由7种数据类型组合的类型，object中包含7种类型中的任意类型。</li>\n</ul>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ol>\n<li>var i = 0;</li>\n<li>i &lt; li.length;</li>\n<li>执行里面面的操作;</li>\n<li>i++;</li>\n</ol>\n<p><strong>易混解析：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; li.length; i++)&#123;</span><br><span class=\"line\">//循环在页面加载完成之后就执行了</span><br><span class=\"line\">li[i].onclick = function()&#123;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*点击li时执行</span><br><span class=\"line\">*这会循环肯定已经执行完了，</span><br><span class=\"line\">*所以在获取i的时候，是循环执行完之后的结果</span><br><span class=\"line\">*/</span><br><span class=\"line\">alert(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><blockquote>\n<p>在事件函数中this代表触发当前事件的元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">li[i].onclick = function()&#123;</span><br><span class=\"line\">console.log(this,this.innerHTML);</span><br><span class=\"line\">//结果是&lt;span&gt;1111&lt;/span&gt;  1111</span><br><span class=\"line\">// 在事件函数中，this代表触发当前事件的元素</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总共有5张图片，src分别为1.jpg,2.jpg,3.jpg,4.jpg,5.jpg</span><br><span class=\"line\">点击 上一张 切换至 上一张图 如果已经是最开始1张 不做任何操作</span><br><span class=\"line\">点击 下一张 切换至 下一张图</span><br><span class=\"line\">如果已经是最后1张 不做任何操作</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"元素获取的其他方法\"><a href=\"#元素获取的其他方法\" class=\"headerlink\" title=\"元素获取的其他方法\"></a>元素获取的其他方法</h2><ul>\n<li><strong>1.document.querySelector(‘Css Selector’);</strong><blockquote>\n<p>接收一个css选择器（通配，群组，包含，id，类…等等</p>\n</blockquote>\n</li>\n</ul>\n<p>【注意：如果这个选择器对应的是一组元素，就只找到第0个。】<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var box = document.querySelector(&apos;.box&apos;);//第一个</span><br><span class=\"line\">var box = document.querySelector(&apos;.box:last-of-type&apos;);//最后一个</span><br><span class=\"line\">box.style.background = &quot;red&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>2.父级.querySelectorAll(‘Css选择器’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li>获取结果是一种元素</li>\n</ul>\n<p>【注意：一组元素不能在js直接操作,需要添加下标】</p>\n<ul>\n<li><strong>3.父级.getElementsByTagName(‘标签名’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li>获取结果是一种元素</li>\n<li><strong>4.document.getElementsClassName(‘Class名’);</strong></li>\n<li>获取元素下某个类型的标签</li>\n<li><p>获取结果是一种元素</p>\n</li>\n<li><p><strong>解：一组元素（元素集合，类数组）</strong></p>\n</li>\n<li><ol>\n<li>一组元素不能直接操作</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>一组元素哪怕只有一个，它也是一组元素。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>一组元素在操作的时候，可以使用下标。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>如果需要知道这组元素有几个，可以使用 length属性</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"if语法\"><a href=\"#if语法\" class=\"headerlink\" title=\"if语法\"></a>if语法</h2><blockquote>\n<p>一种操作下会有两种或者以上的执行结果，记得用判断。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件)&#123;</span><br><span class=\"line\">条件成立的时候需要执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件)&#123;</span><br><span class=\"line\">条件成立的时候需要执行的代码</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">条件不成立的时候需要执行代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件一)&#123;</span><br><span class=\"line\">条件一成立的时候需要执行的代码</span><br><span class=\"line\">&#125;else if(条件二)&#123;</span><br><span class=\"line\">条件二成立的时候需要执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....else&#123;</span><br><span class=\"line\">以上条件都不成立的时候执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【style提取的是行间样式，所以不建议大家直接使用style里的内容当作判断条件】</p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>逻辑运算符</li>\n<li>“==” 等于</li>\n<li>“!=” 不等于</li>\n<li>“&gt;=” 大于等于</li>\n<li>“&lt;=” 小于等于</li>\n<li>“&lt;” 小于</li>\n<li>“&lt;” 大于</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>为了能够更方便的描述和使用，程序通常会把要操作的数据，根据其特性，分成不同的类型进行操作。<br>在javascript中，数据一共可以分成如下七种类型：</p>\n<ol>\n<li><p>简单类型（值）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Number</span><br><span class=\"line\">由0-9组成的值，还有几个比较特殊的值</span><br><span class=\"line\">a. NaN -&gt;Not a Number</span><br><span class=\"line\">b. Infinity-&gt; 无穷的</span><br><span class=\"line\">2. String</span><br><span class=\"line\">由一对单引号或双引号包含的内容【单引号双引号需要成对】</span><br><span class=\"line\">3. Booleans</span><br><span class=\"line\">用来描述逻辑的真假的，这种类型有且仅有两个值</span><br><span class=\"line\">a. true 表示真</span><br><span class=\"line\">b. false 表示假</span><br><span class=\"line\">【js严格比较大小写字母】</span><br><span class=\"line\">var a = true;</span><br><span class=\"line\">a = !a;//a = false;</span><br><span class=\"line\">var a = false;</span><br><span class=\"line\">a = !a;//a = true;</span><br><span class=\"line\">4. Null</span><br><span class=\"line\">用来描述空值，这种类型有且仅有一个值【注意：当我们使用typeof的时候，返回的是‘object’】</span><br><span class=\"line\">5. Undefined</span><br><span class=\"line\">用来描述不存在的值，这种类型有且仅有一个值</span><br><span class=\"line\">6. Symbol</span><br><span class=\"line\">7. function()&#123;&#125; function函数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复杂类型（复合类型、引用类型）</p>\n</li>\n</ol>\n<ul>\n<li>object：由7种数据类型组合的类型，object中包含7种类型中的任意类型。</li>\n</ul>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ol>\n<li>var i = 0;</li>\n<li>i &lt; li.length;</li>\n<li>执行里面面的操作;</li>\n<li>i++;</li>\n</ol>\n<p><strong>易混解析：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; li.length; i++)&#123;</span><br><span class=\"line\">//循环在页面加载完成之后就执行了</span><br><span class=\"line\">li[i].onclick = function()&#123;</span><br><span class=\"line\">/*</span><br><span class=\"line\">*点击li时执行</span><br><span class=\"line\">*这会循环肯定已经执行完了，</span><br><span class=\"line\">*所以在获取i的时候，是循环执行完之后的结果</span><br><span class=\"line\">*/</span><br><span class=\"line\">alert(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><blockquote>\n<p>在事件函数中this代表触发当前事件的元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; li.length; i++) &#123;</span><br><span class=\"line\">li[i].onclick = function()&#123;</span><br><span class=\"line\">console.log(this,this.innerHTML);</span><br><span class=\"line\">//结果是&lt;span&gt;1111&lt;/span&gt;  1111</span><br><span class=\"line\">// 在事件函数中，this代表触发当前事件的元素</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总共有5张图片，src分别为1.jpg,2.jpg,3.jpg,4.jpg,5.jpg</span><br><span class=\"line\">点击 上一张 切换至 上一张图 如果已经是最开始1张 不做任何操作</span><br><span class=\"line\">点击 下一张 切换至 下一张图</span><br><span class=\"line\">如果已经是最后1张 不做任何操作</span><br></pre></td></tr></table></figure>"},{"title":"javascript(九)","date":"2019-03-21T08:43:54.000Z","_content":"## 运算符\n- 1.赋值运算符\n- =、+=、-=、*=、/=、%=\n- 2.算数运算符：运算符都只有数字运算的功能，所以在使用的时候，都会把其他类型专程数字。\n- \"+\"\n- 1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串\n- 2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。\n- \"-\"\n- \"*\"\n- \"/\"\n- \"%\"：取模等于求余数【任何数%n = (0 ~ n-1)】\n- ++\n- “--”\n- 注意：\n<!-- more -->\n\n```\nvar i = 0;\nalert(i++); //0\nalert(i); //1\n\nvar j = 0;\nj++;\nalert(j);//1\n```\n- 3.关系运算符\n- \"<\"、\">\"、\"<=\"、\">=\"、==、!=、===、\"!==\"\n- ->扩展：\n- == 和 \"===\"，以及!= 和!==的区别。\n- \"==\" 和 !=：会进行隐式类型转换，把左右两侧的数据类型转换成一个的之后，再去比较。\n- === 和!==：进行比较的时候，也会比较数据类型，数据类型不一样不会进行比较，则判定两边不相等。\n- 4.逻辑运算符\n- ||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。\n\n- &&：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；\n- ！：否、取反，把当前的值转换成布尔值，然后取反，返回的结果是布尔值\n```\n//条件成立，执行某件事\nvar a = 0;\nvar b = 2;\nfunction fn(){\nalert(1);\n}\n(a<b) && fn();\n\n//条件不成立，执行某件事\n(a > b)||fn();\nif(a > b) {\n\n} else {\nfn();\n}\n```\n\n- 5.三元运算符\n> 判断条件？成立执行的语句:不成立执行的语句\n\n- 条件成立返回：成立执行的结果\n- 条件不成立返回：不成立执行的结果 \n```\nvar a = 10;\nvar b = 12;\nvar c = a > b ? a:b;\n\n\neg:\nwindow.onload = function() {\nvar btn = document.querySelector('input');\nvar box = document.querySelector('#box');\nvar isHide = true;\nbtn.onclick = function(){\n/*if(isHide) {\nbox.style.display = \"block\";\n} else {\nbox.style.display = \"none\";\n}*/\n//box.style.display = isHide?\"block\":\"none\";\nisHide?box.style.display = \"block\":box.style.display = \"none\";\nisHide = !isHide;\n};\n};\n```\n- 6.运算符的优先级\n\n\n\n## 循环\n- continue 跳出==本次循环==（不能写到三元运算符中）\n```\nfor(var i = 0;i<5;i++){\nif(i==3){\ncontinue;//跳出本次循环\n}\nconsole.log(i);\n}\n```\n- break  终止==整个循环==\n```\nfor(var i = 0;i<5;i++){\nif(i==3){\nbreak;\n}\nconsole.log(i);\n}\n```\n- break 默认只会终止包着它的循环。\n```\nfor(var i = 0;i<5;i++){\nfor(var j=0;j<5;j++){\nif(i==3&&j==3){\nbreak;\n}\nconsole.log(i,j);\n}\n}\n\n//终止指定的for循环\nname:for(var i = 0;i<5;i++){\nfor(var j=0;j<5;j++){\nif(i==3&&j==3){\nbreak name;\n}\nconsole.log(i,j);\n}\n}\n```\n## 对象\n>是一种复杂类型的数据，在对象中我们可以存储任意类型的数据\n- 对象存储数据，是存在对象的属性中\n- ==对象是没有length这个值的==\n- 属性赋值：obj.key = value;\n- 属性操作：\n- 第一种方式：\n- 读操作：obj.属性名;\n- 写操作：ojb.属性名 = 属性值;\n- obj.key = value;//键值对\n- 第二种方式：\n- 读操作：obj[\"属性名\"];\n- 写操作：ojb[“属性值”] = 属性值;\n- obj[\"key\"] = value;//键值对\n\n**【注意：第二种操作方法[]写的是一个字符串，如果说我们的属性名想要存在变量中，只能用[]这种方式。】**\n```\nvar w = \"width\";\n//注意第一种属性操作是写死的一个值，不能使用变量obj.w，这么写就认为在找obj的属性\nconsole.log(obj.w);\n//第二种属性操作，接受的是一个字符串，字符串就可以存在变量中，可以直接写obj[变量调用]\nconsole.log(obj[w]);\n```\n## 循环\n### in运算符\n>判断这个对象中是否存在该属性，返回的是false或者是true；\n\n```\nvar obj = {};\nobj['name'] = \"Leo\";\nobj['age'] = 40;\nobj['gender'] = \"female\";\nobj['width'] = \"180px\";\nobj['height'] = \"180px\";\nobj['children'] = [\"大明\",\"小明\",\"三明\"];\n\nalert(\"name\" in obj); // obj 有 name属性就返回 true，否则 返回false\n\nfor (var s in obj) { //通过 in 方法，每次循环的时候把 循环变量s 变成obj对应属性名字 \nconsole.log(s,obj[s]);\n}\n```\n### for in：可以用来循环 对象和数组，不能用来循环一组元素。\n```\nvar arr = [1,4,23];\n/*\nfor in 可以用来循环 对象和数组,不能用来循环一组元素\nfor 只能用来循环 数组和类数组(一组元素)\n*/\nfor (var s in arr) { // 找到 arr上的所有属性,s会依次变成 arr的属性名\nconsole.log(s,arr[s]);// s的类型是字符串\n}\n```\n### for 只能用来循环 数组和类数组（一组元素）\n\n### while循环\n- 语法：\n```\nwhile(判断语句){\n执行语句;\n自增;\n}\n\nvar i = 0;\nwhile(i < 5){\nconsole.log(i);\ni++;\n}\n```\n\n### switch:\n- 语法：\n```\nvar a = 15;\nswitch(a) {\ncase 10: // 当 a == 10\nconsole.log(\"我想给大家放天假\");\nbreak; //a == 10的语句结束之后 添加break\ncase 15: // 当 a == 15\nconsole.log(\"当然我就是想想\");\nbreak;    \ncase 20: // 当 a == 20\nconsole.log(\"其实我真正想的是带大家出去玩\");\nbreak;\ndefault: //以上所有的判断都不成立\nconsole.log(\"还是写作业吧\");\n}\n```\n- 穿刺\n- 1.case成立会把他下边所有的代码都执行了，直到遇到break\n- 2.如果没写鞋break的话，就会形成穿刺现象，把下边所有的代码都执行了。\n","source":"_posts/javascript-九.md","raw":"---\ntitle: javascript(九)\ndate: 2019-03-21 16:43:54\ntags:\ncategories: JavaScript\n---\n## 运算符\n- 1.赋值运算符\n- =、+=、-=、*=、/=、%=\n- 2.算数运算符：运算符都只有数字运算的功能，所以在使用的时候，都会把其他类型专程数字。\n- \"+\"\n- 1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串\n- 2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。\n- \"-\"\n- \"*\"\n- \"/\"\n- \"%\"：取模等于求余数【任何数%n = (0 ~ n-1)】\n- ++\n- “--”\n- 注意：\n<!-- more -->\n\n```\nvar i = 0;\nalert(i++); //0\nalert(i); //1\n\nvar j = 0;\nj++;\nalert(j);//1\n```\n- 3.关系运算符\n- \"<\"、\">\"、\"<=\"、\">=\"、==、!=、===、\"!==\"\n- ->扩展：\n- == 和 \"===\"，以及!= 和!==的区别。\n- \"==\" 和 !=：会进行隐式类型转换，把左右两侧的数据类型转换成一个的之后，再去比较。\n- === 和!==：进行比较的时候，也会比较数据类型，数据类型不一样不会进行比较，则判定两边不相等。\n- 4.逻辑运算符\n- ||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。\n\n- &&：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；\n- ！：否、取反，把当前的值转换成布尔值，然后取反，返回的结果是布尔值\n```\n//条件成立，执行某件事\nvar a = 0;\nvar b = 2;\nfunction fn(){\nalert(1);\n}\n(a<b) && fn();\n\n//条件不成立，执行某件事\n(a > b)||fn();\nif(a > b) {\n\n} else {\nfn();\n}\n```\n\n- 5.三元运算符\n> 判断条件？成立执行的语句:不成立执行的语句\n\n- 条件成立返回：成立执行的结果\n- 条件不成立返回：不成立执行的结果 \n```\nvar a = 10;\nvar b = 12;\nvar c = a > b ? a:b;\n\n\neg:\nwindow.onload = function() {\nvar btn = document.querySelector('input');\nvar box = document.querySelector('#box');\nvar isHide = true;\nbtn.onclick = function(){\n/*if(isHide) {\nbox.style.display = \"block\";\n} else {\nbox.style.display = \"none\";\n}*/\n//box.style.display = isHide?\"block\":\"none\";\nisHide?box.style.display = \"block\":box.style.display = \"none\";\nisHide = !isHide;\n};\n};\n```\n- 6.运算符的优先级\n\n\n\n## 循环\n- continue 跳出==本次循环==（不能写到三元运算符中）\n```\nfor(var i = 0;i<5;i++){\nif(i==3){\ncontinue;//跳出本次循环\n}\nconsole.log(i);\n}\n```\n- break  终止==整个循环==\n```\nfor(var i = 0;i<5;i++){\nif(i==3){\nbreak;\n}\nconsole.log(i);\n}\n```\n- break 默认只会终止包着它的循环。\n```\nfor(var i = 0;i<5;i++){\nfor(var j=0;j<5;j++){\nif(i==3&&j==3){\nbreak;\n}\nconsole.log(i,j);\n}\n}\n\n//终止指定的for循环\nname:for(var i = 0;i<5;i++){\nfor(var j=0;j<5;j++){\nif(i==3&&j==3){\nbreak name;\n}\nconsole.log(i,j);\n}\n}\n```\n## 对象\n>是一种复杂类型的数据，在对象中我们可以存储任意类型的数据\n- 对象存储数据，是存在对象的属性中\n- ==对象是没有length这个值的==\n- 属性赋值：obj.key = value;\n- 属性操作：\n- 第一种方式：\n- 读操作：obj.属性名;\n- 写操作：ojb.属性名 = 属性值;\n- obj.key = value;//键值对\n- 第二种方式：\n- 读操作：obj[\"属性名\"];\n- 写操作：ojb[“属性值”] = 属性值;\n- obj[\"key\"] = value;//键值对\n\n**【注意：第二种操作方法[]写的是一个字符串，如果说我们的属性名想要存在变量中，只能用[]这种方式。】**\n```\nvar w = \"width\";\n//注意第一种属性操作是写死的一个值，不能使用变量obj.w，这么写就认为在找obj的属性\nconsole.log(obj.w);\n//第二种属性操作，接受的是一个字符串，字符串就可以存在变量中，可以直接写obj[变量调用]\nconsole.log(obj[w]);\n```\n## 循环\n### in运算符\n>判断这个对象中是否存在该属性，返回的是false或者是true；\n\n```\nvar obj = {};\nobj['name'] = \"Leo\";\nobj['age'] = 40;\nobj['gender'] = \"female\";\nobj['width'] = \"180px\";\nobj['height'] = \"180px\";\nobj['children'] = [\"大明\",\"小明\",\"三明\"];\n\nalert(\"name\" in obj); // obj 有 name属性就返回 true，否则 返回false\n\nfor (var s in obj) { //通过 in 方法，每次循环的时候把 循环变量s 变成obj对应属性名字 \nconsole.log(s,obj[s]);\n}\n```\n### for in：可以用来循环 对象和数组，不能用来循环一组元素。\n```\nvar arr = [1,4,23];\n/*\nfor in 可以用来循环 对象和数组,不能用来循环一组元素\nfor 只能用来循环 数组和类数组(一组元素)\n*/\nfor (var s in arr) { // 找到 arr上的所有属性,s会依次变成 arr的属性名\nconsole.log(s,arr[s]);// s的类型是字符串\n}\n```\n### for 只能用来循环 数组和类数组（一组元素）\n\n### while循环\n- 语法：\n```\nwhile(判断语句){\n执行语句;\n自增;\n}\n\nvar i = 0;\nwhile(i < 5){\nconsole.log(i);\ni++;\n}\n```\n\n### switch:\n- 语法：\n```\nvar a = 15;\nswitch(a) {\ncase 10: // 当 a == 10\nconsole.log(\"我想给大家放天假\");\nbreak; //a == 10的语句结束之后 添加break\ncase 15: // 当 a == 15\nconsole.log(\"当然我就是想想\");\nbreak;    \ncase 20: // 当 a == 20\nconsole.log(\"其实我真正想的是带大家出去玩\");\nbreak;\ndefault: //以上所有的判断都不成立\nconsole.log(\"还是写作业吧\");\n}\n```\n- 穿刺\n- 1.case成立会把他下边所有的代码都执行了，直到遇到break\n- 2.如果没写鞋break的话，就会形成穿刺现象，把下边所有的代码都执行了。\n","slug":"javascript-九","published":1,"updated":"2019-05-28T09:55:16.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymg000efw049t1u0y62","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>1.赋值运算符</li>\n<li>=、+=、-=、*=、/=、%=</li>\n<li>2.算数运算符：运算符都只有数字运算的功能，所以在使用的时候，都会把其他类型专程数字。</li>\n<li>“+”</li>\n<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>\n<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>\n<li>“-“</li>\n<li>“*”</li>\n<li>“/“</li>\n<li>“%”：取模等于求余数【任何数%n = (0 ~ n-1)】</li>\n<li>++</li>\n<li>“–”</li>\n<li>注意：<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0;</span><br><span class=\"line\">alert(i++); //0</span><br><span class=\"line\">alert(i); //1</span><br><span class=\"line\"></span><br><span class=\"line\">var j = 0;</span><br><span class=\"line\">j++;</span><br><span class=\"line\">alert(j);//1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.关系运算符</li>\n<li>“&lt;”、”&gt;”、”&lt;=”、”&gt;=”、==、!=、===、”!==”</li>\n<li>-&gt;扩展：</li>\n<li>== 和 “===”，以及!= 和!==的区别。</li>\n<li>“==” 和 !=：会进行隐式类型转换，把左右两侧的数据类型转换成一个的之后，再去比较。</li>\n<li>=== 和!==：进行比较的时候，也会比较数据类型，数据类型不一样不会进行比较，则判定两边不相等。</li>\n<li>4.逻辑运算符</li>\n<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>\n</li>\n<li><p>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</p>\n</li>\n<li><p>！：否、取反，把当前的值转换成布尔值，然后取反，返回的结果是布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//条件成立，执行某件事</span><br><span class=\"line\">var a = 0;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(a&lt;b) &amp;&amp; fn();</span><br><span class=\"line\"></span><br><span class=\"line\">//条件不成立，执行某件事</span><br><span class=\"line\">(a &gt; b)||fn();</span><br><span class=\"line\">if(a &gt; b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.三元运算符</p>\n<blockquote>\n<p>判断条件？成立执行的语句:不成立执行的语句</p>\n</blockquote>\n</li>\n<li><p>条件成立返回：成立执行的结果</p>\n</li>\n<li><p>条件不成立返回：不成立执行的结果 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">var b = 12;</span><br><span class=\"line\">var c = a &gt; b ? a:b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var btn = document.querySelector(&apos;input&apos;);</span><br><span class=\"line\">var box = document.querySelector(&apos;#box&apos;);</span><br><span class=\"line\">var isHide = true;</span><br><span class=\"line\">btn.onclick = function()&#123;</span><br><span class=\"line\">/*if(isHide) &#123;</span><br><span class=\"line\">box.style.display = &quot;block&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">box.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">//box.style.display = isHide?&quot;block&quot;:&quot;none&quot;;</span><br><span class=\"line\">isHide?box.style.display = &quot;block&quot;:box.style.display = &quot;none&quot;;</span><br><span class=\"line\">isHide = !isHide;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.运算符的优先级</p>\n</li>\n</ul>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><ul>\n<li><p>continue 跳出==本次循环==（不能写到三元运算符中）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">if(i==3)&#123;</span><br><span class=\"line\">continue;//跳出本次循环</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break  终止==整个循环==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">if(i==3)&#123;</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break 默认只会终止包着它的循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">for(var j=0;j&lt;5;j++)&#123;</span><br><span class=\"line\">if(i==3&amp;&amp;j==3)&#123;</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//终止指定的for循环</span><br><span class=\"line\">name:for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">for(var j=0;j&lt;5;j++)&#123;</span><br><span class=\"line\">if(i==3&amp;&amp;j==3)&#123;</span><br><span class=\"line\">break name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><blockquote>\n<p>是一种复杂类型的数据，在对象中我们可以存储任意类型的数据</p>\n<ul>\n<li>对象存储数据，是存在对象的属性中</li>\n<li>==对象是没有length这个值的==</li>\n<li>属性赋值：obj.key = value;</li>\n<li>属性操作：</li>\n<li>第一种方式：</li>\n<li>读操作：obj.属性名;</li>\n<li>写操作：ojb.属性名 = 属性值;</li>\n<li>obj.key = value;//键值对</li>\n<li>第二种方式：</li>\n<li>读操作：obj[“属性名”];</li>\n<li>写操作：ojb[“属性值”] = 属性值;</li>\n<li>obj[“key”] = value;//键值对</li>\n</ul>\n</blockquote>\n<p><strong>【注意：第二种操作方法[]写的是一个字符串，如果说我们的属性名想要存在变量中，只能用[]这种方式。】</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var w = &quot;width&quot;;</span><br><span class=\"line\">//注意第一种属性操作是写死的一个值，不能使用变量obj.w，这么写就认为在找obj的属性</span><br><span class=\"line\">console.log(obj.w);</span><br><span class=\"line\">//第二种属性操作，接受的是一个字符串，字符串就可以存在变量中，可以直接写obj[变量调用]</span><br><span class=\"line\">console.log(obj[w]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"循环-1\"><a href=\"#循环-1\" class=\"headerlink\" title=\"循环\"></a>循环</h2><h3 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h3><blockquote>\n<p>判断这个对象中是否存在该属性，返回的是false或者是true；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">obj[&apos;name&apos;] = &quot;Leo&quot;;</span><br><span class=\"line\">obj[&apos;age&apos;] = 40;</span><br><span class=\"line\">obj[&apos;gender&apos;] = &quot;female&quot;;</span><br><span class=\"line\">obj[&apos;width&apos;] = &quot;180px&quot;;</span><br><span class=\"line\">obj[&apos;height&apos;] = &quot;180px&quot;;</span><br><span class=\"line\">obj[&apos;children&apos;] = [&quot;大明&quot;,&quot;小明&quot;,&quot;三明&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&quot;name&quot; in obj); // obj 有 name属性就返回 true，否则 返回false</span><br><span class=\"line\"></span><br><span class=\"line\">for (var s in obj) &#123; //通过 in 方法，每次循环的时候把 循环变量s 变成obj对应属性名字 </span><br><span class=\"line\">console.log(s,obj[s]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-in：可以用来循环-对象和数组，不能用来循环一组元素。\"><a href=\"#for-in：可以用来循环-对象和数组，不能用来循环一组元素。\" class=\"headerlink\" title=\"for in：可以用来循环 对象和数组，不能用来循环一组元素。\"></a>for in：可以用来循环 对象和数组，不能用来循环一组元素。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,4,23];</span><br><span class=\"line\">/*</span><br><span class=\"line\">for in 可以用来循环 对象和数组,不能用来循环一组元素</span><br><span class=\"line\">for 只能用来循环 数组和类数组(一组元素)</span><br><span class=\"line\">*/</span><br><span class=\"line\">for (var s in arr) &#123; // 找到 arr上的所有属性,s会依次变成 arr的属性名</span><br><span class=\"line\">console.log(s,arr[s]);// s的类型是字符串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-只能用来循环-数组和类数组（一组元素）\"><a href=\"#for-只能用来循环-数组和类数组（一组元素）\" class=\"headerlink\" title=\"for 只能用来循环 数组和类数组（一组元素）\"></a>for 只能用来循环 数组和类数组（一组元素）</h3><h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><ul>\n<li>语法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(判断语句)&#123;</span><br><span class=\"line\">执行语句;</span><br><span class=\"line\">自增;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">while(i &lt; 5)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch:\"></a>switch:</h3><ul>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 15;</span><br><span class=\"line\">switch(a) &#123;</span><br><span class=\"line\">case 10: // 当 a == 10</span><br><span class=\"line\">console.log(&quot;我想给大家放天假&quot;);</span><br><span class=\"line\">break; //a == 10的语句结束之后 添加break</span><br><span class=\"line\">case 15: // 当 a == 15</span><br><span class=\"line\">console.log(&quot;当然我就是想想&quot;);</span><br><span class=\"line\">break;    </span><br><span class=\"line\">case 20: // 当 a == 20</span><br><span class=\"line\">console.log(&quot;其实我真正想的是带大家出去玩&quot;);</span><br><span class=\"line\">break;</span><br><span class=\"line\">default: //以上所有的判断都不成立</span><br><span class=\"line\">console.log(&quot;还是写作业吧&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>穿刺</p>\n</li>\n<li>1.case成立会把他下边所有的代码都执行了，直到遇到break</li>\n<li>2.如果没写鞋break的话，就会形成穿刺现象，把下边所有的代码都执行了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>1.赋值运算符</li>\n<li>=、+=、-=、*=、/=、%=</li>\n<li>2.算数运算符：运算符都只有数字运算的功能，所以在使用的时候，都会把其他类型专程数字。</li>\n<li>“+”</li>\n<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>\n<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>\n<li>“-“</li>\n<li>“*”</li>\n<li>“/“</li>\n<li>“%”：取模等于求余数【任何数%n = (0 ~ n-1)】</li>\n<li>++</li>\n<li>“–”</li>\n<li>注意：","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 0;</span><br><span class=\"line\">alert(i++); //0</span><br><span class=\"line\">alert(i); //1</span><br><span class=\"line\"></span><br><span class=\"line\">var j = 0;</span><br><span class=\"line\">j++;</span><br><span class=\"line\">alert(j);//1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.关系运算符</li>\n<li>“&lt;”、”&gt;”、”&lt;=”、”&gt;=”、==、!=、===、”!==”</li>\n<li>-&gt;扩展：</li>\n<li>== 和 “===”，以及!= 和!==的区别。</li>\n<li>“==” 和 !=：会进行隐式类型转换，把左右两侧的数据类型转换成一个的之后，再去比较。</li>\n<li>=== 和!==：进行比较的时候，也会比较数据类型，数据类型不一样不会进行比较，则判定两边不相等。</li>\n<li>4.逻辑运算符</li>\n<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>\n</li>\n<li><p>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</p>\n</li>\n<li><p>！：否、取反，把当前的值转换成布尔值，然后取反，返回的结果是布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//条件成立，执行某件事</span><br><span class=\"line\">var a = 0;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(a&lt;b) &amp;&amp; fn();</span><br><span class=\"line\"></span><br><span class=\"line\">//条件不成立，执行某件事</span><br><span class=\"line\">(a &gt; b)||fn();</span><br><span class=\"line\">if(a &gt; b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.三元运算符</p>\n<blockquote>\n<p>判断条件？成立执行的语句:不成立执行的语句</p>\n</blockquote>\n</li>\n<li><p>条件成立返回：成立执行的结果</p>\n</li>\n<li><p>条件不成立返回：不成立执行的结果 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">var b = 12;</span><br><span class=\"line\">var c = a &gt; b ? a:b;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var btn = document.querySelector(&apos;input&apos;);</span><br><span class=\"line\">var box = document.querySelector(&apos;#box&apos;);</span><br><span class=\"line\">var isHide = true;</span><br><span class=\"line\">btn.onclick = function()&#123;</span><br><span class=\"line\">/*if(isHide) &#123;</span><br><span class=\"line\">box.style.display = &quot;block&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">box.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">//box.style.display = isHide?&quot;block&quot;:&quot;none&quot;;</span><br><span class=\"line\">isHide?box.style.display = &quot;block&quot;:box.style.display = &quot;none&quot;;</span><br><span class=\"line\">isHide = !isHide;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.运算符的优先级</p>\n</li>\n</ul>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><ul>\n<li><p>continue 跳出==本次循环==（不能写到三元运算符中）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">if(i==3)&#123;</span><br><span class=\"line\">continue;//跳出本次循环</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break  终止==整个循环==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">if(i==3)&#123;</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break 默认只会终止包着它的循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">for(var j=0;j&lt;5;j++)&#123;</span><br><span class=\"line\">if(i==3&amp;&amp;j==3)&#123;</span><br><span class=\"line\">break;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//终止指定的for循环</span><br><span class=\"line\">name:for(var i = 0;i&lt;5;i++)&#123;</span><br><span class=\"line\">for(var j=0;j&lt;5;j++)&#123;</span><br><span class=\"line\">if(i==3&amp;&amp;j==3)&#123;</span><br><span class=\"line\">break name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i,j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><blockquote>\n<p>是一种复杂类型的数据，在对象中我们可以存储任意类型的数据</p>\n<ul>\n<li>对象存储数据，是存在对象的属性中</li>\n<li>==对象是没有length这个值的==</li>\n<li>属性赋值：obj.key = value;</li>\n<li>属性操作：</li>\n<li>第一种方式：</li>\n<li>读操作：obj.属性名;</li>\n<li>写操作：ojb.属性名 = 属性值;</li>\n<li>obj.key = value;//键值对</li>\n<li>第二种方式：</li>\n<li>读操作：obj[“属性名”];</li>\n<li>写操作：ojb[“属性值”] = 属性值;</li>\n<li>obj[“key”] = value;//键值对</li>\n</ul>\n</blockquote>\n<p><strong>【注意：第二种操作方法[]写的是一个字符串，如果说我们的属性名想要存在变量中，只能用[]这种方式。】</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var w = &quot;width&quot;;</span><br><span class=\"line\">//注意第一种属性操作是写死的一个值，不能使用变量obj.w，这么写就认为在找obj的属性</span><br><span class=\"line\">console.log(obj.w);</span><br><span class=\"line\">//第二种属性操作，接受的是一个字符串，字符串就可以存在变量中，可以直接写obj[变量调用]</span><br><span class=\"line\">console.log(obj[w]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"循环-1\"><a href=\"#循环-1\" class=\"headerlink\" title=\"循环\"></a>循环</h2><h3 id=\"in运算符\"><a href=\"#in运算符\" class=\"headerlink\" title=\"in运算符\"></a>in运算符</h3><blockquote>\n<p>判断这个对象中是否存在该属性，返回的是false或者是true；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">obj[&apos;name&apos;] = &quot;Leo&quot;;</span><br><span class=\"line\">obj[&apos;age&apos;] = 40;</span><br><span class=\"line\">obj[&apos;gender&apos;] = &quot;female&quot;;</span><br><span class=\"line\">obj[&apos;width&apos;] = &quot;180px&quot;;</span><br><span class=\"line\">obj[&apos;height&apos;] = &quot;180px&quot;;</span><br><span class=\"line\">obj[&apos;children&apos;] = [&quot;大明&quot;,&quot;小明&quot;,&quot;三明&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&quot;name&quot; in obj); // obj 有 name属性就返回 true，否则 返回false</span><br><span class=\"line\"></span><br><span class=\"line\">for (var s in obj) &#123; //通过 in 方法，每次循环的时候把 循环变量s 变成obj对应属性名字 </span><br><span class=\"line\">console.log(s,obj[s]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-in：可以用来循环-对象和数组，不能用来循环一组元素。\"><a href=\"#for-in：可以用来循环-对象和数组，不能用来循环一组元素。\" class=\"headerlink\" title=\"for in：可以用来循环 对象和数组，不能用来循环一组元素。\"></a>for in：可以用来循环 对象和数组，不能用来循环一组元素。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,4,23];</span><br><span class=\"line\">/*</span><br><span class=\"line\">for in 可以用来循环 对象和数组,不能用来循环一组元素</span><br><span class=\"line\">for 只能用来循环 数组和类数组(一组元素)</span><br><span class=\"line\">*/</span><br><span class=\"line\">for (var s in arr) &#123; // 找到 arr上的所有属性,s会依次变成 arr的属性名</span><br><span class=\"line\">console.log(s,arr[s]);// s的类型是字符串</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"for-只能用来循环-数组和类数组（一组元素）\"><a href=\"#for-只能用来循环-数组和类数组（一组元素）\" class=\"headerlink\" title=\"for 只能用来循环 数组和类数组（一组元素）\"></a>for 只能用来循环 数组和类数组（一组元素）</h3><h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><ul>\n<li>语法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(判断语句)&#123;</span><br><span class=\"line\">执行语句;</span><br><span class=\"line\">自增;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">while(i &lt; 5)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">i++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch:\"></a>switch:</h3><ul>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 15;</span><br><span class=\"line\">switch(a) &#123;</span><br><span class=\"line\">case 10: // 当 a == 10</span><br><span class=\"line\">console.log(&quot;我想给大家放天假&quot;);</span><br><span class=\"line\">break; //a == 10的语句结束之后 添加break</span><br><span class=\"line\">case 15: // 当 a == 15</span><br><span class=\"line\">console.log(&quot;当然我就是想想&quot;);</span><br><span class=\"line\">break;    </span><br><span class=\"line\">case 20: // 当 a == 20</span><br><span class=\"line\">console.log(&quot;其实我真正想的是带大家出去玩&quot;);</span><br><span class=\"line\">break;</span><br><span class=\"line\">default: //以上所有的判断都不成立</span><br><span class=\"line\">console.log(&quot;还是写作业吧&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>穿刺</p>\n</li>\n<li>1.case成立会把他下边所有的代码都执行了，直到遇到break</li>\n<li>2.如果没写鞋break的话，就会形成穿刺现象，把下边所有的代码都执行了。</li>\n</ul>"},{"title":"javascript(五)","date":"2019-03-21T08:43:50.000Z","_content":"## for循环\n- 什么时候使用for循环？\n- 当我们需要同时处理一组数据得时候，就需要使用循环\n- 需要什么？\n1. 起始值\n2. 判断条件\n3. 执行语句\n4. 自增\n- 写法：\n<!-- more -->\n\n```\nfor(var i = 0;i<10;i++){\nconsole.log(i);\n}\n\n\nvar i = 0;//i是一个数字变量,循环变量\nfor(i;i<5;i++){\nconsole.log(i);\n}\n```\n- 当变量的判断条件永远成立得时候，这个循环就会变成一个死循环。\n- 循环变量再for循环结束之后一样调用，不过调用得值是for循环不符合条件之后得值。\n- 当判断条件不成立时，循环就结束了。\n\n## this\n- 在事件函数中this代表触发当前事件的元素。\n- 在所有非事件函数中this指向window。\n- 谁调用这个函数，this就指向谁。\n- 函数执行的时候都属于window调用\n\n## 思路解析\n1. 点击当前div，删除其他div的颜色，给当前点击元素换背景。\n- 1.全部清空法：\n```\n当我们在事件中需要知道当前事件的这个元素是一组中的第几个的时候，添加索引值。\n```\n- 2.索引\n2. V字形生成思路\n```\n1.获取外面的盒子\n2.点击事件\n3.生成五个div\n4.写变量l,t,w,h,\n5.判断他是先自增还是先自减\n6.设置dis值是正负\n7.判断拐点。\n9.inner+= 赋值\n10.innerHTML 赋值。\n11.设置top和left值。\n```\n\n","source":"_posts/javascript-五.md","raw":"---\ntitle: javascript(五)\ndate: 2019-03-21 16:43:50\ntags:\ncategories: JavaScript\n---\n## for循环\n- 什么时候使用for循环？\n- 当我们需要同时处理一组数据得时候，就需要使用循环\n- 需要什么？\n1. 起始值\n2. 判断条件\n3. 执行语句\n4. 自增\n- 写法：\n<!-- more -->\n\n```\nfor(var i = 0;i<10;i++){\nconsole.log(i);\n}\n\n\nvar i = 0;//i是一个数字变量,循环变量\nfor(i;i<5;i++){\nconsole.log(i);\n}\n```\n- 当变量的判断条件永远成立得时候，这个循环就会变成一个死循环。\n- 循环变量再for循环结束之后一样调用，不过调用得值是for循环不符合条件之后得值。\n- 当判断条件不成立时，循环就结束了。\n\n## this\n- 在事件函数中this代表触发当前事件的元素。\n- 在所有非事件函数中this指向window。\n- 谁调用这个函数，this就指向谁。\n- 函数执行的时候都属于window调用\n\n## 思路解析\n1. 点击当前div，删除其他div的颜色，给当前点击元素换背景。\n- 1.全部清空法：\n```\n当我们在事件中需要知道当前事件的这个元素是一组中的第几个的时候，添加索引值。\n```\n- 2.索引\n2. V字形生成思路\n```\n1.获取外面的盒子\n2.点击事件\n3.生成五个div\n4.写变量l,t,w,h,\n5.判断他是先自增还是先自减\n6.设置dis值是正负\n7.判断拐点。\n9.inner+= 赋值\n10.innerHTML 赋值。\n11.设置top和left值。\n```\n\n","slug":"javascript-五","published":1,"updated":"2019-05-28T09:56:14.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymh000hfw04eyi2v8u8","content":"<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ul>\n<li>什么时候使用for循环？</li>\n<li>当我们需要同时处理一组数据得时候，就需要使用循环</li>\n<li>需要什么？</li>\n</ul>\n<ol>\n<li>起始值</li>\n<li>判断条件</li>\n<li>执行语句</li>\n<li>自增</li>\n</ol>\n<ul>\n<li>写法：<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var i = 0;//i是一个数字变量,循环变量</span><br><span class=\"line\">for(i;i&lt;5;i++)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当变量的判断条件永远成立得时候，这个循环就会变成一个死循环。</li>\n<li>循环变量再for循环结束之后一样调用，不过调用得值是for循环不符合条件之后得值。</li>\n<li>当判断条件不成立时，循环就结束了。</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li>在事件函数中this代表触发当前事件的元素。</li>\n<li>在所有非事件函数中this指向window。</li>\n<li>谁调用这个函数，this就指向谁。</li>\n<li>函数执行的时候都属于window调用</li>\n</ul>\n<h2 id=\"思路解析\"><a href=\"#思路解析\" class=\"headerlink\" title=\"思路解析\"></a>思路解析</h2><ol>\n<li>点击当前div，删除其他div的颜色，给当前点击元素换背景。</li>\n</ol>\n<ul>\n<li><p>1.全部清空法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在事件中需要知道当前事件的这个元素是一组中的第几个的时候，添加索引值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.索引</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>V字形生成思路<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.获取外面的盒子</span><br><span class=\"line\">2.点击事件</span><br><span class=\"line\">3.生成五个div</span><br><span class=\"line\">4.写变量l,t,w,h,</span><br><span class=\"line\">5.判断他是先自增还是先自减</span><br><span class=\"line\">6.设置dis值是正负</span><br><span class=\"line\">7.判断拐点。</span><br><span class=\"line\">9.inner+= 赋值</span><br><span class=\"line\">10.innerHTML 赋值。</span><br><span class=\"line\">11.设置top和left值。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ul>\n<li>什么时候使用for循环？</li>\n<li>当我们需要同时处理一组数据得时候，就需要使用循环</li>\n<li>需要什么？</li>\n</ul>\n<ol>\n<li>起始值</li>\n<li>判断条件</li>\n<li>执行语句</li>\n<li>自增</li>\n</ol>\n<ul>\n<li>写法：","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;10;i++)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var i = 0;//i是一个数字变量,循环变量</span><br><span class=\"line\">for(i;i&lt;5;i++)&#123;</span><br><span class=\"line\">console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当变量的判断条件永远成立得时候，这个循环就会变成一个死循环。</li>\n<li>循环变量再for循环结束之后一样调用，不过调用得值是for循环不符合条件之后得值。</li>\n<li>当判断条件不成立时，循环就结束了。</li>\n</ul>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><ul>\n<li>在事件函数中this代表触发当前事件的元素。</li>\n<li>在所有非事件函数中this指向window。</li>\n<li>谁调用这个函数，this就指向谁。</li>\n<li>函数执行的时候都属于window调用</li>\n</ul>\n<h2 id=\"思路解析\"><a href=\"#思路解析\" class=\"headerlink\" title=\"思路解析\"></a>思路解析</h2><ol>\n<li>点击当前div，删除其他div的颜色，给当前点击元素换背景。</li>\n</ol>\n<ul>\n<li><p>1.全部清空法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当我们在事件中需要知道当前事件的这个元素是一组中的第几个的时候，添加索引值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.索引</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>V字形生成思路<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.获取外面的盒子</span><br><span class=\"line\">2.点击事件</span><br><span class=\"line\">3.生成五个div</span><br><span class=\"line\">4.写变量l,t,w,h,</span><br><span class=\"line\">5.判断他是先自增还是先自减</span><br><span class=\"line\">6.设置dis值是正负</span><br><span class=\"line\">7.判断拐点。</span><br><span class=\"line\">9.inner+= 赋值</span><br><span class=\"line\">10.innerHTML 赋值。</span><br><span class=\"line\">11.设置top和left值。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"javascript(八)","date":"2019-03-21T08:43:53.000Z","_content":"## ECMAScript\n## 数据类型划分\n#### 1、标准指定的类型划分：\n- 基本类型：\n- 1.number（数字）\n- 2.string（字符串）\n- 3.undefined（未定义）\n- 4.boolean（布尔值）\n- 5.null（空对象）找不到对象，对象未定义。与非空对象最大区别在于是否能进行属性操作。\n<!-- more -->\n\n- 对象类型（复合类型）：object(对象)，包含Array;\n#### 2、typeof的方式划分\n>typeof是一种运算符，用来查看类型。\n- 1.number:【从负无穷到正无穷的数字及NaN=》not a Number】\n- Number.POSITIVE_INFINITY 正无穷\n- Number.NEGATIVE_INFINITY 负无穷\n- 2.string:【字符串，任何包含在引号中的一串字符，都属于字符串】\n- 3.boolean:【true或false两种值，布尔值】\n- 4.object:数组、null、元素对象(Element)、object【注意：空数组不等同于空对象，因为空数组可以进行操作，空对象不能进行属性操作】\n```\nconsole.log(null == arr);\n```\n- 5.function:函数类型\n- 6.undefined：未定义。\n- 7.NaN：非数字 not a number [类型是number]\n- 1.NaN不等于任何东西，并且不等于它自己。\n- 2.检测一个内容是否是NaN的时候，可以使用isNaN();\n- 3.数据类型：number;\n- 4.NaN不能用来做比较。\n- 5.isNaN(要检测的内容) return:true/false,isNaN 隐式调用的是Number。\n- 如果转化结果是一个数字就返回false\n- 如果不是一个数字就返回true\n- isNaN会进行隐式类型转换，转换所调用的方法是Number\n```\nvar a = Number(\"10px\");//NaN\nvar b = Number(\"10px\");//NaN\n//alert(a == b);// false\nalert(isNaN(\"$30.2\"))//true;\n```\n\n\n## 调试：\n- console.log();//只是打印出一个元素或值等。\n- console.dir();//打印对象。\n\n\n## 数据类型的转换。\n- 强制类型转换，或者显示类型转换。\n- 字符串转换数字（强制）：\n- 1.parseInt:取整 (要转换的数字,传进来的数字的进制值)\n>从左向右一位一位去查看，如果遇到一位是非数字的，结束执行，把这位之前的数字返回\n\n- 2.parseFloat：转换成小数 (转换为浮点数)\n>从左向右一位一位的匹配，直到遇到一个非数字（可以匹配一个小数点）就返回这位前边的数字\n\n- 3.Number(要转换的数字)\n>从左向右看完所有的字符，如果完全符合数字的规则就转换，如果不符合数字的规则就返回NaN\n\n- 【注意：关于数组：】\n- 1.空数组转为0；（Number转的方式）\n- 2.数组只有一位的时候，会用这位(代表他本身)去转换，并且只转换数字和字符串为数字的，其他的都是NaN\n- 3.数组有多位的时候，只会被转换为NaN\n\n```\nvar num = false;//true = 1;false = 0;\nvar nub;//NaN（undefined）;\nvar nub = null //0;\nvar nub = document; //NaN;\nvar nub = [];//0;\nvar nub = [0];//0;\nvar nub = [10];//10\nvar nub = [10,2];//NaN\nvar nub = ['aaa'] //NaN\nvar nub = ['10']//10\nvar nub = function(){}//NaN\nvar nub = undefined;//NaN\nnub = Number(nub);\n```\n- 强制转成字符串\n- toString();【要转换的内容.toString】\n```\nvar a = 123;\na = a.toString(); //将数字123专为字符串类型\nconsole.log(a,typeof a);123 string;\nvar b = ['','2'];\nb = b.toString();\nconsole.log(b,typeof b);//,2 string\n```\n- String(要转换的内容)\n- 强制转成布尔值\nBoolean（要转换的内容）\n- 真：true,非空字符串，非0数字，非空对象。\n- 假：false，空字符串，0，NaN，null，undefined\n```\n!取反\nalert(!\"21323\");//false\nalert(Boolean(123));//true    \n```\n\n```\nvar a;\nif(a){\nalert(\"真\");\n} else {\nalert(\"假\");\n}\n```\n\n\n- 隐式类型转换\n>浏览器自己进行转换，其他类型转换成数字，主要调取Number\n\n- \"+、+=\"：\n- 1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串\n- 2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。\n- \"-\"、\"*\"、\"/\"、\"%\"、\"-=\"、\"*=\"、\"/=\"、\"%=\"：运算符左右两侧转换成数字进行运算：\n\n```\nconsole.log(null + false,0 + function(){});//0 \"0function(){}\"\nvar nub = \"20px\";//NaN\nvar nub2 = \"30px\";//NaN\nconsole.log(nub/nub2);//NaN\n```\n\n\n\n## 运算符\n- 关系运算符： || 、 && 、！\n- ||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。\n\n- &&：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；\n\n```\n//条件成立，执行某件事\nvar a = 0;\nvar b = 2;\nfunction fn(){\nalert(1);\n}\n(a<b) && fn();\n\n//条件不成立，执行某件事\n(a > b)||fn();\nif(a > b) {\n\n} else {\nfn();\n}\n```\n\n\n## 讲解剖析 【找出数组中最大的值】\n```\nvar arr = [123,1,324,1233,20,-32,100];//定义一个数组\nvar max = 0;//给一个最初比较的值\n/*\n在这里，max可以设置成负无穷,以下是常量。\nNumber.POSITIVE_INFINITY 正无穷\nNumber.NEGATIVE_INFINITY 负无穷\n*/\n//循环数组\nfor(var i = 0; i < arr.length; i++){\n//如果max小于arr[i],说明arr[i]比max大，所以把它的值赋给max。\nif(max < arr[i]){\nmax = arr[i];\n}\n//返回最大的【也可直接用这种方式】\n//max = Math.max(max,arr[i]);\n}\nalert(max);\n```\n\n## 讲解剖析【取模】\n```\nvar list = document.querySelector('.list');\nvar colors = [\"red\",\"yellow\",\"blue\",\"green\",\"pink\"];\nvar inner = \"\";\n// red blue yellow\nfor(var i = 0; i < 20; i++){\n/*第一种方式，比较笨*/\n/*if(i%3 == 0){\ninner += '<li style=\"background:red\">'+i+'</li>';\n} else if(i%3 == 1) {\ninner += '<li style=\"background:blue\">'+i+'</li>';\n} else if(i%3 == 2) {\ninner += '<li style=\"background:yellow\">'+i+'</li>';\n}*/\n/*第二种方式，不会有颜色多少的限制，可扩展性比较好，代码量少*/\ninner += '<li style=\"background:'+colors[i%colors.length]+'\">'+i+'</li>';\n}\nlist.innerHTML = inner;\n```\n\n## 讲解剖析【复选框】\n- 复选框样式控制选中用==checked==。\n- 改变事件用==onchange==;\n```\nvar input = document.querySelectorAll('input');\nfor(var i = 0; i < input.length; i++){\ninput[i].onchange = function(){\nconsole.log(this.checked);\n};\n}\n```\n","source":"_posts/javascript-八.md","raw":"---\ntitle: javascript(八)\ndate: 2019-03-21 16:43:53\ntags:\ncategories: JavaScript\n---\n## ECMAScript\n## 数据类型划分\n#### 1、标准指定的类型划分：\n- 基本类型：\n- 1.number（数字）\n- 2.string（字符串）\n- 3.undefined（未定义）\n- 4.boolean（布尔值）\n- 5.null（空对象）找不到对象，对象未定义。与非空对象最大区别在于是否能进行属性操作。\n<!-- more -->\n\n- 对象类型（复合类型）：object(对象)，包含Array;\n#### 2、typeof的方式划分\n>typeof是一种运算符，用来查看类型。\n- 1.number:【从负无穷到正无穷的数字及NaN=》not a Number】\n- Number.POSITIVE_INFINITY 正无穷\n- Number.NEGATIVE_INFINITY 负无穷\n- 2.string:【字符串，任何包含在引号中的一串字符，都属于字符串】\n- 3.boolean:【true或false两种值，布尔值】\n- 4.object:数组、null、元素对象(Element)、object【注意：空数组不等同于空对象，因为空数组可以进行操作，空对象不能进行属性操作】\n```\nconsole.log(null == arr);\n```\n- 5.function:函数类型\n- 6.undefined：未定义。\n- 7.NaN：非数字 not a number [类型是number]\n- 1.NaN不等于任何东西，并且不等于它自己。\n- 2.检测一个内容是否是NaN的时候，可以使用isNaN();\n- 3.数据类型：number;\n- 4.NaN不能用来做比较。\n- 5.isNaN(要检测的内容) return:true/false,isNaN 隐式调用的是Number。\n- 如果转化结果是一个数字就返回false\n- 如果不是一个数字就返回true\n- isNaN会进行隐式类型转换，转换所调用的方法是Number\n```\nvar a = Number(\"10px\");//NaN\nvar b = Number(\"10px\");//NaN\n//alert(a == b);// false\nalert(isNaN(\"$30.2\"))//true;\n```\n\n\n## 调试：\n- console.log();//只是打印出一个元素或值等。\n- console.dir();//打印对象。\n\n\n## 数据类型的转换。\n- 强制类型转换，或者显示类型转换。\n- 字符串转换数字（强制）：\n- 1.parseInt:取整 (要转换的数字,传进来的数字的进制值)\n>从左向右一位一位去查看，如果遇到一位是非数字的，结束执行，把这位之前的数字返回\n\n- 2.parseFloat：转换成小数 (转换为浮点数)\n>从左向右一位一位的匹配，直到遇到一个非数字（可以匹配一个小数点）就返回这位前边的数字\n\n- 3.Number(要转换的数字)\n>从左向右看完所有的字符，如果完全符合数字的规则就转换，如果不符合数字的规则就返回NaN\n\n- 【注意：关于数组：】\n- 1.空数组转为0；（Number转的方式）\n- 2.数组只有一位的时候，会用这位(代表他本身)去转换，并且只转换数字和字符串为数字的，其他的都是NaN\n- 3.数组有多位的时候，只会被转换为NaN\n\n```\nvar num = false;//true = 1;false = 0;\nvar nub;//NaN（undefined）;\nvar nub = null //0;\nvar nub = document; //NaN;\nvar nub = [];//0;\nvar nub = [0];//0;\nvar nub = [10];//10\nvar nub = [10,2];//NaN\nvar nub = ['aaa'] //NaN\nvar nub = ['10']//10\nvar nub = function(){}//NaN\nvar nub = undefined;//NaN\nnub = Number(nub);\n```\n- 强制转成字符串\n- toString();【要转换的内容.toString】\n```\nvar a = 123;\na = a.toString(); //将数字123专为字符串类型\nconsole.log(a,typeof a);123 string;\nvar b = ['','2'];\nb = b.toString();\nconsole.log(b,typeof b);//,2 string\n```\n- String(要转换的内容)\n- 强制转成布尔值\nBoolean（要转换的内容）\n- 真：true,非空字符串，非0数字，非空对象。\n- 假：false，空字符串，0，NaN，null，undefined\n```\n!取反\nalert(!\"21323\");//false\nalert(Boolean(123));//true    \n```\n\n```\nvar a;\nif(a){\nalert(\"真\");\n} else {\nalert(\"假\");\n}\n```\n\n\n- 隐式类型转换\n>浏览器自己进行转换，其他类型转换成数字，主要调取Number\n\n- \"+、+=\"：\n- 1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串\n- 2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。\n- \"-\"、\"*\"、\"/\"、\"%\"、\"-=\"、\"*=\"、\"/=\"、\"%=\"：运算符左右两侧转换成数字进行运算：\n\n```\nconsole.log(null + false,0 + function(){});//0 \"0function(){}\"\nvar nub = \"20px\";//NaN\nvar nub2 = \"30px\";//NaN\nconsole.log(nub/nub2);//NaN\n```\n\n\n\n## 运算符\n- 关系运算符： || 、 && 、！\n- ||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。\n\n- &&：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；\n\n```\n//条件成立，执行某件事\nvar a = 0;\nvar b = 2;\nfunction fn(){\nalert(1);\n}\n(a<b) && fn();\n\n//条件不成立，执行某件事\n(a > b)||fn();\nif(a > b) {\n\n} else {\nfn();\n}\n```\n\n\n## 讲解剖析 【找出数组中最大的值】\n```\nvar arr = [123,1,324,1233,20,-32,100];//定义一个数组\nvar max = 0;//给一个最初比较的值\n/*\n在这里，max可以设置成负无穷,以下是常量。\nNumber.POSITIVE_INFINITY 正无穷\nNumber.NEGATIVE_INFINITY 负无穷\n*/\n//循环数组\nfor(var i = 0; i < arr.length; i++){\n//如果max小于arr[i],说明arr[i]比max大，所以把它的值赋给max。\nif(max < arr[i]){\nmax = arr[i];\n}\n//返回最大的【也可直接用这种方式】\n//max = Math.max(max,arr[i]);\n}\nalert(max);\n```\n\n## 讲解剖析【取模】\n```\nvar list = document.querySelector('.list');\nvar colors = [\"red\",\"yellow\",\"blue\",\"green\",\"pink\"];\nvar inner = \"\";\n// red blue yellow\nfor(var i = 0; i < 20; i++){\n/*第一种方式，比较笨*/\n/*if(i%3 == 0){\ninner += '<li style=\"background:red\">'+i+'</li>';\n} else if(i%3 == 1) {\ninner += '<li style=\"background:blue\">'+i+'</li>';\n} else if(i%3 == 2) {\ninner += '<li style=\"background:yellow\">'+i+'</li>';\n}*/\n/*第二种方式，不会有颜色多少的限制，可扩展性比较好，代码量少*/\ninner += '<li style=\"background:'+colors[i%colors.length]+'\">'+i+'</li>';\n}\nlist.innerHTML = inner;\n```\n\n## 讲解剖析【复选框】\n- 复选框样式控制选中用==checked==。\n- 改变事件用==onchange==;\n```\nvar input = document.querySelectorAll('input');\nfor(var i = 0; i < input.length; i++){\ninput[i].onchange = function(){\nconsole.log(this.checked);\n};\n}\n```\n","slug":"javascript-八","published":1,"updated":"2019-05-28T09:54:42.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymi000jfw041m0k90cf","content":"<h2 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h2><h2 id=\"数据类型划分\"><a href=\"#数据类型划分\" class=\"headerlink\" title=\"数据类型划分\"></a>数据类型划分</h2><h4 id=\"1、标准指定的类型划分：\"><a href=\"#1、标准指定的类型划分：\" class=\"headerlink\" title=\"1、标准指定的类型划分：\"></a>1、标准指定的类型划分：</h4><ul>\n<li>基本类型：</li>\n<li>1.number（数字）</li>\n<li>2.string（字符串）</li>\n<li>3.undefined（未定义）</li>\n<li>4.boolean（布尔值）</li>\n<li><p>5.null（空对象）找不到对象，对象未定义。与非空对象最大区别在于是否能进行属性操作。</p>\n<a id=\"more\"></a>\n</li>\n<li><p>对象类型（复合类型）：object(对象)，包含Array;</p>\n<h4 id=\"2、typeof的方式划分\"><a href=\"#2、typeof的方式划分\" class=\"headerlink\" title=\"2、typeof的方式划分\"></a>2、typeof的方式划分</h4><blockquote>\n<p>typeof是一种运算符，用来查看类型。</p>\n</blockquote>\n</li>\n<li>1.number:【从负无穷到正无穷的数字及NaN=》not a Number】</li>\n<li>Number.POSITIVE_INFINITY 正无穷</li>\n<li>Number.NEGATIVE_INFINITY 负无穷</li>\n<li>2.string:【字符串，任何包含在引号中的一串字符，都属于字符串】</li>\n<li>3.boolean:【true或false两种值，布尔值】</li>\n<li><p>4.object:数组、null、元素对象(Element)、object【注意：空数组不等同于空对象，因为空数组可以进行操作，空对象不能进行属性操作】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(null == arr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.function:函数类型</p>\n</li>\n<li>6.undefined：未定义。</li>\n<li>7.NaN：非数字 not a number [类型是number]</li>\n<li>1.NaN不等于任何东西，并且不等于它自己。</li>\n<li>2.检测一个内容是否是NaN的时候，可以使用isNaN();</li>\n<li>3.数据类型：number;</li>\n<li>4.NaN不能用来做比较。</li>\n<li>5.isNaN(要检测的内容) return:true/false,isNaN 隐式调用的是Number。</li>\n<li>如果转化结果是一个数字就返回false</li>\n<li>如果不是一个数字就返回true</li>\n<li>isNaN会进行隐式类型转换，转换所调用的方法是Number<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Number(&quot;10px&quot;);//NaN</span><br><span class=\"line\">var b = Number(&quot;10px&quot;);//NaN</span><br><span class=\"line\">//alert(a == b);// false</span><br><span class=\"line\">alert(isNaN(&quot;$30.2&quot;))//true;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"调试：\"><a href=\"#调试：\" class=\"headerlink\" title=\"调试：\"></a>调试：</h2><ul>\n<li>console.log();//只是打印出一个元素或值等。</li>\n<li>console.dir();//打印对象。</li>\n</ul>\n<h2 id=\"数据类型的转换。\"><a href=\"#数据类型的转换。\" class=\"headerlink\" title=\"数据类型的转换。\"></a>数据类型的转换。</h2><ul>\n<li>强制类型转换，或者显示类型转换。</li>\n<li>字符串转换数字（强制）：</li>\n<li><p>1.parseInt:取整 (要转换的数字,传进来的数字的进制值)</p>\n<blockquote>\n<p>从左向右一位一位去查看，如果遇到一位是非数字的，结束执行，把这位之前的数字返回</p>\n</blockquote>\n</li>\n<li><p>2.parseFloat：转换成小数 (转换为浮点数)</p>\n<blockquote>\n<p>从左向右一位一位的匹配，直到遇到一个非数字（可以匹配一个小数点）就返回这位前边的数字</p>\n</blockquote>\n</li>\n<li><p>3.Number(要转换的数字)</p>\n<blockquote>\n<p>从左向右看完所有的字符，如果完全符合数字的规则就转换，如果不符合数字的规则就返回NaN</p>\n</blockquote>\n</li>\n<li><p>【注意：关于数组：】</p>\n</li>\n<li>1.空数组转为0；（Number转的方式）</li>\n<li>2.数组只有一位的时候，会用这位(代表他本身)去转换，并且只转换数字和字符串为数字的，其他的都是NaN</li>\n<li>3.数组有多位的时候，只会被转换为NaN</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = false;//true = 1;false = 0;</span><br><span class=\"line\">var nub;//NaN（undefined）;</span><br><span class=\"line\">var nub = null //0;</span><br><span class=\"line\">var nub = document; //NaN;</span><br><span class=\"line\">var nub = [];//0;</span><br><span class=\"line\">var nub = [0];//0;</span><br><span class=\"line\">var nub = [10];//10</span><br><span class=\"line\">var nub = [10,2];//NaN</span><br><span class=\"line\">var nub = [&apos;aaa&apos;] //NaN</span><br><span class=\"line\">var nub = [&apos;10&apos;]//10</span><br><span class=\"line\">var nub = function()&#123;&#125;//NaN</span><br><span class=\"line\">var nub = undefined;//NaN</span><br><span class=\"line\">nub = Number(nub);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>强制转成字符串</li>\n<li><p>toString();【要转换的内容.toString】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">a = a.toString(); //将数字123专为字符串类型</span><br><span class=\"line\">console.log(a,typeof a);123 string;</span><br><span class=\"line\">var b = [&apos;&apos;,&apos;2&apos;];</span><br><span class=\"line\">b = b.toString();</span><br><span class=\"line\">console.log(b,typeof b);//,2 string</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>String(要转换的内容)</p>\n</li>\n<li>强制转成布尔值<br>Boolean（要转换的内容）</li>\n<li>真：true,非空字符串，非0数字，非空对象。</li>\n<li>假：false，空字符串，0，NaN，null，undefined<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!取反</span><br><span class=\"line\">alert(!&quot;21323&quot;);//false</span><br><span class=\"line\">alert(Boolean(123));//true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">if(a)&#123;</span><br><span class=\"line\">alert(&quot;真&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">alert(&quot;假&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>隐式类型转换</p>\n<blockquote>\n<p>浏览器自己进行转换，其他类型转换成数字，主要调取Number</p>\n</blockquote>\n</li>\n<li><p>“+、+=”：</p>\n</li>\n<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>\n<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>\n<li>“-“、”<em>“、”/“、”%”、”-=”、”</em>=”、”/=”、”%=”：运算符左右两侧转换成数字进行运算：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(null + false,0 + function()&#123;&#125;);//0 &quot;0function()&#123;&#125;&quot;</span><br><span class=\"line\">var nub = &quot;20px&quot;;//NaN</span><br><span class=\"line\">var nub2 = &quot;30px&quot;;//NaN</span><br><span class=\"line\">console.log(nub/nub2);//NaN</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>关系运算符： || 、 &amp;&amp; 、！</li>\n<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>\n</li>\n<li><p>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//条件成立，执行某件事</span><br><span class=\"line\">var a = 0;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(a&lt;b) &amp;&amp; fn();</span><br><span class=\"line\"></span><br><span class=\"line\">//条件不成立，执行某件事</span><br><span class=\"line\">(a &gt; b)||fn();</span><br><span class=\"line\">if(a &gt; b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析-【找出数组中最大的值】\"><a href=\"#讲解剖析-【找出数组中最大的值】\" class=\"headerlink\" title=\"讲解剖析 【找出数组中最大的值】\"></a>讲解剖析 【找出数组中最大的值】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [123,1,324,1233,20,-32,100];//定义一个数组</span><br><span class=\"line\">var max = 0;//给一个最初比较的值</span><br><span class=\"line\">/*</span><br><span class=\"line\">在这里，max可以设置成负无穷,以下是常量。</span><br><span class=\"line\">Number.POSITIVE_INFINITY 正无穷</span><br><span class=\"line\">Number.NEGATIVE_INFINITY 负无穷</span><br><span class=\"line\">*/</span><br><span class=\"line\">//循环数组</span><br><span class=\"line\">for(var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">//如果max小于arr[i],说明arr[i]比max大，所以把它的值赋给max。</span><br><span class=\"line\">if(max &lt; arr[i])&#123;</span><br><span class=\"line\">max = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回最大的【也可直接用这种方式】</span><br><span class=\"line\">//max = Math.max(max,arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(max);</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【取模】\"><a href=\"#讲解剖析【取模】\" class=\"headerlink\" title=\"讲解剖析【取模】\"></a>讲解剖析【取模】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list = document.querySelector(&apos;.list&apos;);</span><br><span class=\"line\">var colors = [&quot;red&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;pink&quot;];</span><br><span class=\"line\">var inner = &quot;&quot;;</span><br><span class=\"line\">// red blue yellow</span><br><span class=\"line\">for(var i = 0; i &lt; 20; i++)&#123;</span><br><span class=\"line\">/*第一种方式，比较笨*/</span><br><span class=\"line\">/*if(i%3 == 0)&#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:red&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125; else if(i%3 == 1) &#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:blue&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125; else if(i%3 == 2) &#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:yellow&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">/*第二种方式，不会有颜色多少的限制，可扩展性比较好，代码量少*/</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:&apos;+colors[i%colors.length]+&apos;&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list.innerHTML = inner;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【复选框】\"><a href=\"#讲解剖析【复选框】\" class=\"headerlink\" title=\"讲解剖析【复选框】\"></a>讲解剖析【复选框】</h2><ul>\n<li>复选框样式控制选中用==checked==。</li>\n<li>改变事件用==onchange==;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var input = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; input.length; i++)&#123;</span><br><span class=\"line\">input[i].onchange = function()&#123;</span><br><span class=\"line\">console.log(this.checked);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h2><h2 id=\"数据类型划分\"><a href=\"#数据类型划分\" class=\"headerlink\" title=\"数据类型划分\"></a>数据类型划分</h2><h4 id=\"1、标准指定的类型划分：\"><a href=\"#1、标准指定的类型划分：\" class=\"headerlink\" title=\"1、标准指定的类型划分：\"></a>1、标准指定的类型划分：</h4><ul>\n<li>基本类型：</li>\n<li>1.number（数字）</li>\n<li>2.string（字符串）</li>\n<li>3.undefined（未定义）</li>\n<li>4.boolean（布尔值）</li>\n<li><p>5.null（空对象）找不到对象，对象未定义。与非空对象最大区别在于是否能进行属性操作。</p>","more":"</li>\n<li><p>对象类型（复合类型）：object(对象)，包含Array;</p>\n<h4 id=\"2、typeof的方式划分\"><a href=\"#2、typeof的方式划分\" class=\"headerlink\" title=\"2、typeof的方式划分\"></a>2、typeof的方式划分</h4><blockquote>\n<p>typeof是一种运算符，用来查看类型。</p>\n</blockquote>\n</li>\n<li>1.number:【从负无穷到正无穷的数字及NaN=》not a Number】</li>\n<li>Number.POSITIVE_INFINITY 正无穷</li>\n<li>Number.NEGATIVE_INFINITY 负无穷</li>\n<li>2.string:【字符串，任何包含在引号中的一串字符，都属于字符串】</li>\n<li>3.boolean:【true或false两种值，布尔值】</li>\n<li><p>4.object:数组、null、元素对象(Element)、object【注意：空数组不等同于空对象，因为空数组可以进行操作，空对象不能进行属性操作】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(null == arr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.function:函数类型</p>\n</li>\n<li>6.undefined：未定义。</li>\n<li>7.NaN：非数字 not a number [类型是number]</li>\n<li>1.NaN不等于任何东西，并且不等于它自己。</li>\n<li>2.检测一个内容是否是NaN的时候，可以使用isNaN();</li>\n<li>3.数据类型：number;</li>\n<li>4.NaN不能用来做比较。</li>\n<li>5.isNaN(要检测的内容) return:true/false,isNaN 隐式调用的是Number。</li>\n<li>如果转化结果是一个数字就返回false</li>\n<li>如果不是一个数字就返回true</li>\n<li>isNaN会进行隐式类型转换，转换所调用的方法是Number<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = Number(&quot;10px&quot;);//NaN</span><br><span class=\"line\">var b = Number(&quot;10px&quot;);//NaN</span><br><span class=\"line\">//alert(a == b);// false</span><br><span class=\"line\">alert(isNaN(&quot;$30.2&quot;))//true;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"调试：\"><a href=\"#调试：\" class=\"headerlink\" title=\"调试：\"></a>调试：</h2><ul>\n<li>console.log();//只是打印出一个元素或值等。</li>\n<li>console.dir();//打印对象。</li>\n</ul>\n<h2 id=\"数据类型的转换。\"><a href=\"#数据类型的转换。\" class=\"headerlink\" title=\"数据类型的转换。\"></a>数据类型的转换。</h2><ul>\n<li>强制类型转换，或者显示类型转换。</li>\n<li>字符串转换数字（强制）：</li>\n<li><p>1.parseInt:取整 (要转换的数字,传进来的数字的进制值)</p>\n<blockquote>\n<p>从左向右一位一位去查看，如果遇到一位是非数字的，结束执行，把这位之前的数字返回</p>\n</blockquote>\n</li>\n<li><p>2.parseFloat：转换成小数 (转换为浮点数)</p>\n<blockquote>\n<p>从左向右一位一位的匹配，直到遇到一个非数字（可以匹配一个小数点）就返回这位前边的数字</p>\n</blockquote>\n</li>\n<li><p>3.Number(要转换的数字)</p>\n<blockquote>\n<p>从左向右看完所有的字符，如果完全符合数字的规则就转换，如果不符合数字的规则就返回NaN</p>\n</blockquote>\n</li>\n<li><p>【注意：关于数组：】</p>\n</li>\n<li>1.空数组转为0；（Number转的方式）</li>\n<li>2.数组只有一位的时候，会用这位(代表他本身)去转换，并且只转换数字和字符串为数字的，其他的都是NaN</li>\n<li>3.数组有多位的时候，只会被转换为NaN</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = false;//true = 1;false = 0;</span><br><span class=\"line\">var nub;//NaN（undefined）;</span><br><span class=\"line\">var nub = null //0;</span><br><span class=\"line\">var nub = document; //NaN;</span><br><span class=\"line\">var nub = [];//0;</span><br><span class=\"line\">var nub = [0];//0;</span><br><span class=\"line\">var nub = [10];//10</span><br><span class=\"line\">var nub = [10,2];//NaN</span><br><span class=\"line\">var nub = [&apos;aaa&apos;] //NaN</span><br><span class=\"line\">var nub = [&apos;10&apos;]//10</span><br><span class=\"line\">var nub = function()&#123;&#125;//NaN</span><br><span class=\"line\">var nub = undefined;//NaN</span><br><span class=\"line\">nub = Number(nub);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>强制转成字符串</li>\n<li><p>toString();【要转换的内容.toString】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">a = a.toString(); //将数字123专为字符串类型</span><br><span class=\"line\">console.log(a,typeof a);123 string;</span><br><span class=\"line\">var b = [&apos;&apos;,&apos;2&apos;];</span><br><span class=\"line\">b = b.toString();</span><br><span class=\"line\">console.log(b,typeof b);//,2 string</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>String(要转换的内容)</p>\n</li>\n<li>强制转成布尔值<br>Boolean（要转换的内容）</li>\n<li>真：true,非空字符串，非0数字，非空对象。</li>\n<li>假：false，空字符串，0，NaN，null，undefined<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!取反</span><br><span class=\"line\">alert(!&quot;21323&quot;);//false</span><br><span class=\"line\">alert(Boolean(123));//true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">if(a)&#123;</span><br><span class=\"line\">alert(&quot;真&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">alert(&quot;假&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>隐式类型转换</p>\n<blockquote>\n<p>浏览器自己进行转换，其他类型转换成数字，主要调取Number</p>\n</blockquote>\n</li>\n<li><p>“+、+=”：</p>\n</li>\n<li>1.当加号左右两侧有一位是字符串时，会把另外一侧也转成字符串</li>\n<li>2.使用+号时，两边没有字符串时，优先尝试把左右两侧都转成数字，如果不能转换成数字就转换成字符串进行链接。</li>\n<li>“-“、”<em>“、”/“、”%”、”-=”、”</em>=”、”/=”、”%=”：运算符左右两侧转换成数字进行运算：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(null + false,0 + function()&#123;&#125;);//0 &quot;0function()&#123;&#125;&quot;</span><br><span class=\"line\">var nub = &quot;20px&quot;;//NaN</span><br><span class=\"line\">var nub2 = &quot;30px&quot;;//NaN</span><br><span class=\"line\">console.log(nub/nub2);//NaN</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>关系运算符： || 、 &amp;&amp; 、！</li>\n<li><p>||：当第一个条件返回true，就结束运行，返回true，如果第一个条件返回false，那再来看第二个条件，如果第二个条件返回true，整体也为true，如果两个条件都为false，则返回false。</p>\n</li>\n<li><p>&amp;&amp;：当第一个条件返回false，就结束运算，直接返回false。如果第一个条件返回true，那再来看第二个条件，如果第二个条件返回false，整体也返回false，如果两个条件都返回true则返回true；</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//条件成立，执行某件事</span><br><span class=\"line\">var a = 0;</span><br><span class=\"line\">var b = 2;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(a&lt;b) &amp;&amp; fn();</span><br><span class=\"line\"></span><br><span class=\"line\">//条件不成立，执行某件事</span><br><span class=\"line\">(a &gt; b)||fn();</span><br><span class=\"line\">if(a &gt; b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析-【找出数组中最大的值】\"><a href=\"#讲解剖析-【找出数组中最大的值】\" class=\"headerlink\" title=\"讲解剖析 【找出数组中最大的值】\"></a>讲解剖析 【找出数组中最大的值】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [123,1,324,1233,20,-32,100];//定义一个数组</span><br><span class=\"line\">var max = 0;//给一个最初比较的值</span><br><span class=\"line\">/*</span><br><span class=\"line\">在这里，max可以设置成负无穷,以下是常量。</span><br><span class=\"line\">Number.POSITIVE_INFINITY 正无穷</span><br><span class=\"line\">Number.NEGATIVE_INFINITY 负无穷</span><br><span class=\"line\">*/</span><br><span class=\"line\">//循环数组</span><br><span class=\"line\">for(var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">//如果max小于arr[i],说明arr[i]比max大，所以把它的值赋给max。</span><br><span class=\"line\">if(max &lt; arr[i])&#123;</span><br><span class=\"line\">max = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回最大的【也可直接用这种方式】</span><br><span class=\"line\">//max = Math.max(max,arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(max);</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【取模】\"><a href=\"#讲解剖析【取模】\" class=\"headerlink\" title=\"讲解剖析【取模】\"></a>讲解剖析【取模】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list = document.querySelector(&apos;.list&apos;);</span><br><span class=\"line\">var colors = [&quot;red&quot;,&quot;yellow&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;pink&quot;];</span><br><span class=\"line\">var inner = &quot;&quot;;</span><br><span class=\"line\">// red blue yellow</span><br><span class=\"line\">for(var i = 0; i &lt; 20; i++)&#123;</span><br><span class=\"line\">/*第一种方式，比较笨*/</span><br><span class=\"line\">/*if(i%3 == 0)&#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:red&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125; else if(i%3 == 1) &#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:blue&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125; else if(i%3 == 2) &#123;</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:yellow&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">/*第二种方式，不会有颜色多少的限制，可扩展性比较好，代码量少*/</span><br><span class=\"line\">inner += &apos;&lt;li style=&quot;background:&apos;+colors[i%colors.length]+&apos;&quot;&gt;&apos;+i+&apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list.innerHTML = inner;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【复选框】\"><a href=\"#讲解剖析【复选框】\" class=\"headerlink\" title=\"讲解剖析【复选框】\"></a>讲解剖析【复选框】</h2><ul>\n<li>复选框样式控制选中用==checked==。</li>\n<li>改变事件用==onchange==;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var input = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; input.length; i++)&#123;</span><br><span class=\"line\">input[i].onchange = function()&#123;</span><br><span class=\"line\">console.log(this.checked);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"javascript(六)","date":"2019-03-21T08:43:51.000Z","_content":"## 获取方式区分：\n1. query相关的方法，再使用时就只获取一次。\n2. get方法在每次我们调用的时候，都会重新获取一次。\n\n## onclick清空\nbox.onclick = null//把box的onclick事件变成空对象。\n\n## 索引\n\n- 定义一个元素本来不存在的属性，自定义属性。\n<!-- more -->\n\n```\nfor(var i = 0;i<lis.length;i++){\n//自定义属性可以是中文，可以是英文，可以是数字，但是尽量的要使用小写英文字母。\nlis[i].序号 = i;\n\n}\n```\n- 特定的属性index（索引）。\n```\nfor(var i = 0;i<lis.length;i++){\nlis[i].index = i;\nlis[i].onclick = function(){\nalert(this.index);\n}\n}\n```\n","source":"_posts/javascript-六.md","raw":"---\ntitle: javascript(六)\ndate: 2019-03-21 16:43:51\ntags:\ncategories: JavaScript\n---\n## 获取方式区分：\n1. query相关的方法，再使用时就只获取一次。\n2. get方法在每次我们调用的时候，都会重新获取一次。\n\n## onclick清空\nbox.onclick = null//把box的onclick事件变成空对象。\n\n## 索引\n\n- 定义一个元素本来不存在的属性，自定义属性。\n<!-- more -->\n\n```\nfor(var i = 0;i<lis.length;i++){\n//自定义属性可以是中文，可以是英文，可以是数字，但是尽量的要使用小写英文字母。\nlis[i].序号 = i;\n\n}\n```\n- 特定的属性index（索引）。\n```\nfor(var i = 0;i<lis.length;i++){\nlis[i].index = i;\nlis[i].onclick = function(){\nalert(this.index);\n}\n}\n```\n","slug":"javascript-六","published":1,"updated":"2019-05-28T09:55:30.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymk000mfw04czyywfw0","content":"<h2 id=\"获取方式区分：\"><a href=\"#获取方式区分：\" class=\"headerlink\" title=\"获取方式区分：\"></a>获取方式区分：</h2><ol>\n<li>query相关的方法，再使用时就只获取一次。</li>\n<li>get方法在每次我们调用的时候，都会重新获取一次。</li>\n</ol>\n<h2 id=\"onclick清空\"><a href=\"#onclick清空\" class=\"headerlink\" title=\"onclick清空\"></a>onclick清空</h2><p>box.onclick = null//把box的onclick事件变成空对象。</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>定义一个元素本来不存在的属性，自定义属性。<a id=\"more\"></a>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;lis.length;i++)&#123;</span><br><span class=\"line\">//自定义属性可以是中文，可以是英文，可以是数字，但是尽量的要使用小写英文字母。</span><br><span class=\"line\">lis[i].序号 = i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特定的属性index（索引）。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;lis.length;i++)&#123;</span><br><span class=\"line\">lis[i].index = i;</span><br><span class=\"line\">lis[i].onclick = function()&#123;</span><br><span class=\"line\">alert(this.index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"获取方式区分：\"><a href=\"#获取方式区分：\" class=\"headerlink\" title=\"获取方式区分：\"></a>获取方式区分：</h2><ol>\n<li>query相关的方法，再使用时就只获取一次。</li>\n<li>get方法在每次我们调用的时候，都会重新获取一次。</li>\n</ol>\n<h2 id=\"onclick清空\"><a href=\"#onclick清空\" class=\"headerlink\" title=\"onclick清空\"></a>onclick清空</h2><p>box.onclick = null//把box的onclick事件变成空对象。</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><ul>\n<li>定义一个元素本来不存在的属性，自定义属性。","more":"</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;lis.length;i++)&#123;</span><br><span class=\"line\">//自定义属性可以是中文，可以是英文，可以是数字，但是尽量的要使用小写英文字母。</span><br><span class=\"line\">lis[i].序号 = i;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>特定的属性index（索引）。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0;i&lt;lis.length;i++)&#123;</span><br><span class=\"line\">lis[i].index = i;</span><br><span class=\"line\">lis[i].onclick = function()&#123;</span><br><span class=\"line\">alert(this.index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"javascript(十)","date":"2019-03-21T08:43:55.000Z","_content":"## 练习讲解\n### console.time();\n> 打印执行时间\n\n#### 注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\n\n## 函数\n>在实际编码中，会有很多的一些代码可能重复出现，为了能简化程序开发，重复利用，所以有了函数的概念。(function功能方法，把一个个零散的带吗和数据，组合成一个完整的方法)\n\n定义函数\n<!-- more -->\n\n```\nfunction fn(){\nalert(1);\n}\nvar fn2 = function(){\nalert(2);\n}\nfn2();\n/*函数调用*/\nfn(); //直接调用\ndocument.onclick = fn2;//事件调用\ndocument.onclick();//2\ndocument.onclick();//2\n```\n### 匿名函数\n>函数表达式 -- 匿名函数自执行 \n1. (函数)();\n2. !函数();\n3. ~函数();\n4. +函数();\n5. -函数();\n```\n(function(){\nalert(1);\n})();\n!function(){\nalert(2);\n}();\n+function(){\nalert(3);\n}();    \n```\n## 传参\n>函数拥有多个参数，注意再使用的时候，行参和实参要一一对应。\n\n- 语法：\n```\nfunction fn(a形参){\nalert(a参数使用);\n}\nfn(实参);\n```\n- 实例：\n```\nfunction fn(a,b){\nalert(a + b);\n}\nfn(1,5); //6\nfn(2.3); //5\n```\n\n## 讲解剖析【选项卡】\n```\n//把要操作的大盒子和事件通过传参的形式传递\ntab(\"#wrap\",\"onmouseover\");\ntab(\"#wrap2\",\"onclick\");\nfunction tab(id,ev) {\nvar wrap = document.querySelector(id);\nvar navs = wrap.querySelectorAll('nav a');\nvar cons = wrap.querySelectorAll('.cons>div');\nfor(var i = 0; i < navs.length; i++){\nnavs[i].index = i;\nnavs[i][ev] = function(){\nfor(var i = 0; i < navs.length; i++){\nnavs[i].className = \"\";\ncons[i].className = \"\";\n}\nthis.className = \"active\";\ncons[this.index].className = \"show\";\n};\n}\n}\n```\n## 讲解剖析【选中编辑】\n```\n<ul class=\"list\">\n<li>\n<span class=\"info\">写点啥呢</span>\n<a href=\"javascript:;\" class=\"editBtn\">编辑</a>\n<div class=\"edit\">\n<input type=\"text\" name=\"\">\n<a href=\"javascript:;\">确定</a>\n<a href=\"javascript:;\">取消</a>\n</div>\n</li>\n</ul>\n<script type=\"text/javascript\">\n/*\n具体思路分析：\n点击编辑按钮:\n1) 找到edit 显示出来\n2) 把info的innerHTML，添加给输入框做内容\n点击取消按钮：\n找到edit 隐藏\n点击确定按钮:\n1) 判断输入框中的内容如果为空弹出提示，否则执行下边的内容\n2)     把输入框的内容添加给span的innerHTML\n3)    edit 隐藏\n*/    \nwindow.onload = function() {\nvar li = document.querySelectorAll('.list li');\n// setEdit(li[0]);\n// setEdit(li[1]);\n// setEdit(li[2]);\nfor(var i = 0; i < li.length; i++){\nsetEdit(li[i]);\n}\nfunction setEdit(li){\nvar info = li.querySelector('.info');\nvar editBtn = li.querySelector('.editBtn');\nvar edit = li.querySelector('.edit');\nvar text =  edit.querySelector('input');\nvar btns = edit.querySelectorAll('a');\neditBtn.onclick = function(){\nedit.style.display = \"block\";\ntext.value = info.innerHTML;\n}; \nbtns[0].onclick = function(){\nif(text.value == \"\") {\nalert(\"请输入内容\");\n} else {\ninfo.innerHTML = text.value;\nedit.style.display = \"none\";\n}\n};\nbtns[1].onclick = function(){\nedit.style.display = \"none\";\n};\n}\n};\n</script>\n```\n## 讲解剖析【点击图片切换】\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Document</title>\n<style type=\"text/css\">\np {\nmargin: 0;\n}\n.wrap {\nposition: relative;\nwidth: 300px;\nmargin: 30px auto;\n}    \n.wrap img {\ndisplay: block;\n}\n.wrap p {\nposition: absolute;\nleft: 0;\nright: 0;\nfont: 14px/30px \"宋体\";\ntext-align: center;\nbackground: rgba(255, 255, 255, .4);\n}\n.wrap p:first-of-type {\ntop: 0;\n}\n.wrap p:last-of-type {\nbottom: 0;\n}\n.btn {\nposition: absolute;\ntop: 204px;\nwidth: 40px;\nheight: 40px;\nbackground: #000;\nfont: 14px/40px Arial;\ncolor: #fff;\ntext-decoration: none;\ntext-align: center;\n}\n.btn:first-of-type {\nleft: -40px;\n}\n.btn:last-of-type {\nright: -40px;\n}\n</style>\n<script type=\"text/javascript\">\nvar data = [\n{\nname: \"童童\",\nimg: 'img/1.JPG',\n},\n{\nname: \"学辉\",\nimg: 'img/2.JPG',\n},\n{\nname: \"承龙\",\nimg: 'img/3.JPG',\n},\n{\nname: \"老刘\",\nimg: 'img/4.JPG',\n},\n{\nname: \"老王\",\nimg: 'img/5.JPG',\n}\n];\nwindow.onload = function() {\nvar wrap = document.querySelector('.wrap');\nvar img = wrap.querySelector('img');\nvar txt =  wrap.querySelectorAll('p');\nvar btns =  wrap.querySelectorAll('a');\nvar now = 0;\nbtns[0].onclick = function(){\ntab(-1);\n};\nbtns[1].onclick = function(){\ntab(1);\n};\nfunction tab(dis){\nnow += dis;\nif(now < 0 ){\nnow = data.length-1;\n} else if(now > data.length-1){\nnow = 0;\n}\nimg.src = data[now][\"img\"];\ntxt[0].innerHTML = (now + 1) + \"/\" + data.length;\ntxt[1].innerHTML = data[now][\"name\"];\n};\n};    \n</script>\n</head>\n<body>\n<div class=\"wrap\">\n<img src=\"img/1.JPG\">    \n<p>1/5</p>\n<p>童童</p>\n<a href=\"javascript:;\" class=\"btn\">prev</a>\n<a href=\"javascript:;\" class=\"btn\">next</a>\n</div>\n</body>\n</html>\n```\n## arguments\n>不定参，函数所有参数的集合\n- 获取其中一个参数：用下标。\n- 获取参数的总个数：length。\n- 参数其实就相当于函数的局部变量，只定义形参不传参的话，参数就是undefined\n```\nfunction fn(a,b,c,d) {\nalert(c);//undefined\n}\nfn(1,2);\n```\n- 有一个函数，传进来的参数是不固定的，现在要计算出所有的参数和。\n```\nfunction fn() {\nconsole.log(arguments.length);\nvar nub = 0 ;\nfor(var i = 0; i < arguments.length; i++){\nnub += arguments[i];\n}\nalert(nub);\n}\nfn(1,1,1);\n```\n\n## 返回值return\n>每个函数中都可以存储数据，存储的数据，可以再函数执行完成之后拿到。\n- return 函数返回值（函数执行完成之后，返回的数据）\n- 只能在函数中使用\n- return 后面跟得值为函数执行后的返回值。\n```\nfunction a(){\nreturn [1,2,3];\n}\nvar b = a();\nalert(b); //1,2,3\n```\n- 每个函数都有一个返回值，如果我们没有定义，返回值就是undefined\n```\nfunction a() {\nvar nub = 10;\n}\nvar b = a();\nalert(b);//undefined;\n```\n- 函数中 return后边的内容不会被执行(在函数执行时，会把return后边的数据返回，然后函数执行到此结束)\n```\nfunction a() {\nvar nub = 10;\nreturn nub;\n\nalert(nub*nub);\n}\nvar b = a();\nalert(b);\n```\n解题剖析【封装获取元素】\n```\nfunction $(){//通过id获取元素\nreturn document.getElementById(\"btn\");\n}\nwindow.onload = function(){\nvar btn = $();\nconsole.log(btn);\n}\n```\n## 封装\n>函数：function 功能方法:把一个个零散的代码和数据，组合成一个完整的方法.\n\n## 解题剖析【获取样式】\n- getComputedStyle(box)[\"width\"]//标准下获取计算后的样式（标准下的内置函数）\n- box.currentStyle[\"width\"]//IE下获取计算后的样式\n```\nfunction getStyle(el,attr){\nif(el.currentStyle){\nreturn el.currentStyle[attr];\n}\nreturn getComputedStyle(el)[attr];\n}\nvar box = document.getElementById('box');\nbox.onclick = function(){\nvar left = parseFloat(getStyle(box,\"left\"));\nbox.style.legt = left + 5 + \"px\";\n}\n\n```\n\n","source":"_posts/javascript-十.md","raw":"---\ntitle: javascript(十)\ndate: 2019-03-21 16:43:55\ntags:\ncategories: JavaScript\n---\n## 练习讲解\n### console.time();\n> 打印执行时间\n\n#### 注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\n\n## 函数\n>在实际编码中，会有很多的一些代码可能重复出现，为了能简化程序开发，重复利用，所以有了函数的概念。(function功能方法，把一个个零散的带吗和数据，组合成一个完整的方法)\n\n定义函数\n<!-- more -->\n\n```\nfunction fn(){\nalert(1);\n}\nvar fn2 = function(){\nalert(2);\n}\nfn2();\n/*函数调用*/\nfn(); //直接调用\ndocument.onclick = fn2;//事件调用\ndocument.onclick();//2\ndocument.onclick();//2\n```\n### 匿名函数\n>函数表达式 -- 匿名函数自执行 \n1. (函数)();\n2. !函数();\n3. ~函数();\n4. +函数();\n5. -函数();\n```\n(function(){\nalert(1);\n})();\n!function(){\nalert(2);\n}();\n+function(){\nalert(3);\n}();    \n```\n## 传参\n>函数拥有多个参数，注意再使用的时候，行参和实参要一一对应。\n\n- 语法：\n```\nfunction fn(a形参){\nalert(a参数使用);\n}\nfn(实参);\n```\n- 实例：\n```\nfunction fn(a,b){\nalert(a + b);\n}\nfn(1,5); //6\nfn(2.3); //5\n```\n\n## 讲解剖析【选项卡】\n```\n//把要操作的大盒子和事件通过传参的形式传递\ntab(\"#wrap\",\"onmouseover\");\ntab(\"#wrap2\",\"onclick\");\nfunction tab(id,ev) {\nvar wrap = document.querySelector(id);\nvar navs = wrap.querySelectorAll('nav a');\nvar cons = wrap.querySelectorAll('.cons>div');\nfor(var i = 0; i < navs.length; i++){\nnavs[i].index = i;\nnavs[i][ev] = function(){\nfor(var i = 0; i < navs.length; i++){\nnavs[i].className = \"\";\ncons[i].className = \"\";\n}\nthis.className = \"active\";\ncons[this.index].className = \"show\";\n};\n}\n}\n```\n## 讲解剖析【选中编辑】\n```\n<ul class=\"list\">\n<li>\n<span class=\"info\">写点啥呢</span>\n<a href=\"javascript:;\" class=\"editBtn\">编辑</a>\n<div class=\"edit\">\n<input type=\"text\" name=\"\">\n<a href=\"javascript:;\">确定</a>\n<a href=\"javascript:;\">取消</a>\n</div>\n</li>\n</ul>\n<script type=\"text/javascript\">\n/*\n具体思路分析：\n点击编辑按钮:\n1) 找到edit 显示出来\n2) 把info的innerHTML，添加给输入框做内容\n点击取消按钮：\n找到edit 隐藏\n点击确定按钮:\n1) 判断输入框中的内容如果为空弹出提示，否则执行下边的内容\n2)     把输入框的内容添加给span的innerHTML\n3)    edit 隐藏\n*/    \nwindow.onload = function() {\nvar li = document.querySelectorAll('.list li');\n// setEdit(li[0]);\n// setEdit(li[1]);\n// setEdit(li[2]);\nfor(var i = 0; i < li.length; i++){\nsetEdit(li[i]);\n}\nfunction setEdit(li){\nvar info = li.querySelector('.info');\nvar editBtn = li.querySelector('.editBtn');\nvar edit = li.querySelector('.edit');\nvar text =  edit.querySelector('input');\nvar btns = edit.querySelectorAll('a');\neditBtn.onclick = function(){\nedit.style.display = \"block\";\ntext.value = info.innerHTML;\n}; \nbtns[0].onclick = function(){\nif(text.value == \"\") {\nalert(\"请输入内容\");\n} else {\ninfo.innerHTML = text.value;\nedit.style.display = \"none\";\n}\n};\nbtns[1].onclick = function(){\nedit.style.display = \"none\";\n};\n}\n};\n</script>\n```\n## 讲解剖析【点击图片切换】\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Document</title>\n<style type=\"text/css\">\np {\nmargin: 0;\n}\n.wrap {\nposition: relative;\nwidth: 300px;\nmargin: 30px auto;\n}    \n.wrap img {\ndisplay: block;\n}\n.wrap p {\nposition: absolute;\nleft: 0;\nright: 0;\nfont: 14px/30px \"宋体\";\ntext-align: center;\nbackground: rgba(255, 255, 255, .4);\n}\n.wrap p:first-of-type {\ntop: 0;\n}\n.wrap p:last-of-type {\nbottom: 0;\n}\n.btn {\nposition: absolute;\ntop: 204px;\nwidth: 40px;\nheight: 40px;\nbackground: #000;\nfont: 14px/40px Arial;\ncolor: #fff;\ntext-decoration: none;\ntext-align: center;\n}\n.btn:first-of-type {\nleft: -40px;\n}\n.btn:last-of-type {\nright: -40px;\n}\n</style>\n<script type=\"text/javascript\">\nvar data = [\n{\nname: \"童童\",\nimg: 'img/1.JPG',\n},\n{\nname: \"学辉\",\nimg: 'img/2.JPG',\n},\n{\nname: \"承龙\",\nimg: 'img/3.JPG',\n},\n{\nname: \"老刘\",\nimg: 'img/4.JPG',\n},\n{\nname: \"老王\",\nimg: 'img/5.JPG',\n}\n];\nwindow.onload = function() {\nvar wrap = document.querySelector('.wrap');\nvar img = wrap.querySelector('img');\nvar txt =  wrap.querySelectorAll('p');\nvar btns =  wrap.querySelectorAll('a');\nvar now = 0;\nbtns[0].onclick = function(){\ntab(-1);\n};\nbtns[1].onclick = function(){\ntab(1);\n};\nfunction tab(dis){\nnow += dis;\nif(now < 0 ){\nnow = data.length-1;\n} else if(now > data.length-1){\nnow = 0;\n}\nimg.src = data[now][\"img\"];\ntxt[0].innerHTML = (now + 1) + \"/\" + data.length;\ntxt[1].innerHTML = data[now][\"name\"];\n};\n};    \n</script>\n</head>\n<body>\n<div class=\"wrap\">\n<img src=\"img/1.JPG\">    \n<p>1/5</p>\n<p>童童</p>\n<a href=\"javascript:;\" class=\"btn\">prev</a>\n<a href=\"javascript:;\" class=\"btn\">next</a>\n</div>\n</body>\n</html>\n```\n## arguments\n>不定参，函数所有参数的集合\n- 获取其中一个参数：用下标。\n- 获取参数的总个数：length。\n- 参数其实就相当于函数的局部变量，只定义形参不传参的话，参数就是undefined\n```\nfunction fn(a,b,c,d) {\nalert(c);//undefined\n}\nfn(1,2);\n```\n- 有一个函数，传进来的参数是不固定的，现在要计算出所有的参数和。\n```\nfunction fn() {\nconsole.log(arguments.length);\nvar nub = 0 ;\nfor(var i = 0; i < arguments.length; i++){\nnub += arguments[i];\n}\nalert(nub);\n}\nfn(1,1,1);\n```\n\n## 返回值return\n>每个函数中都可以存储数据，存储的数据，可以再函数执行完成之后拿到。\n- return 函数返回值（函数执行完成之后，返回的数据）\n- 只能在函数中使用\n- return 后面跟得值为函数执行后的返回值。\n```\nfunction a(){\nreturn [1,2,3];\n}\nvar b = a();\nalert(b); //1,2,3\n```\n- 每个函数都有一个返回值，如果我们没有定义，返回值就是undefined\n```\nfunction a() {\nvar nub = 10;\n}\nvar b = a();\nalert(b);//undefined;\n```\n- 函数中 return后边的内容不会被执行(在函数执行时，会把return后边的数据返回，然后函数执行到此结束)\n```\nfunction a() {\nvar nub = 10;\nreturn nub;\n\nalert(nub*nub);\n}\nvar b = a();\nalert(b);\n```\n解题剖析【封装获取元素】\n```\nfunction $(){//通过id获取元素\nreturn document.getElementById(\"btn\");\n}\nwindow.onload = function(){\nvar btn = $();\nconsole.log(btn);\n}\n```\n## 封装\n>函数：function 功能方法:把一个个零散的代码和数据，组合成一个完整的方法.\n\n## 解题剖析【获取样式】\n- getComputedStyle(box)[\"width\"]//标准下获取计算后的样式（标准下的内置函数）\n- box.currentStyle[\"width\"]//IE下获取计算后的样式\n```\nfunction getStyle(el,attr){\nif(el.currentStyle){\nreturn el.currentStyle[attr];\n}\nreturn getComputedStyle(el)[attr];\n}\nvar box = document.getElementById('box');\nbox.onclick = function(){\nvar left = parseFloat(getStyle(box,\"left\"));\nbox.style.legt = left + 5 + \"px\";\n}\n\n```\n\n","slug":"javascript-十","published":1,"updated":"2019-05-28T09:55:55.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfyml000nfw04p0fpjaao","content":"<h2 id=\"练习讲解\"><a href=\"#练习讲解\" class=\"headerlink\" title=\"练习讲解\"></a>练习讲解</h2><h3 id=\"console-time\"><a href=\"#console-time\" class=\"headerlink\" title=\"console.time();\"></a>console.time();</h3><blockquote>\n<p>打印执行时间</p>\n</blockquote>\n<h4 id=\"注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\"><a href=\"#注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\" class=\"headerlink\" title=\"注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\"></a>注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。</h4><h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<p>在实际编码中，会有很多的一些代码可能重复出现，为了能简化程序开发，重复利用，所以有了函数的概念。(function功能方法，把一个个零散的带吗和数据，组合成一个完整的方法)</p>\n</blockquote>\n<p>定义函数<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn2 = function()&#123;</span><br><span class=\"line\">alert(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn2();</span><br><span class=\"line\">/*函数调用*/</span><br><span class=\"line\">fn(); //直接调用</span><br><span class=\"line\">document.onclick = fn2;//事件调用</span><br><span class=\"line\">document.onclick();//2</span><br><span class=\"line\">document.onclick();//2</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><blockquote>\n<p>函数表达式 – 匿名函数自执行 </p>\n<ol>\n<li>(函数)();</li>\n<li>!函数();</li>\n<li>~函数();</li>\n<li>+函数();</li>\n<li>-函数();<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">!function()&#123;</span><br><span class=\"line\">alert(2);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">+function()&#123;</span><br><span class=\"line\">alert(3);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h2><blockquote>\n<p>函数拥有多个参数，注意再使用的时候，行参和实参要一一对应。</p>\n</blockquote>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a形参)&#123;</span><br><span class=\"line\">alert(a参数使用);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(实参);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a,b)&#123;</span><br><span class=\"line\">alert(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,5); //6</span><br><span class=\"line\">fn(2.3); //5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"讲解剖析【选项卡】\"><a href=\"#讲解剖析【选项卡】\" class=\"headerlink\" title=\"讲解剖析【选项卡】\"></a>讲解剖析【选项卡】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把要操作的大盒子和事件通过传参的形式传递</span><br><span class=\"line\">tab(&quot;#wrap&quot;,&quot;onmouseover&quot;);</span><br><span class=\"line\">tab(&quot;#wrap2&quot;,&quot;onclick&quot;);</span><br><span class=\"line\">function tab(id,ev) &#123;</span><br><span class=\"line\">var wrap = document.querySelector(id);</span><br><span class=\"line\">var navs = wrap.querySelectorAll(&apos;nav a&apos;);</span><br><span class=\"line\">var cons = wrap.querySelectorAll(&apos;.cons&gt;div&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; navs.length; i++)&#123;</span><br><span class=\"line\">navs[i].index = i;</span><br><span class=\"line\">navs[i][ev] = function()&#123;</span><br><span class=\"line\">for(var i = 0; i &lt; navs.length; i++)&#123;</span><br><span class=\"line\">navs[i].className = &quot;&quot;;</span><br><span class=\"line\">cons[i].className = &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.className = &quot;active&quot;;</span><br><span class=\"line\">cons[this.index].className = &quot;show&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【选中编辑】\"><a href=\"#讲解剖析【选中编辑】\" class=\"headerlink\" title=\"讲解剖析【选中编辑】\"></a>讲解剖析【选中编辑】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;list&quot;&gt;</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">&lt;span class=&quot;info&quot;&gt;写点啥呢&lt;/span&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;editBtn&quot;&gt;编辑&lt;/a&gt;</span><br><span class=\"line\">&lt;div class=&quot;edit&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot;&gt;确定&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot;&gt;取消&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">具体思路分析：</span><br><span class=\"line\">点击编辑按钮:</span><br><span class=\"line\">1) 找到edit 显示出来</span><br><span class=\"line\">2) 把info的innerHTML，添加给输入框做内容</span><br><span class=\"line\">点击取消按钮：</span><br><span class=\"line\">找到edit 隐藏</span><br><span class=\"line\">点击确定按钮:</span><br><span class=\"line\">1) 判断输入框中的内容如果为空弹出提示，否则执行下边的内容</span><br><span class=\"line\">2)     把输入框的内容添加给span的innerHTML</span><br><span class=\"line\">3)    edit 隐藏</span><br><span class=\"line\">*/    </span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var li = document.querySelectorAll(&apos;.list li&apos;);</span><br><span class=\"line\">// setEdit(li[0]);</span><br><span class=\"line\">// setEdit(li[1]);</span><br><span class=\"line\">// setEdit(li[2]);</span><br><span class=\"line\">for(var i = 0; i &lt; li.length; i++)&#123;</span><br><span class=\"line\">setEdit(li[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function setEdit(li)&#123;</span><br><span class=\"line\">var info = li.querySelector(&apos;.info&apos;);</span><br><span class=\"line\">var editBtn = li.querySelector(&apos;.editBtn&apos;);</span><br><span class=\"line\">var edit = li.querySelector(&apos;.edit&apos;);</span><br><span class=\"line\">var text =  edit.querySelector(&apos;input&apos;);</span><br><span class=\"line\">var btns = edit.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\">editBtn.onclick = function()&#123;</span><br><span class=\"line\">edit.style.display = &quot;block&quot;;</span><br><span class=\"line\">text.value = info.innerHTML;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">btns[0].onclick = function()&#123;</span><br><span class=\"line\">if(text.value == &quot;&quot;) &#123;</span><br><span class=\"line\">alert(&quot;请输入内容&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">info.innerHTML = text.value;</span><br><span class=\"line\">edit.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btns[1].onclick = function()&#123;</span><br><span class=\"line\">edit.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【点击图片切换】\"><a href=\"#讲解剖析【点击图片切换】\" class=\"headerlink\" title=\"讲解剖析【点击图片切换】\"></a>讲解剖析【点击图片切换】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width: 300px;</span><br><span class=\"line\">margin: 30px auto;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.wrap img &#123;</span><br><span class=\"line\">display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">font: 14px/30px &quot;宋体&quot;;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background: rgba(255, 255, 255, .4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p:first-of-type &#123;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p:last-of-type &#123;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 204px;</span><br><span class=\"line\">width: 40px;</span><br><span class=\"line\">height: 40px;</span><br><span class=\"line\">background: #000;</span><br><span class=\"line\">font: 14px/40px Arial;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">text-decoration: none;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:first-of-type &#123;</span><br><span class=\"line\">left: -40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:last-of-type &#123;</span><br><span class=\"line\">right: -40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var data = [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;童童&quot;,</span><br><span class=\"line\">img: &apos;img/1.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;学辉&quot;,</span><br><span class=\"line\">img: &apos;img/2.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;承龙&quot;,</span><br><span class=\"line\">img: &apos;img/3.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;老刘&quot;,</span><br><span class=\"line\">img: &apos;img/4.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;老王&quot;,</span><br><span class=\"line\">img: &apos;img/5.JPG&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var wrap = document.querySelector(&apos;.wrap&apos;);</span><br><span class=\"line\">var img = wrap.querySelector(&apos;img&apos;);</span><br><span class=\"line\">var txt =  wrap.querySelectorAll(&apos;p&apos;);</span><br><span class=\"line\">var btns =  wrap.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\">var now = 0;</span><br><span class=\"line\">btns[0].onclick = function()&#123;</span><br><span class=\"line\">tab(-1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btns[1].onclick = function()&#123;</span><br><span class=\"line\">tab(1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function tab(dis)&#123;</span><br><span class=\"line\">now += dis;</span><br><span class=\"line\">if(now &lt; 0 )&#123;</span><br><span class=\"line\">now = data.length-1;</span><br><span class=\"line\">&#125; else if(now &gt; data.length-1)&#123;</span><br><span class=\"line\">now = 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = data[now][&quot;img&quot;];</span><br><span class=\"line\">txt[0].innerHTML = (now + 1) + &quot;/&quot; + data.length;</span><br><span class=\"line\">txt[1].innerHTML = data[now][&quot;name&quot;];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;    </span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img/1.JPG&quot;&gt;    </span><br><span class=\"line\">&lt;p&gt;1/5&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;童童&lt;/p&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;btn&quot;&gt;prev&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;btn&quot;&gt;next&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h2><blockquote>\n<p>不定参，函数所有参数的集合</p>\n<ul>\n<li>获取其中一个参数：用下标。</li>\n<li>获取参数的总个数：length。</li>\n<li>参数其实就相当于函数的局部变量，只定义形参不传参的话，参数就是undefined<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a,b,c,d) &#123;</span><br><span class=\"line\">alert(c);//undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>有一个函数，传进来的参数是不固定的，现在要计算出所有的参数和。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">console.log(arguments.length);</span><br><span class=\"line\">var nub = 0 ;</span><br><span class=\"line\">for(var i = 0; i &lt; arguments.length; i++)&#123;</span><br><span class=\"line\">nub += arguments[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,1,1);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"返回值return\"><a href=\"#返回值return\" class=\"headerlink\" title=\"返回值return\"></a>返回值return</h2><blockquote>\n<p>每个函数中都可以存储数据，存储的数据，可以再函数执行完成之后拿到。</p>\n<ul>\n<li>return 函数返回值（函数执行完成之后，返回的数据）</li>\n<li>只能在函数中使用</li>\n<li>return 后面跟得值为函数执行后的返回值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">return [1,2,3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b); //1,2,3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>每个函数都有一个返回值，如果我们没有定义，返回值就是undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">var nub = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b);//undefined;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数中 return后边的内容不会被执行(在函数执行时，会把return后边的数据返回，然后函数执行到此结束)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">var nub = 10;</span><br><span class=\"line\">return nub;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(nub*nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解题剖析【封装获取元素】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function $()&#123;//通过id获取元素</span><br><span class=\"line\">return document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">var btn = $();</span><br><span class=\"line\">console.log(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><blockquote>\n<p>函数：function 功能方法:把一个个零散的代码和数据，组合成一个完整的方法.</p>\n</blockquote>\n<h2 id=\"解题剖析【获取样式】\"><a href=\"#解题剖析【获取样式】\" class=\"headerlink\" title=\"解题剖析【获取样式】\"></a>解题剖析【获取样式】</h2><ul>\n<li>getComputedStyle(box)[“width”]//标准下获取计算后的样式（标准下的内置函数）</li>\n<li>box.currentStyle[“width”]//IE下获取计算后的样式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getStyle(el,attr)&#123;</span><br><span class=\"line\">if(el.currentStyle)&#123;</span><br><span class=\"line\">return el.currentStyle[attr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return getComputedStyle(el)[attr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var box = document.getElementById(&apos;box&apos;);</span><br><span class=\"line\">box.onclick = function()&#123;</span><br><span class=\"line\">var left = parseFloat(getStyle(box,&quot;left&quot;));</span><br><span class=\"line\">box.style.legt = left + 5 + &quot;px&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"练习讲解\"><a href=\"#练习讲解\" class=\"headerlink\" title=\"练习讲解\"></a>练习讲解</h2><h3 id=\"console-time\"><a href=\"#console-time\" class=\"headerlink\" title=\"console.time();\"></a>console.time();</h3><blockquote>\n<p>打印执行时间</p>\n</blockquote>\n<h4 id=\"注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\"><a href=\"#注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\" class=\"headerlink\" title=\"注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。\"></a>注意：操作了元素的innerHTML之后，元素子元素上的所有js事件都会失效，除非写的是行间事件。</h4><h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<p>在实际编码中，会有很多的一些代码可能重复出现，为了能简化程序开发，重复利用，所以有了函数的概念。(function功能方法，把一个个零散的带吗和数据，组合成一个完整的方法)</p>\n</blockquote>\n<p>定义函数<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn2 = function()&#123;</span><br><span class=\"line\">alert(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn2();</span><br><span class=\"line\">/*函数调用*/</span><br><span class=\"line\">fn(); //直接调用</span><br><span class=\"line\">document.onclick = fn2;//事件调用</span><br><span class=\"line\">document.onclick();//2</span><br><span class=\"line\">document.onclick();//2</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><blockquote>\n<p>函数表达式 – 匿名函数自执行 </p>\n<ol>\n<li>(函数)();</li>\n<li>!函数();</li>\n<li>~函数();</li>\n<li>+函数();</li>\n<li>-函数();<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">alert(1);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">!function()&#123;</span><br><span class=\"line\">alert(2);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">+function()&#123;</span><br><span class=\"line\">alert(3);</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"传参\"><a href=\"#传参\" class=\"headerlink\" title=\"传参\"></a>传参</h2><blockquote>\n<p>函数拥有多个参数，注意再使用的时候，行参和实参要一一对应。</p>\n</blockquote>\n<ul>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a形参)&#123;</span><br><span class=\"line\">alert(a参数使用);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(实参);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a,b)&#123;</span><br><span class=\"line\">alert(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,5); //6</span><br><span class=\"line\">fn(2.3); //5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"讲解剖析【选项卡】\"><a href=\"#讲解剖析【选项卡】\" class=\"headerlink\" title=\"讲解剖析【选项卡】\"></a>讲解剖析【选项卡】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把要操作的大盒子和事件通过传参的形式传递</span><br><span class=\"line\">tab(&quot;#wrap&quot;,&quot;onmouseover&quot;);</span><br><span class=\"line\">tab(&quot;#wrap2&quot;,&quot;onclick&quot;);</span><br><span class=\"line\">function tab(id,ev) &#123;</span><br><span class=\"line\">var wrap = document.querySelector(id);</span><br><span class=\"line\">var navs = wrap.querySelectorAll(&apos;nav a&apos;);</span><br><span class=\"line\">var cons = wrap.querySelectorAll(&apos;.cons&gt;div&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; navs.length; i++)&#123;</span><br><span class=\"line\">navs[i].index = i;</span><br><span class=\"line\">navs[i][ev] = function()&#123;</span><br><span class=\"line\">for(var i = 0; i &lt; navs.length; i++)&#123;</span><br><span class=\"line\">navs[i].className = &quot;&quot;;</span><br><span class=\"line\">cons[i].className = &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.className = &quot;active&quot;;</span><br><span class=\"line\">cons[this.index].className = &quot;show&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【选中编辑】\"><a href=\"#讲解剖析【选中编辑】\" class=\"headerlink\" title=\"讲解剖析【选中编辑】\"></a>讲解剖析【选中编辑】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;list&quot;&gt;</span><br><span class=\"line\">&lt;li&gt;</span><br><span class=\"line\">&lt;span class=&quot;info&quot;&gt;写点啥呢&lt;/span&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;editBtn&quot;&gt;编辑&lt;/a&gt;</span><br><span class=\"line\">&lt;div class=&quot;edit&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot;&gt;确定&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot;&gt;取消&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">/*</span><br><span class=\"line\">具体思路分析：</span><br><span class=\"line\">点击编辑按钮:</span><br><span class=\"line\">1) 找到edit 显示出来</span><br><span class=\"line\">2) 把info的innerHTML，添加给输入框做内容</span><br><span class=\"line\">点击取消按钮：</span><br><span class=\"line\">找到edit 隐藏</span><br><span class=\"line\">点击确定按钮:</span><br><span class=\"line\">1) 判断输入框中的内容如果为空弹出提示，否则执行下边的内容</span><br><span class=\"line\">2)     把输入框的内容添加给span的innerHTML</span><br><span class=\"line\">3)    edit 隐藏</span><br><span class=\"line\">*/    </span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var li = document.querySelectorAll(&apos;.list li&apos;);</span><br><span class=\"line\">// setEdit(li[0]);</span><br><span class=\"line\">// setEdit(li[1]);</span><br><span class=\"line\">// setEdit(li[2]);</span><br><span class=\"line\">for(var i = 0; i &lt; li.length; i++)&#123;</span><br><span class=\"line\">setEdit(li[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function setEdit(li)&#123;</span><br><span class=\"line\">var info = li.querySelector(&apos;.info&apos;);</span><br><span class=\"line\">var editBtn = li.querySelector(&apos;.editBtn&apos;);</span><br><span class=\"line\">var edit = li.querySelector(&apos;.edit&apos;);</span><br><span class=\"line\">var text =  edit.querySelector(&apos;input&apos;);</span><br><span class=\"line\">var btns = edit.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\">editBtn.onclick = function()&#123;</span><br><span class=\"line\">edit.style.display = &quot;block&quot;;</span><br><span class=\"line\">text.value = info.innerHTML;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">btns[0].onclick = function()&#123;</span><br><span class=\"line\">if(text.value == &quot;&quot;) &#123;</span><br><span class=\"line\">alert(&quot;请输入内容&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">info.innerHTML = text.value;</span><br><span class=\"line\">edit.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btns[1].onclick = function()&#123;</span><br><span class=\"line\">edit.style.display = &quot;none&quot;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"讲解剖析【点击图片切换】\"><a href=\"#讲解剖析【点击图片切换】\" class=\"headerlink\" title=\"讲解剖析【点击图片切换】\"></a>讲解剖析【点击图片切换】</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width: 300px;</span><br><span class=\"line\">margin: 30px auto;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">.wrap img &#123;</span><br><span class=\"line\">display: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">font: 14px/30px &quot;宋体&quot;;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">background: rgba(255, 255, 255, .4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p:first-of-type &#123;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wrap p:last-of-type &#123;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 204px;</span><br><span class=\"line\">width: 40px;</span><br><span class=\"line\">height: 40px;</span><br><span class=\"line\">background: #000;</span><br><span class=\"line\">font: 14px/40px Arial;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">text-decoration: none;</span><br><span class=\"line\">text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:first-of-type &#123;</span><br><span class=\"line\">left: -40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:last-of-type &#123;</span><br><span class=\"line\">right: -40px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var data = [</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;童童&quot;,</span><br><span class=\"line\">img: &apos;img/1.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;学辉&quot;,</span><br><span class=\"line\">img: &apos;img/2.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;承龙&quot;,</span><br><span class=\"line\">img: &apos;img/3.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;老刘&quot;,</span><br><span class=\"line\">img: &apos;img/4.JPG&apos;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name: &quot;老王&quot;,</span><br><span class=\"line\">img: &apos;img/5.JPG&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">window.onload = function() &#123;</span><br><span class=\"line\">var wrap = document.querySelector(&apos;.wrap&apos;);</span><br><span class=\"line\">var img = wrap.querySelector(&apos;img&apos;);</span><br><span class=\"line\">var txt =  wrap.querySelectorAll(&apos;p&apos;);</span><br><span class=\"line\">var btns =  wrap.querySelectorAll(&apos;a&apos;);</span><br><span class=\"line\">var now = 0;</span><br><span class=\"line\">btns[0].onclick = function()&#123;</span><br><span class=\"line\">tab(-1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">btns[1].onclick = function()&#123;</span><br><span class=\"line\">tab(1);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function tab(dis)&#123;</span><br><span class=\"line\">now += dis;</span><br><span class=\"line\">if(now &lt; 0 )&#123;</span><br><span class=\"line\">now = data.length-1;</span><br><span class=\"line\">&#125; else if(now &gt; data.length-1)&#123;</span><br><span class=\"line\">now = 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">img.src = data[now][&quot;img&quot;];</span><br><span class=\"line\">txt[0].innerHTML = (now + 1) + &quot;/&quot; + data.length;</span><br><span class=\"line\">txt[1].innerHTML = data[now][&quot;name&quot;];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;;    </span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;img/1.JPG&quot;&gt;    </span><br><span class=\"line\">&lt;p&gt;1/5&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;童童&lt;/p&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;btn&quot;&gt;prev&lt;/a&gt;</span><br><span class=\"line\">&lt;a href=&quot;javascript:;&quot; class=&quot;btn&quot;&gt;next&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h2><blockquote>\n<p>不定参，函数所有参数的集合</p>\n<ul>\n<li>获取其中一个参数：用下标。</li>\n<li>获取参数的总个数：length。</li>\n<li>参数其实就相当于函数的局部变量，只定义形参不传参的话，参数就是undefined<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a,b,c,d) &#123;</span><br><span class=\"line\">alert(c);//undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>有一个函数，传进来的参数是不固定的，现在要计算出所有的参数和。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">console.log(arguments.length);</span><br><span class=\"line\">var nub = 0 ;</span><br><span class=\"line\">for(var i = 0; i &lt; arguments.length; i++)&#123;</span><br><span class=\"line\">nub += arguments[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,1,1);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"返回值return\"><a href=\"#返回值return\" class=\"headerlink\" title=\"返回值return\"></a>返回值return</h2><blockquote>\n<p>每个函数中都可以存储数据，存储的数据，可以再函数执行完成之后拿到。</p>\n<ul>\n<li>return 函数返回值（函数执行完成之后，返回的数据）</li>\n<li>只能在函数中使用</li>\n<li>return 后面跟得值为函数执行后的返回值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">return [1,2,3];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b); //1,2,3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>每个函数都有一个返回值，如果我们没有定义，返回值就是undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">var nub = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b);//undefined;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数中 return后边的内容不会被执行(在函数执行时，会把return后边的数据返回，然后函数执行到此结束)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">var nub = 10;</span><br><span class=\"line\">return nub;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(nub*nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = a();</span><br><span class=\"line\">alert(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解题剖析【封装获取元素】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function $()&#123;//通过id获取元素</span><br><span class=\"line\">return document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">var btn = $();</span><br><span class=\"line\">console.log(btn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><blockquote>\n<p>函数：function 功能方法:把一个个零散的代码和数据，组合成一个完整的方法.</p>\n</blockquote>\n<h2 id=\"解题剖析【获取样式】\"><a href=\"#解题剖析【获取样式】\" class=\"headerlink\" title=\"解题剖析【获取样式】\"></a>解题剖析【获取样式】</h2><ul>\n<li>getComputedStyle(box)[“width”]//标准下获取计算后的样式（标准下的内置函数）</li>\n<li>box.currentStyle[“width”]//IE下获取计算后的样式<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getStyle(el,attr)&#123;</span><br><span class=\"line\">if(el.currentStyle)&#123;</span><br><span class=\"line\">return el.currentStyle[attr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return getComputedStyle(el)[attr];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var box = document.getElementById(&apos;box&apos;);</span><br><span class=\"line\">box.onclick = function()&#123;</span><br><span class=\"line\">var left = parseFloat(getStyle(box,&quot;left&quot;));</span><br><span class=\"line\">box.style.legt = left + 5 + &quot;px&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"javascript(四)","date":"2019-03-21T08:43:49.000Z","_content":"## 运算符\n- “+”：可以用作连接符，因此当进行加减运算的时候要确保是两个数字类型。\n- 转换方法：可以用*，-，／任何一种运算符进行自动转换。\n- “-”\n- “*”\n- “÷”\n\n## 在js中动态添加元素样式的两种方式\n1. 行间样式。\n2. 给style标签添加innerHTML(但是有优先级的关系)\n<!-- more -->\n\n## for循环\n解析：十行十列\n1. 先循环十行\n2. 再循环十列\n3. i循环执行一次，j循环执行十次。\n```\nfor(var i = 0; i < 10; i++){\nconsole.log('这是第'+i+'行');\n// i循序执行一次 j循环会执行10次\nfor(var j = 0; j < 10; j++) {\nconsole.log('这是第'+j+'列');\n}\n}\n```\n\n计算top值：当前是第n行，n*行高\n\n计算left值：当前是滴n行，n*列高\n\n计算当前是第几个：行数*每行的个数得出这行之前有多少？\n","source":"_posts/javascript-四.md","raw":"---\ntitle: javascript(四)\ndate: 2019-03-21 16:43:49\ntags:\ncategories: JavaScript\n---\n## 运算符\n- “+”：可以用作连接符，因此当进行加减运算的时候要确保是两个数字类型。\n- 转换方法：可以用*，-，／任何一种运算符进行自动转换。\n- “-”\n- “*”\n- “÷”\n\n## 在js中动态添加元素样式的两种方式\n1. 行间样式。\n2. 给style标签添加innerHTML(但是有优先级的关系)\n<!-- more -->\n\n## for循环\n解析：十行十列\n1. 先循环十行\n2. 再循环十列\n3. i循环执行一次，j循环执行十次。\n```\nfor(var i = 0; i < 10; i++){\nconsole.log('这是第'+i+'行');\n// i循序执行一次 j循环会执行10次\nfor(var j = 0; j < 10; j++) {\nconsole.log('这是第'+j+'列');\n}\n}\n```\n\n计算top值：当前是第n行，n*行高\n\n计算left值：当前是滴n行，n*列高\n\n计算当前是第几个：行数*每行的个数得出这行之前有多少？\n","slug":"javascript-四","published":1,"updated":"2019-05-28T09:56:08.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymm000qfw044lssmsjo","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>“+”：可以用作连接符，因此当进行加减运算的时候要确保是两个数字类型。</li>\n<li>转换方法：可以用*，-，／任何一种运算符进行自动转换。</li>\n<li>“-”</li>\n<li>“*”</li>\n<li>“÷”</li>\n</ul>\n<h2 id=\"在js中动态添加元素样式的两种方式\"><a href=\"#在js中动态添加元素样式的两种方式\" class=\"headerlink\" title=\"在js中动态添加元素样式的两种方式\"></a>在js中动态添加元素样式的两种方式</h2><ol>\n<li>行间样式。</li>\n<li>给style标签添加innerHTML(但是有优先级的关系)<a id=\"more\"></a>\n</li>\n</ol>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p>解析：十行十列</p>\n<ol>\n<li>先循环十行</li>\n<li>再循环十列</li>\n<li>i循环执行一次，j循环执行十次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; 10; i++)&#123;</span><br><span class=\"line\">console.log(&apos;这是第&apos;+i+&apos;行&apos;);</span><br><span class=\"line\">// i循序执行一次 j循环会执行10次</span><br><span class=\"line\">for(var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">console.log(&apos;这是第&apos;+j+&apos;列&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>计算top值：当前是第n行，n*行高</p>\n<p>计算left值：当前是滴n行，n*列高</p>\n<p>计算当前是第几个：行数*每行的个数得出这行之前有多少？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li>“+”：可以用作连接符，因此当进行加减运算的时候要确保是两个数字类型。</li>\n<li>转换方法：可以用*，-，／任何一种运算符进行自动转换。</li>\n<li>“-”</li>\n<li>“*”</li>\n<li>“÷”</li>\n</ul>\n<h2 id=\"在js中动态添加元素样式的两种方式\"><a href=\"#在js中动态添加元素样式的两种方式\" class=\"headerlink\" title=\"在js中动态添加元素样式的两种方式\"></a>在js中动态添加元素样式的两种方式</h2><ol>\n<li>行间样式。</li>\n<li>给style标签添加innerHTML(但是有优先级的关系)","more":"</li>\n</ol>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p>解析：十行十列</p>\n<ol>\n<li>先循环十行</li>\n<li>再循环十列</li>\n<li>i循环执行一次，j循环执行十次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 0; i &lt; 10; i++)&#123;</span><br><span class=\"line\">console.log(&apos;这是第&apos;+i+&apos;行&apos;);</span><br><span class=\"line\">// i循序执行一次 j循环会执行10次</span><br><span class=\"line\">for(var j = 0; j &lt; 10; j++) &#123;</span><br><span class=\"line\">console.log(&apos;这是第&apos;+j+&apos;列&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>计算top值：当前是第n行，n*行高</p>\n<p>计算left值：当前是滴n行，n*列高</p>\n<p>计算当前是第几个：行数*每行的个数得出这行之前有多少？</p>"},{"title":"javascript(十一)","date":"2019-03-21T08:43:56.000Z","_content":"## 作用域【scope】\n> 一段程序代码中所用到的数据并不总是有效/可用的，而限定这个数据的可用性的代码范围就是这个名字的作用域。【一条数据可以在哪个范围中使用】\n\n- 作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突\n- 一个变量是全局变量，还是局部变量主要来看变量声明的位置,==声明在函数内部，就是这个函数的局部变量.==\n- 在js的ECMAScript5.1中，只有函数可以产生作用域\n- 当我们声明一个函数的时候，同时该函数就会创建一个属性这个属性是[[Scopes]](作用域),我们在这个函数中 声明的变量都会被存入这个函数的[[Scopes]]属性中\n\n函数外部的变量不可以访问函数内部的局部变量数据。\n<!-- more -->\n\n```\nvar i = 10;\nfunction fn(){\nfor(var i = 0;i<100;i++){\n\n}\n}\nfn();\nalert(i); //10\n原因：因为for循环的时候var(声明)了i，所以i只是作为fn内部的局部变量，alert(i)在外面是不能获取到的。\n```\n第二个var预解析,但是只会把预解析提到当前script(或function)的最前面。\n```\n<script>\nvar i = 0;\n</script>\n<script>\nalert(i); //0\n</script>\n__________________\n<script>\nalert(i);\n</script>\n<script>\nvar i = 0;\n</script>\n```\n### 全局作用域（全局变量）【在任何地方都能访问】\n>没有声明在任何函数内部的变量，就是全局，全局变量在全局的任何地方就可以调用和修改，尽量不要使用全局变量，会造成全局污染\n- ==函数外定义的变量==拥有全局作用域\n- ==不使用var定义的变量==拥有全局作用域\n- ==所有window对象上的属性==拥有全局作用域\n- ==没有声明在任何函数内部==的函数拥有全局作用域\n```\n1.加在window上边的内容作用域属于全局的，\n属于window的属性，可以不用写window，直接写属性名就行\nfunction fn(){\nwindow.nub = 100;\n}    \nfn();\nalert(nub);\n\n\n\n2.变量如果不加声明，就默认认为是window的内容，作用域变成全局了\nfunction fn(){\nnub = 100;\n}    \nfn();\nalert(nub);\n\n3.没有声明在任何函数内部的变量(全局),就是全局变量。\n在全局的任何地方就可以调用和修改,尽量不要使用全局变量，会造成全局污染\nvar nub = 0;\nfunction fn(){\nnub = 10;\n}\nfn();\nalert(nub);\n\n```\n#### 全局命名空间污染：\n>在程序中经常需要引用一些库，如C++编译系统提供的标准库、由第三方软件开发商提供的开发库或者用户自己开发的库等。如果在这些库中含有与程序中定义的全局实体同名的实体，或者不同的库之间有同名的实体，则在编译时都会出现名字冲突，这就称为全局命名空间污染 (命名冲突)\n\n### 局部作用域（局部变量）【只能在函数内部访问】\n- 使用var在函数内部定义的变量,和使用function在函数内部声明的函数,拥有局部作用域\n```\n//i在当前的函数中定义为0，下面的函数中并没有这个i，所以报错\n(function(){\nvar i = 0;\n})();\n(function(){\nalert(i); //报错\n})();\n```\n## 作用域链\n>当我们调用一个变量或者函数的时候，首先会在当前作用域下找该变量和函数的声明，如果当前作用域下没有，则会找当前作用域上一级作用域，直到找到或找到全局作用域下是否有声明，如果还有没有，则报错。\n\n### 变量与函数的查找规则：\n- 当我们调用一条数据的时候，js首先会在当前作用域中进行查找，如果找不到，就向上找到父级的作用域，如果在父级的作用域中也找不到，就继续向上查找，直到window的作用域。如果在window中也找不到，就报错了。如果在当前作用域中找到了，那就用当前的。\n\n## 预解析\n>浏览器每读到一个script标签或function，先不执行任何代码，会先把整个代码快速的浏览一遍，然后从中 挑出 var 和 function两个关键字 .\n- var： 预解析遇到 var 就把 ==var 连同它后边的名字==一块 提到script(或function) 的最前边,预解析完成之后，在从上向下一行一行执行代码，如果碰到了 = 就赋值;\n- function:预解析遇到function,就把整个函数提到提到==script(或function) 的最前边==（跟在var的后边预解析先解析var 再解析 function）\n```\nalert(b);//function b(){console.log(1);}\nfunction b(){\nconsole.log(1);\n}\nvar b = 0;\n解析步骤：\nvar b;\nfunction b(){\nconsole.log(1);\n}\nalert(b);\n```\n```\n<script type=\"text/javascript\">\nalert(b); // function b(){ var b = 10; }\nvar b = 0;\nalert(b); // 0\nfunction b(){ var b = 10; }    \nalert(b); // 0   \nvar b = 20;\nalert(b); //20\nvar b = function(){ var b = 30;}\nalert(b); // function(){ var b = 30;}\n\n解析步骤：\nvar b;\nvar b;\nvar b;\nfunction b(){var b = 10;}\nalert(b);\nvar b = 0;\nalert(b);\nalert(b);\nvar b = 20;\nalert(b);\nvar b = function(){var b = 30;}\nalert(b);\n</script>\n```\n\n```\n<script type=\"text/javascript\">\nalert(a);\n</script>\n<script type=\"text/javascript\">\nvar a = 100;\n</script>\n```\n## 闭包\n>函数嵌套函数产生一个闭包环境，内部函数可以访问外部函数的局部变量数据,但是外部函数不能访问内部函数的局部变量数据。\n\n```\nfunction fn(x) {\nreturn function(y){\nalert(x + y);\n};\n}    \nvar bar = fn(2);\nbar(10);\n\n//解析\nvar bar;\nfunction fn(x){\nreturn function(y){\nalert(x+y);\n};\n}\nvar bar = fn(2);\nvar bar = function(y){\nalert(2+y);\n}\nbar(10);\nfunction bar(10){\nalert(2+10); //12;\n}\n```\n## 闭包应用\n```\nvar btn = document.querySelectorAll('input');\nfunction setEv(nub){\nbtn[nub].onclick = function(){\nalert(nub);\n}\n}\n/*setEv(0);\nsetEv(1);\nsetEv(2);*/\nfor(var i = 0; i < btn.length; i++){\nsetEv(i);\n}\n_________________________\nvar btn = document.querySelectorAll('input');\nfor(var i = 0; i < btn.length; i++){\n//每一次都自执行一次，然后把每次循环的i值通过形参传入\n(function(index){\nbtn[index].onclick = function(){\nalert(index);\n}\n})(i);\n}\n\n——————————————————————————\nvar btn = document.querySelector('input');\nfunction setEv(){\nvar nub = 0;\nreturn function(){\nnub++;\nalert(nub);\n};\n}\n// var fn  = setEv();\n// fn();\n// fn();\nbtn.onclick = setEv();\n\n解析：\nvar nub = 0;\nbtn.onclick = function(){\nnub++;\nalert(nub); //1 2 3 ....\n}\n```\n## 内存泄漏\n问题：当内部函数被外部所引用的时候，那么闭包函数所产生的数据将不会被垃圾回收，可能会造成程序中的数据在内存所占用的空间得不到及时的释放，从而产生内存泄漏。\n","source":"_posts/javascript-十一.md","raw":"---\ntitle: javascript(十一)\ndate: 2019-03-21 16:43:56\ntags:\ncategories: JavaScript\n---\n## 作用域【scope】\n> 一段程序代码中所用到的数据并不总是有效/可用的，而限定这个数据的可用性的代码范围就是这个名字的作用域。【一条数据可以在哪个范围中使用】\n\n- 作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突\n- 一个变量是全局变量，还是局部变量主要来看变量声明的位置,==声明在函数内部，就是这个函数的局部变量.==\n- 在js的ECMAScript5.1中，只有函数可以产生作用域\n- 当我们声明一个函数的时候，同时该函数就会创建一个属性这个属性是[[Scopes]](作用域),我们在这个函数中 声明的变量都会被存入这个函数的[[Scopes]]属性中\n\n函数外部的变量不可以访问函数内部的局部变量数据。\n<!-- more -->\n\n```\nvar i = 10;\nfunction fn(){\nfor(var i = 0;i<100;i++){\n\n}\n}\nfn();\nalert(i); //10\n原因：因为for循环的时候var(声明)了i，所以i只是作为fn内部的局部变量，alert(i)在外面是不能获取到的。\n```\n第二个var预解析,但是只会把预解析提到当前script(或function)的最前面。\n```\n<script>\nvar i = 0;\n</script>\n<script>\nalert(i); //0\n</script>\n__________________\n<script>\nalert(i);\n</script>\n<script>\nvar i = 0;\n</script>\n```\n### 全局作用域（全局变量）【在任何地方都能访问】\n>没有声明在任何函数内部的变量，就是全局，全局变量在全局的任何地方就可以调用和修改，尽量不要使用全局变量，会造成全局污染\n- ==函数外定义的变量==拥有全局作用域\n- ==不使用var定义的变量==拥有全局作用域\n- ==所有window对象上的属性==拥有全局作用域\n- ==没有声明在任何函数内部==的函数拥有全局作用域\n```\n1.加在window上边的内容作用域属于全局的，\n属于window的属性，可以不用写window，直接写属性名就行\nfunction fn(){\nwindow.nub = 100;\n}    \nfn();\nalert(nub);\n\n\n\n2.变量如果不加声明，就默认认为是window的内容，作用域变成全局了\nfunction fn(){\nnub = 100;\n}    \nfn();\nalert(nub);\n\n3.没有声明在任何函数内部的变量(全局),就是全局变量。\n在全局的任何地方就可以调用和修改,尽量不要使用全局变量，会造成全局污染\nvar nub = 0;\nfunction fn(){\nnub = 10;\n}\nfn();\nalert(nub);\n\n```\n#### 全局命名空间污染：\n>在程序中经常需要引用一些库，如C++编译系统提供的标准库、由第三方软件开发商提供的开发库或者用户自己开发的库等。如果在这些库中含有与程序中定义的全局实体同名的实体，或者不同的库之间有同名的实体，则在编译时都会出现名字冲突，这就称为全局命名空间污染 (命名冲突)\n\n### 局部作用域（局部变量）【只能在函数内部访问】\n- 使用var在函数内部定义的变量,和使用function在函数内部声明的函数,拥有局部作用域\n```\n//i在当前的函数中定义为0，下面的函数中并没有这个i，所以报错\n(function(){\nvar i = 0;\n})();\n(function(){\nalert(i); //报错\n})();\n```\n## 作用域链\n>当我们调用一个变量或者函数的时候，首先会在当前作用域下找该变量和函数的声明，如果当前作用域下没有，则会找当前作用域上一级作用域，直到找到或找到全局作用域下是否有声明，如果还有没有，则报错。\n\n### 变量与函数的查找规则：\n- 当我们调用一条数据的时候，js首先会在当前作用域中进行查找，如果找不到，就向上找到父级的作用域，如果在父级的作用域中也找不到，就继续向上查找，直到window的作用域。如果在window中也找不到，就报错了。如果在当前作用域中找到了，那就用当前的。\n\n## 预解析\n>浏览器每读到一个script标签或function，先不执行任何代码，会先把整个代码快速的浏览一遍，然后从中 挑出 var 和 function两个关键字 .\n- var： 预解析遇到 var 就把 ==var 连同它后边的名字==一块 提到script(或function) 的最前边,预解析完成之后，在从上向下一行一行执行代码，如果碰到了 = 就赋值;\n- function:预解析遇到function,就把整个函数提到提到==script(或function) 的最前边==（跟在var的后边预解析先解析var 再解析 function）\n```\nalert(b);//function b(){console.log(1);}\nfunction b(){\nconsole.log(1);\n}\nvar b = 0;\n解析步骤：\nvar b;\nfunction b(){\nconsole.log(1);\n}\nalert(b);\n```\n```\n<script type=\"text/javascript\">\nalert(b); // function b(){ var b = 10; }\nvar b = 0;\nalert(b); // 0\nfunction b(){ var b = 10; }    \nalert(b); // 0   \nvar b = 20;\nalert(b); //20\nvar b = function(){ var b = 30;}\nalert(b); // function(){ var b = 30;}\n\n解析步骤：\nvar b;\nvar b;\nvar b;\nfunction b(){var b = 10;}\nalert(b);\nvar b = 0;\nalert(b);\nalert(b);\nvar b = 20;\nalert(b);\nvar b = function(){var b = 30;}\nalert(b);\n</script>\n```\n\n```\n<script type=\"text/javascript\">\nalert(a);\n</script>\n<script type=\"text/javascript\">\nvar a = 100;\n</script>\n```\n## 闭包\n>函数嵌套函数产生一个闭包环境，内部函数可以访问外部函数的局部变量数据,但是外部函数不能访问内部函数的局部变量数据。\n\n```\nfunction fn(x) {\nreturn function(y){\nalert(x + y);\n};\n}    \nvar bar = fn(2);\nbar(10);\n\n//解析\nvar bar;\nfunction fn(x){\nreturn function(y){\nalert(x+y);\n};\n}\nvar bar = fn(2);\nvar bar = function(y){\nalert(2+y);\n}\nbar(10);\nfunction bar(10){\nalert(2+10); //12;\n}\n```\n## 闭包应用\n```\nvar btn = document.querySelectorAll('input');\nfunction setEv(nub){\nbtn[nub].onclick = function(){\nalert(nub);\n}\n}\n/*setEv(0);\nsetEv(1);\nsetEv(2);*/\nfor(var i = 0; i < btn.length; i++){\nsetEv(i);\n}\n_________________________\nvar btn = document.querySelectorAll('input');\nfor(var i = 0; i < btn.length; i++){\n//每一次都自执行一次，然后把每次循环的i值通过形参传入\n(function(index){\nbtn[index].onclick = function(){\nalert(index);\n}\n})(i);\n}\n\n——————————————————————————\nvar btn = document.querySelector('input');\nfunction setEv(){\nvar nub = 0;\nreturn function(){\nnub++;\nalert(nub);\n};\n}\n// var fn  = setEv();\n// fn();\n// fn();\nbtn.onclick = setEv();\n\n解析：\nvar nub = 0;\nbtn.onclick = function(){\nnub++;\nalert(nub); //1 2 3 ....\n}\n```\n## 内存泄漏\n问题：当内部函数被外部所引用的时候，那么闭包函数所产生的数据将不会被垃圾回收，可能会造成程序中的数据在内存所占用的空间得不到及时的释放，从而产生内存泄漏。\n","slug":"javascript-十一","published":1,"updated":"2019-05-28T09:56:01.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymn000sfw04ikhc4fyv","content":"<h2 id=\"作用域【scope】\"><a href=\"#作用域【scope】\" class=\"headerlink\" title=\"作用域【scope】\"></a>作用域【scope】</h2><blockquote>\n<p>一段程序代码中所用到的数据并不总是有效/可用的，而限定这个数据的可用性的代码范围就是这个名字的作用域。【一条数据可以在哪个范围中使用】</p>\n</blockquote>\n<ul>\n<li>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突</li>\n<li>一个变量是全局变量，还是局部变量主要来看变量声明的位置,==声明在函数内部，就是这个函数的局部变量.==</li>\n<li>在js的ECMAScript5.1中，只有函数可以产生作用域</li>\n<li>当我们声明一个函数的时候，同时该函数就会创建一个属性这个属性是<a href=\"作用域\">[Scopes]</a>,我们在这个函数中 声明的变量都会被存入这个函数的[[Scopes]]属性中</li>\n</ul>\n<p>函数外部的变量不可以访问函数内部的局部变量数据。<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 10;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">for(var i = 0;i&lt;100;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(i); //10</span><br><span class=\"line\">原因：因为for循环的时候var(声明)了i，所以i只是作为fn内部的局部变量，alert(i)在外面是不能获取到的。</span><br></pre></td></tr></table></figure>\n<p>第二个var预解析,但是只会把预解析提到当前script(或function)的最前面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">alert(i); //0</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">__________________</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">alert(i);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全局作用域（全局变量）【在任何地方都能访问】\"><a href=\"#全局作用域（全局变量）【在任何地方都能访问】\" class=\"headerlink\" title=\"全局作用域（全局变量）【在任何地方都能访问】\"></a>全局作用域（全局变量）【在任何地方都能访问】</h3><blockquote>\n<p>没有声明在任何函数内部的变量，就是全局，全局变量在全局的任何地方就可以调用和修改，尽量不要使用全局变量，会造成全局污染</p>\n<ul>\n<li>==函数外定义的变量==拥有全局作用域</li>\n<li>==不使用var定义的变量==拥有全局作用域</li>\n<li>==所有window对象上的属性==拥有全局作用域</li>\n<li>==没有声明在任何函数内部==的函数拥有全局作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.加在window上边的内容作用域属于全局的，</span><br><span class=\"line\">属于window的属性，可以不用写window，直接写属性名就行</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">window.nub = 100;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.变量如果不加声明，就默认认为是window的内容，作用域变成全局了</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">nub = 100;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\"></span><br><span class=\"line\">3.没有声明在任何函数内部的变量(全局),就是全局变量。</span><br><span class=\"line\">在全局的任何地方就可以调用和修改,尽量不要使用全局变量，会造成全局污染</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">nub = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"全局命名空间污染：\"><a href=\"#全局命名空间污染：\" class=\"headerlink\" title=\"全局命名空间污染：\"></a>全局命名空间污染：</h4><blockquote>\n<p>在程序中经常需要引用一些库，如C++编译系统提供的标准库、由第三方软件开发商提供的开发库或者用户自己开发的库等。如果在这些库中含有与程序中定义的全局实体同名的实体，或者不同的库之间有同名的实体，则在编译时都会出现名字冲突，这就称为全局命名空间污染 (命名冲突)</p>\n</blockquote>\n<h3 id=\"局部作用域（局部变量）【只能在函数内部访问】\"><a href=\"#局部作用域（局部变量）【只能在函数内部访问】\" class=\"headerlink\" title=\"局部作用域（局部变量）【只能在函数内部访问】\"></a>局部作用域（局部变量）【只能在函数内部访问】</h3><ul>\n<li>使用var在函数内部定义的变量,和使用function在函数内部声明的函数,拥有局部作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//i在当前的函数中定义为0，下面的函数中并没有这个i，所以报错</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">alert(i); //报错</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><blockquote>\n<p>当我们调用一个变量或者函数的时候，首先会在当前作用域下找该变量和函数的声明，如果当前作用域下没有，则会找当前作用域上一级作用域，直到找到或找到全局作用域下是否有声明，如果还有没有，则报错。</p>\n</blockquote>\n<h3 id=\"变量与函数的查找规则：\"><a href=\"#变量与函数的查找规则：\" class=\"headerlink\" title=\"变量与函数的查找规则：\"></a>变量与函数的查找规则：</h3><ul>\n<li>当我们调用一条数据的时候，js首先会在当前作用域中进行查找，如果找不到，就向上找到父级的作用域，如果在父级的作用域中也找不到，就继续向上查找，直到window的作用域。如果在window中也找不到，就报错了。如果在当前作用域中找到了，那就用当前的。</li>\n</ul>\n<h2 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h2><blockquote>\n<p>浏览器每读到一个script标签或function，先不执行任何代码，会先把整个代码快速的浏览一遍，然后从中 挑出 var 和 function两个关键字 .</p>\n<ul>\n<li>var： 预解析遇到 var 就把 ==var 连同它后边的名字==一块 提到script(或function) 的最前边,预解析完成之后，在从上向下一行一行执行代码，如果碰到了 = 就赋值;</li>\n<li>function:预解析遇到function,就把整个函数提到提到==script(或function) 的最前边==（跟在var的后边预解析先解析var 再解析 function）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(b);//function b()&#123;console.log(1);&#125;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">解析步骤：</span><br><span class=\"line\">var b;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">alert(b); // function b()&#123; var b = 10; &#125;</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">alert(b); // 0</span><br><span class=\"line\">function b()&#123; var b = 10; &#125;    </span><br><span class=\"line\">alert(b); // 0   </span><br><span class=\"line\">var b = 20;</span><br><span class=\"line\">alert(b); //20</span><br><span class=\"line\">var b = function()&#123; var b = 30;&#125;</span><br><span class=\"line\">alert(b); // function()&#123; var b = 30;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解析步骤：</span><br><span class=\"line\">var b;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">function b()&#123;var b = 10;&#125;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = 20;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = function()&#123;var b = 30;&#125;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">alert(a);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var a = 100;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>函数嵌套函数产生一个闭包环境，内部函数可以访问外部函数的局部变量数据,但是外部函数不能访问内部函数的局部变量数据。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(x) &#123;</span><br><span class=\"line\">return function(y)&#123;</span><br><span class=\"line\">alert(x + y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">var bar = fn(2);</span><br><span class=\"line\">bar(10);</span><br><span class=\"line\"></span><br><span class=\"line\">//解析</span><br><span class=\"line\">var bar;</span><br><span class=\"line\">function fn(x)&#123;</span><br><span class=\"line\">return function(y)&#123;</span><br><span class=\"line\">alert(x+y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = fn(2);</span><br><span class=\"line\">var bar = function(y)&#123;</span><br><span class=\"line\">alert(2+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(10);</span><br><span class=\"line\">function bar(10)&#123;</span><br><span class=\"line\">alert(2+10); //12;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包应用\"><a href=\"#闭包应用\" class=\"headerlink\" title=\"闭包应用\"></a>闭包应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">function setEv(nub)&#123;</span><br><span class=\"line\">btn[nub].onclick = function()&#123;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*setEv(0);</span><br><span class=\"line\">setEv(1);</span><br><span class=\"line\">setEv(2);*/</span><br><span class=\"line\">for(var i = 0; i &lt; btn.length; i++)&#123;</span><br><span class=\"line\">setEv(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_________________________</span><br><span class=\"line\">var btn = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; btn.length; i++)&#123;</span><br><span class=\"line\">//每一次都自执行一次，然后把每次循环的i值通过形参传入</span><br><span class=\"line\">(function(index)&#123;</span><br><span class=\"line\">btn[index].onclick = function()&#123;</span><br><span class=\"line\">alert(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">——————————————————————————</span><br><span class=\"line\">var btn = document.querySelector(&apos;input&apos;);</span><br><span class=\"line\">function setEv()&#123;</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">return function()&#123;</span><br><span class=\"line\">nub++;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// var fn  = setEv();</span><br><span class=\"line\">// fn();</span><br><span class=\"line\">// fn();</span><br><span class=\"line\">btn.onclick = setEv();</span><br><span class=\"line\"></span><br><span class=\"line\">解析：</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">btn.onclick = function()&#123;</span><br><span class=\"line\">nub++;</span><br><span class=\"line\">alert(nub); //1 2 3 ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>问题：当内部函数被外部所引用的时候，那么闭包函数所产生的数据将不会被垃圾回收，可能会造成程序中的数据在内存所占用的空间得不到及时的释放，从而产生内存泄漏。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"作用域【scope】\"><a href=\"#作用域【scope】\" class=\"headerlink\" title=\"作用域【scope】\"></a>作用域【scope】</h2><blockquote>\n<p>一段程序代码中所用到的数据并不总是有效/可用的，而限定这个数据的可用性的代码范围就是这个名字的作用域。【一条数据可以在哪个范围中使用】</p>\n</blockquote>\n<ul>\n<li>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突</li>\n<li>一个变量是全局变量，还是局部变量主要来看变量声明的位置,==声明在函数内部，就是这个函数的局部变量.==</li>\n<li>在js的ECMAScript5.1中，只有函数可以产生作用域</li>\n<li>当我们声明一个函数的时候，同时该函数就会创建一个属性这个属性是<a href=\"作用域\">[Scopes]</a>,我们在这个函数中 声明的变量都会被存入这个函数的[[Scopes]]属性中</li>\n</ul>\n<p>函数外部的变量不可以访问函数内部的局部变量数据。<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 10;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">for(var i = 0;i&lt;100;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(i); //10</span><br><span class=\"line\">原因：因为for循环的时候var(声明)了i，所以i只是作为fn内部的局部变量，alert(i)在外面是不能获取到的。</span><br></pre></td></tr></table></figure>\n<p>第二个var预解析,但是只会把预解析提到当前script(或function)的最前面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">alert(i); //0</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">__________________</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">alert(i);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全局作用域（全局变量）【在任何地方都能访问】\"><a href=\"#全局作用域（全局变量）【在任何地方都能访问】\" class=\"headerlink\" title=\"全局作用域（全局变量）【在任何地方都能访问】\"></a>全局作用域（全局变量）【在任何地方都能访问】</h3><blockquote>\n<p>没有声明在任何函数内部的变量，就是全局，全局变量在全局的任何地方就可以调用和修改，尽量不要使用全局变量，会造成全局污染</p>\n<ul>\n<li>==函数外定义的变量==拥有全局作用域</li>\n<li>==不使用var定义的变量==拥有全局作用域</li>\n<li>==所有window对象上的属性==拥有全局作用域</li>\n<li>==没有声明在任何函数内部==的函数拥有全局作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.加在window上边的内容作用域属于全局的，</span><br><span class=\"line\">属于window的属性，可以不用写window，直接写属性名就行</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">window.nub = 100;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.变量如果不加声明，就默认认为是window的内容，作用域变成全局了</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">nub = 100;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\"></span><br><span class=\"line\">3.没有声明在任何函数内部的变量(全局),就是全局变量。</span><br><span class=\"line\">在全局的任何地方就可以调用和修改,尽量不要使用全局变量，会造成全局污染</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">nub = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn();</span><br><span class=\"line\">alert(nub);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"全局命名空间污染：\"><a href=\"#全局命名空间污染：\" class=\"headerlink\" title=\"全局命名空间污染：\"></a>全局命名空间污染：</h4><blockquote>\n<p>在程序中经常需要引用一些库，如C++编译系统提供的标准库、由第三方软件开发商提供的开发库或者用户自己开发的库等。如果在这些库中含有与程序中定义的全局实体同名的实体，或者不同的库之间有同名的实体，则在编译时都会出现名字冲突，这就称为全局命名空间污染 (命名冲突)</p>\n</blockquote>\n<h3 id=\"局部作用域（局部变量）【只能在函数内部访问】\"><a href=\"#局部作用域（局部变量）【只能在函数内部访问】\" class=\"headerlink\" title=\"局部作用域（局部变量）【只能在函数内部访问】\"></a>局部作用域（局部变量）【只能在函数内部访问】</h3><ul>\n<li>使用var在函数内部定义的变量,和使用function在函数内部声明的函数,拥有局部作用域<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//i在当前的函数中定义为0，下面的函数中并没有这个i，所以报错</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">var i = 0;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">alert(i); //报错</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><blockquote>\n<p>当我们调用一个变量或者函数的时候，首先会在当前作用域下找该变量和函数的声明，如果当前作用域下没有，则会找当前作用域上一级作用域，直到找到或找到全局作用域下是否有声明，如果还有没有，则报错。</p>\n</blockquote>\n<h3 id=\"变量与函数的查找规则：\"><a href=\"#变量与函数的查找规则：\" class=\"headerlink\" title=\"变量与函数的查找规则：\"></a>变量与函数的查找规则：</h3><ul>\n<li>当我们调用一条数据的时候，js首先会在当前作用域中进行查找，如果找不到，就向上找到父级的作用域，如果在父级的作用域中也找不到，就继续向上查找，直到window的作用域。如果在window中也找不到，就报错了。如果在当前作用域中找到了，那就用当前的。</li>\n</ul>\n<h2 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h2><blockquote>\n<p>浏览器每读到一个script标签或function，先不执行任何代码，会先把整个代码快速的浏览一遍，然后从中 挑出 var 和 function两个关键字 .</p>\n<ul>\n<li>var： 预解析遇到 var 就把 ==var 连同它后边的名字==一块 提到script(或function) 的最前边,预解析完成之后，在从上向下一行一行执行代码，如果碰到了 = 就赋值;</li>\n<li>function:预解析遇到function,就把整个函数提到提到==script(或function) 的最前边==（跟在var的后边预解析先解析var 再解析 function）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(b);//function b()&#123;console.log(1);&#125;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">解析步骤：</span><br><span class=\"line\">var b;</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(b);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">alert(b); // function b()&#123; var b = 10; &#125;</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">alert(b); // 0</span><br><span class=\"line\">function b()&#123; var b = 10; &#125;    </span><br><span class=\"line\">alert(b); // 0   </span><br><span class=\"line\">var b = 20;</span><br><span class=\"line\">alert(b); //20</span><br><span class=\"line\">var b = function()&#123; var b = 30;&#125;</span><br><span class=\"line\">alert(b); // function()&#123; var b = 30;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解析步骤：</span><br><span class=\"line\">var b;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">function b()&#123;var b = 10;&#125;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = 0;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = 20;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">var b = function()&#123;var b = 30;&#125;</span><br><span class=\"line\">alert(b);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">alert(a);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var a = 100;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>函数嵌套函数产生一个闭包环境，内部函数可以访问外部函数的局部变量数据,但是外部函数不能访问内部函数的局部变量数据。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(x) &#123;</span><br><span class=\"line\">return function(y)&#123;</span><br><span class=\"line\">alert(x + y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">var bar = fn(2);</span><br><span class=\"line\">bar(10);</span><br><span class=\"line\"></span><br><span class=\"line\">//解析</span><br><span class=\"line\">var bar;</span><br><span class=\"line\">function fn(x)&#123;</span><br><span class=\"line\">return function(y)&#123;</span><br><span class=\"line\">alert(x+y);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bar = fn(2);</span><br><span class=\"line\">var bar = function(y)&#123;</span><br><span class=\"line\">alert(2+y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar(10);</span><br><span class=\"line\">function bar(10)&#123;</span><br><span class=\"line\">alert(2+10); //12;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包应用\"><a href=\"#闭包应用\" class=\"headerlink\" title=\"闭包应用\"></a>闭包应用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">function setEv(nub)&#123;</span><br><span class=\"line\">btn[nub].onclick = function()&#123;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*setEv(0);</span><br><span class=\"line\">setEv(1);</span><br><span class=\"line\">setEv(2);*/</span><br><span class=\"line\">for(var i = 0; i &lt; btn.length; i++)&#123;</span><br><span class=\"line\">setEv(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_________________________</span><br><span class=\"line\">var btn = document.querySelectorAll(&apos;input&apos;);</span><br><span class=\"line\">for(var i = 0; i &lt; btn.length; i++)&#123;</span><br><span class=\"line\">//每一次都自执行一次，然后把每次循环的i值通过形参传入</span><br><span class=\"line\">(function(index)&#123;</span><br><span class=\"line\">btn[index].onclick = function()&#123;</span><br><span class=\"line\">alert(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">——————————————————————————</span><br><span class=\"line\">var btn = document.querySelector(&apos;input&apos;);</span><br><span class=\"line\">function setEv()&#123;</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">return function()&#123;</span><br><span class=\"line\">nub++;</span><br><span class=\"line\">alert(nub);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// var fn  = setEv();</span><br><span class=\"line\">// fn();</span><br><span class=\"line\">// fn();</span><br><span class=\"line\">btn.onclick = setEv();</span><br><span class=\"line\"></span><br><span class=\"line\">解析：</span><br><span class=\"line\">var nub = 0;</span><br><span class=\"line\">btn.onclick = function()&#123;</span><br><span class=\"line\">nub++;</span><br><span class=\"line\">alert(nub); //1 2 3 ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>问题：当内部函数被外部所引用的时候，那么闭包函数所产生的数据将不会被垃圾回收，可能会造成程序中的数据在内存所占用的空间得不到及时的释放，从而产生内存泄漏。</p>"},{"title":"成熟的夜间模式方案","date":"2019-02-20T04:08:14.000Z","_content":" [DKNightVersion](https://github.com/Draveness/DKNightVersion) 摘自这个框架的设计者。\n\n其实夜间模式的实现就是相当于**多主题加颜色管理**。而最新版本的 [DKNightVersion](https://github.com/Draveness/DKNightVersion) 已经很好的解决了这个问题。\n\n在正式介绍目前版本的实现之前，我会先简单介绍一下 1.0 时代的 DKNightVersion 的实现，为各位读者带来一些新的思路，也确实想梳理一下这个框架是如何演变的。\n\n> 我们会以对 `backgroundColor` 为例说明整个框架的工作原理。\n<!-- more -->\n\n<p align='center'>\n<img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\">\n</p>\n\n## 方法调剂的版本\n\n如何在不改变原有的架构，甚至不改变原有的代码的基础上，为应用优雅地添加夜间模式成为很多开发者不得不面对的问题。这也是 1.0 时代的 DKNightVersion 想要实现的目标。\n\n其核心思路就是**使用方法调剂修改 `backgroundColor` 的存取方法**。\n\n### 使用 nightBackgroundColor\n\n在思考之后，我想到，想要在不改动原有代码的基础上实现夜间模式只能通过在**分类**中添加 `nightBackgroundColor` 属性，并且使用方法调剂改变 `backgroundColor` 的 setter 方法。\n\n```objectivec\n- (void)hook_setBackgroundColor:(UIColor*)backgroundColor {\nif ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) {\n[self setNormalBackgroundColor:backgroundColor];\n}\n[self hook_setBackgroundColor:backgroundColor];\n}\n```\n\n在当前主题为 `DKThemeVersionNormal` 时，将颜色保存至 `normalBackgroundColor` 中，然后再调用原 `backgroundColor` 的 setter 方法，更新视图的颜色。\n\n### DKNightVersionManager\n\n这里只解决了颜色设置的问题，下面会说明，如果在主题改变时，实时更新颜色，而不用重新进入当前页面。\n\n整个 DKNightVersion 都是由一个 `DKNightVersionManager` 的单例来管理的，而它的主要工作就是负责**改变应用的主题**、并在主题改变时**通知其它视图更新颜色**：\n\n```objectivec\n- (void)changeColor:(id <DKNightVersionChangeColorProtocol>)object {\nif ([object respondsToSelector:@selector(changeColor)]) {\n[object changeColor];\n}\nif ([object respondsToSelector:@selector(subviews)]) {\nif (![object subviews]) {\n// Basic case, do nothing.\nreturn;\n} else {\nfor (id subview in [object subviews]) {\n// recursive darken all the subviews of current view.\n[self changeColor:subview];\nif ([subview respondsToSelector:@selector(changeColor)]) {\n[subview changeColor];\n}\n}\n}\n}\n}\n```\n\n如果主题更新，那么就会递归地调用 `changeColor` 方法，刷新全部的视图颜色，而这个方法的实现比较简单：\n\n```objectivec\n- (void)changeColor {\nif ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) {\nself.backgroundColor = self.normalBackgroundColor;\n} else {\nself.backgroundColor = self.nightBackgroundColor;\n}\n}\n```\n\n上面就是整个框架在 1.0 版本时的实现思路。不过这个版本的 DKNightVersion 在实际应用中会有比较多的问题：\n\n1. 在高速滚动的 `scrollView` 上面来回切换夜间模式，会出现颜色错乱的问题\n2. 由于对 `backgroundColor` 属性进行**不合适的**方法调剂，其行为无法预测，比如：在设置颜色后，再取出，不一定与设置时传入的颜色相同\n2. 无法适配第三方 UI 控件\n\n## 使用色表的版本\n\n为了解决 1.0 中的各种问题，我决定在 2.0 版本中放弃对 `nightBackgroundColor` 的使用，并且重新设计底层的实现，转而使用更为**稳定**、**安全**的方法实现夜间模式，先看一下效果图：\n\n<p align='center'>\n<img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\">\n</p>\n<p align='center'>\n<em>新的实现不仅能够支持夜间模式，而且能够支持多主题。</em>\n</p>\n\n### DKColorPicker\n\n与上一个版本实现上的不同，在 2.0 中删除了全部的 `nightBackgroundColor`，使用一个名为 `dk_backgroundColorPicker` 的属性取代它。\n\n```objectivec\n@property (nonatomic, copy) DKColorPicker dk_backgroundColorPicker;\n```\n\n这个属性其实就是一个 block，它接收参数 `DKThemeVersion *themeVersion`，但是会返回一个 `UIColor *`：\n\n> 在第一次传入 picker 或者每次主题改变时，都会将当前主题 `DKThemeVersion` 传入 picker 并执行，然后，将得到的 `UIColor` 赋值给对应的属性 `backgroundColor` 更新视图颜色。\n\n```objectivec\ntypedef UIColor *(^DKColorPicker)(DKThemeVersion *themeVersion);\n```\n\n比如下面使用 `DKColorPickerWithRGB` 创建一个临时的 `DKColorPicker`：\n\n1. 在 `DKThemeVersionNormal` 时返回 `0xffffff`\n2. 在 `DKThemeVersionNight` 时返回 `0x343434`\n3. 在自定义的主题下返回 `0xfafafa` （这里的顺序与色表中主题的顺序有关）\n\n```objectivec\ncell.dk_backgroundColorPicker = DKColorPickerWithRGB(0xffffff, 0x343434, 0xfafafa);\n```\n\n同时，每一个对象还持有一个 `pickers` 数组，来存储自己的全部 `DKColorPicker`：\n\n```objectivec\n@interface NSObject ()\n\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers;\n\n@end\n```\n\n在第一次使用这个属性时，当前对象注册为 `DKNightVersionThemeChangingNotificaiton` 通知的观察者。\n\n在每次收到通知时，都会调用 `night_update` 方法，将当前主题传入 `DKColorPicker`，并再次执行，并将结果传入对应的属性 `[self performSelector:sel withObject:result]`。\n\n```objectivec\n- (void)night_updateColor {\n[self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull selector, DKColorPicker  _Nonnull picker, BOOL * _Nonnull stop) {\nSEL sel = NSSelectorFromString(selector);\nid result = picker(self.dk_manager.themeVersion);\n[UIView animateWithDuration:DKNightVersionAnimationDuration\nanimations:^{\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"\n[self performSelector:sel withObject:result];\n#pragma clang diagnostic pop\n}];\n}];\n}\n```\n\n也就是说，在每次改变主题的时候，都会发出通知。\n\n### DKColorTable\n\n虽然我们在上面临时创建了一些 `DKColorPicker`。不过在 `DKNightVersion` 中，我更推荐使用色表，来减少相同的 `DKColorPicker` 的创建，并且能够更好地管理整个应用中的颜色：\n\n```objectivec\nNORMAL   NIGHT    RED\n#ffffff  #343434  #fafafa BG\n#aaaaaa  #313131  #aaaaaa SEP\n#0000ff  #ffffff  #fa0000 TINT\n#000000  #ffffff  #000000 TEXT\n#ffffff  #444444  #ffffff BAR\n```\n\n上面就是默认色表文件 `DKColorTable.txt` 中的内容，其中，第一行表示主题，`NORMAL` 主题必须存在，而且必须为第一列，而最右面的 `BG`、`SEP` 就是对应 `DKColorPicker` 的 key。\n\n```objectivec\nself.tableView.dk_backgroundColorPicker =  DKColorPickerWithKey(BG);\n```\n\n在使用时，上面的代码就相当于返回了一个在 `NORMAL` 时返回 `#ffffff`、`NIGHT` 时返回 `#343434` 以及 `RED` 时返回 `#fafafa` 的 `DKColorPicker`。\n\n### pickerify\n\n虽然说，我们使用色表以及 `DKColorPicker` 解决了，但是，到目前为止我们还没有解决第三方框架的问题。\n\n比如我们使用了某个第三方框架，或者自己添加了某个 `color` 属性，比如说：\n\n```objectivec\n@interface DKView ()\n\n@property (nonatomic, strong) UIColor *weirdColor;\n\n@end\n```\n\n`weirdColor` 并没有对应的 `DKColorPicker`，但是，我们可以通过 `pickerify` 在想要使用 `dk_weirdColorPicker` 的地方生成这个对应的 picker：\n\n```objectivec\n@pickerify(DKView, weirdColor);\n```\n\n然后，我们就可以使用 `dk_weirdColorPicker` 属性了：\n\n```objectivec\nview.dk_weirdColorPicker = DKColorPickerWithKey(BG);\n```\n\n`pickerify` 其实是一个宏：\n\n```objectivec\n#define pickerify(KLASS, PROPERTY) interface \\\nKLASS (Night) \\\n@property (nonatomic, copy, setter = dk_set ## PROPERTY ## Picker:) DKColorPicker dk_ ## PROPERTY ## Picker; \\\n@end \\\n@interface \\\nKLASS () \\\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers; \\\n@end \\\n@implementation \\\nKLASS (Night) \\\n- (DKColorPicker)dk_ ## PROPERTY ## Picker { \\\nreturn objc_getAssociatedObject(self, @selector(dk_ ## PROPERTY ## Picker)); \\\n} \\\n- (void)dk_set ## PROPERTY ## Picker:(DKColorPicker)picker { \\\nobjc_setAssociatedObject(self, @selector(dk_ ## PROPERTY ## Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC); \\\n[self setValue:picker(self.dk_manager.themeVersion) forKeyPath:@keypath(self, PROPERTY)];\\\n[self.pickers setValue:[picker copy] forKey:_DKSetterWithPROPERTYerty(@#PROPERTY)]; \\\n} \\\n@end\n```\n\n这个宏根据传入的类和属性名，为我们生成了对应 `picker` 的存取方法，它也可以说是一种元编程的手段。\n\n> 这里生成的 setter 方法不是标准意义上的驼峰命名法 `dk_setweirdColorPicker:`，因为我不知道怎么才能让大写首字母之后的属性添加到这里（如果各位读者有解决方案，欢迎提 PR 或者 issue）。\n\n## 嵌入式 Ruby\n\n由于框架中很多的代码，都是重复的，所以在这里使用了**嵌入式 Ruby 模板**来生成对应的文件 `color.m.irb`：\n\n```objectivec\n//\n//  <%= klass.name %>+Night.m\n//  <%= klass.name %>+Night\n//\n//  Copyright (c) 2015 Draveness. All rights reserved.\n//\n//  These files are generated by ruby script, if you want to modify code\n//  in this file, you are supposed to update the ruby code, run it and\n//  test it. And finally open a pull request.\n\n#import \"<%= klass.name %>+Night.h\"\n#import \"DKNightVersionManager.h\"\n#import <objc/runtime.h>\n\n@interface <%= klass.name %> ()\n\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers;\n\n@end\n\n@implementation <%= klass.name %> (Night)\n\n<% klass.properties.each do |property| %><%= \"\"\"\n- (DKColorPicker)dk_#{property.name}Picker {\nreturn objc_getAssociatedObject(self, @selector(dk_#{property.name}Picker));\n}\n\n- (void)dk_set#{property.cap_name}Picker:(DKColorPicker)picker {\nobjc_setAssociatedObject(self, @selector(dk_#{property.name}Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);\nself.#{property.name} = picker(self.dk_manager.themeVersion);\n[self.pickers setValue:[picker copy] forKey:@\\\"#{property.setter}\\\"];\n}\n\"\"\" %><% end %>\n\n@end\n```\n\n","source":"_posts/成熟的夜间模式方案.md","raw":"---\ntitle: 成熟的夜间模式方案\ndate: 2019-02-20 12:08:14\ntags:\ncategories: iOS\n---\n [DKNightVersion](https://github.com/Draveness/DKNightVersion) 摘自这个框架的设计者。\n\n其实夜间模式的实现就是相当于**多主题加颜色管理**。而最新版本的 [DKNightVersion](https://github.com/Draveness/DKNightVersion) 已经很好的解决了这个问题。\n\n在正式介绍目前版本的实现之前，我会先简单介绍一下 1.0 时代的 DKNightVersion 的实现，为各位读者带来一些新的思路，也确实想梳理一下这个框架是如何演变的。\n\n> 我们会以对 `backgroundColor` 为例说明整个框架的工作原理。\n<!-- more -->\n\n<p align='center'>\n<img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\">\n</p>\n\n## 方法调剂的版本\n\n如何在不改变原有的架构，甚至不改变原有的代码的基础上，为应用优雅地添加夜间模式成为很多开发者不得不面对的问题。这也是 1.0 时代的 DKNightVersion 想要实现的目标。\n\n其核心思路就是**使用方法调剂修改 `backgroundColor` 的存取方法**。\n\n### 使用 nightBackgroundColor\n\n在思考之后，我想到，想要在不改动原有代码的基础上实现夜间模式只能通过在**分类**中添加 `nightBackgroundColor` 属性，并且使用方法调剂改变 `backgroundColor` 的 setter 方法。\n\n```objectivec\n- (void)hook_setBackgroundColor:(UIColor*)backgroundColor {\nif ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) {\n[self setNormalBackgroundColor:backgroundColor];\n}\n[self hook_setBackgroundColor:backgroundColor];\n}\n```\n\n在当前主题为 `DKThemeVersionNormal` 时，将颜色保存至 `normalBackgroundColor` 中，然后再调用原 `backgroundColor` 的 setter 方法，更新视图的颜色。\n\n### DKNightVersionManager\n\n这里只解决了颜色设置的问题，下面会说明，如果在主题改变时，实时更新颜色，而不用重新进入当前页面。\n\n整个 DKNightVersion 都是由一个 `DKNightVersionManager` 的单例来管理的，而它的主要工作就是负责**改变应用的主题**、并在主题改变时**通知其它视图更新颜色**：\n\n```objectivec\n- (void)changeColor:(id <DKNightVersionChangeColorProtocol>)object {\nif ([object respondsToSelector:@selector(changeColor)]) {\n[object changeColor];\n}\nif ([object respondsToSelector:@selector(subviews)]) {\nif (![object subviews]) {\n// Basic case, do nothing.\nreturn;\n} else {\nfor (id subview in [object subviews]) {\n// recursive darken all the subviews of current view.\n[self changeColor:subview];\nif ([subview respondsToSelector:@selector(changeColor)]) {\n[subview changeColor];\n}\n}\n}\n}\n}\n```\n\n如果主题更新，那么就会递归地调用 `changeColor` 方法，刷新全部的视图颜色，而这个方法的实现比较简单：\n\n```objectivec\n- (void)changeColor {\nif ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) {\nself.backgroundColor = self.normalBackgroundColor;\n} else {\nself.backgroundColor = self.nightBackgroundColor;\n}\n}\n```\n\n上面就是整个框架在 1.0 版本时的实现思路。不过这个版本的 DKNightVersion 在实际应用中会有比较多的问题：\n\n1. 在高速滚动的 `scrollView` 上面来回切换夜间模式，会出现颜色错乱的问题\n2. 由于对 `backgroundColor` 属性进行**不合适的**方法调剂，其行为无法预测，比如：在设置颜色后，再取出，不一定与设置时传入的颜色相同\n2. 无法适配第三方 UI 控件\n\n## 使用色表的版本\n\n为了解决 1.0 中的各种问题，我决定在 2.0 版本中放弃对 `nightBackgroundColor` 的使用，并且重新设计底层的实现，转而使用更为**稳定**、**安全**的方法实现夜间模式，先看一下效果图：\n\n<p align='center'>\n<img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\">\n</p>\n<p align='center'>\n<em>新的实现不仅能够支持夜间模式，而且能够支持多主题。</em>\n</p>\n\n### DKColorPicker\n\n与上一个版本实现上的不同，在 2.0 中删除了全部的 `nightBackgroundColor`，使用一个名为 `dk_backgroundColorPicker` 的属性取代它。\n\n```objectivec\n@property (nonatomic, copy) DKColorPicker dk_backgroundColorPicker;\n```\n\n这个属性其实就是一个 block，它接收参数 `DKThemeVersion *themeVersion`，但是会返回一个 `UIColor *`：\n\n> 在第一次传入 picker 或者每次主题改变时，都会将当前主题 `DKThemeVersion` 传入 picker 并执行，然后，将得到的 `UIColor` 赋值给对应的属性 `backgroundColor` 更新视图颜色。\n\n```objectivec\ntypedef UIColor *(^DKColorPicker)(DKThemeVersion *themeVersion);\n```\n\n比如下面使用 `DKColorPickerWithRGB` 创建一个临时的 `DKColorPicker`：\n\n1. 在 `DKThemeVersionNormal` 时返回 `0xffffff`\n2. 在 `DKThemeVersionNight` 时返回 `0x343434`\n3. 在自定义的主题下返回 `0xfafafa` （这里的顺序与色表中主题的顺序有关）\n\n```objectivec\ncell.dk_backgroundColorPicker = DKColorPickerWithRGB(0xffffff, 0x343434, 0xfafafa);\n```\n\n同时，每一个对象还持有一个 `pickers` 数组，来存储自己的全部 `DKColorPicker`：\n\n```objectivec\n@interface NSObject ()\n\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers;\n\n@end\n```\n\n在第一次使用这个属性时，当前对象注册为 `DKNightVersionThemeChangingNotificaiton` 通知的观察者。\n\n在每次收到通知时，都会调用 `night_update` 方法，将当前主题传入 `DKColorPicker`，并再次执行，并将结果传入对应的属性 `[self performSelector:sel withObject:result]`。\n\n```objectivec\n- (void)night_updateColor {\n[self.pickers enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull selector, DKColorPicker  _Nonnull picker, BOOL * _Nonnull stop) {\nSEL sel = NSSelectorFromString(selector);\nid result = picker(self.dk_manager.themeVersion);\n[UIView animateWithDuration:DKNightVersionAnimationDuration\nanimations:^{\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Warc-performSelector-leaks\"\n[self performSelector:sel withObject:result];\n#pragma clang diagnostic pop\n}];\n}];\n}\n```\n\n也就是说，在每次改变主题的时候，都会发出通知。\n\n### DKColorTable\n\n虽然我们在上面临时创建了一些 `DKColorPicker`。不过在 `DKNightVersion` 中，我更推荐使用色表，来减少相同的 `DKColorPicker` 的创建，并且能够更好地管理整个应用中的颜色：\n\n```objectivec\nNORMAL   NIGHT    RED\n#ffffff  #343434  #fafafa BG\n#aaaaaa  #313131  #aaaaaa SEP\n#0000ff  #ffffff  #fa0000 TINT\n#000000  #ffffff  #000000 TEXT\n#ffffff  #444444  #ffffff BAR\n```\n\n上面就是默认色表文件 `DKColorTable.txt` 中的内容，其中，第一行表示主题，`NORMAL` 主题必须存在，而且必须为第一列，而最右面的 `BG`、`SEP` 就是对应 `DKColorPicker` 的 key。\n\n```objectivec\nself.tableView.dk_backgroundColorPicker =  DKColorPickerWithKey(BG);\n```\n\n在使用时，上面的代码就相当于返回了一个在 `NORMAL` 时返回 `#ffffff`、`NIGHT` 时返回 `#343434` 以及 `RED` 时返回 `#fafafa` 的 `DKColorPicker`。\n\n### pickerify\n\n虽然说，我们使用色表以及 `DKColorPicker` 解决了，但是，到目前为止我们还没有解决第三方框架的问题。\n\n比如我们使用了某个第三方框架，或者自己添加了某个 `color` 属性，比如说：\n\n```objectivec\n@interface DKView ()\n\n@property (nonatomic, strong) UIColor *weirdColor;\n\n@end\n```\n\n`weirdColor` 并没有对应的 `DKColorPicker`，但是，我们可以通过 `pickerify` 在想要使用 `dk_weirdColorPicker` 的地方生成这个对应的 picker：\n\n```objectivec\n@pickerify(DKView, weirdColor);\n```\n\n然后，我们就可以使用 `dk_weirdColorPicker` 属性了：\n\n```objectivec\nview.dk_weirdColorPicker = DKColorPickerWithKey(BG);\n```\n\n`pickerify` 其实是一个宏：\n\n```objectivec\n#define pickerify(KLASS, PROPERTY) interface \\\nKLASS (Night) \\\n@property (nonatomic, copy, setter = dk_set ## PROPERTY ## Picker:) DKColorPicker dk_ ## PROPERTY ## Picker; \\\n@end \\\n@interface \\\nKLASS () \\\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers; \\\n@end \\\n@implementation \\\nKLASS (Night) \\\n- (DKColorPicker)dk_ ## PROPERTY ## Picker { \\\nreturn objc_getAssociatedObject(self, @selector(dk_ ## PROPERTY ## Picker)); \\\n} \\\n- (void)dk_set ## PROPERTY ## Picker:(DKColorPicker)picker { \\\nobjc_setAssociatedObject(self, @selector(dk_ ## PROPERTY ## Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC); \\\n[self setValue:picker(self.dk_manager.themeVersion) forKeyPath:@keypath(self, PROPERTY)];\\\n[self.pickers setValue:[picker copy] forKey:_DKSetterWithPROPERTYerty(@#PROPERTY)]; \\\n} \\\n@end\n```\n\n这个宏根据传入的类和属性名，为我们生成了对应 `picker` 的存取方法，它也可以说是一种元编程的手段。\n\n> 这里生成的 setter 方法不是标准意义上的驼峰命名法 `dk_setweirdColorPicker:`，因为我不知道怎么才能让大写首字母之后的属性添加到这里（如果各位读者有解决方案，欢迎提 PR 或者 issue）。\n\n## 嵌入式 Ruby\n\n由于框架中很多的代码，都是重复的，所以在这里使用了**嵌入式 Ruby 模板**来生成对应的文件 `color.m.irb`：\n\n```objectivec\n//\n//  <%= klass.name %>+Night.m\n//  <%= klass.name %>+Night\n//\n//  Copyright (c) 2015 Draveness. All rights reserved.\n//\n//  These files are generated by ruby script, if you want to modify code\n//  in this file, you are supposed to update the ruby code, run it and\n//  test it. And finally open a pull request.\n\n#import \"<%= klass.name %>+Night.h\"\n#import \"DKNightVersionManager.h\"\n#import <objc/runtime.h>\n\n@interface <%= klass.name %> ()\n\n@property (nonatomic, strong) NSMutableDictionary<NSString *, DKColorPicker> *pickers;\n\n@end\n\n@implementation <%= klass.name %> (Night)\n\n<% klass.properties.each do |property| %><%= \"\"\"\n- (DKColorPicker)dk_#{property.name}Picker {\nreturn objc_getAssociatedObject(self, @selector(dk_#{property.name}Picker));\n}\n\n- (void)dk_set#{property.cap_name}Picker:(DKColorPicker)picker {\nobjc_setAssociatedObject(self, @selector(dk_#{property.name}Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);\nself.#{property.name} = picker(self.dk_manager.themeVersion);\n[self.pickers setValue:[picker copy] forKey:@\\\"#{property.setter}\\\"];\n}\n\"\"\" %><% end %>\n\n@end\n```\n\n","slug":"成熟的夜间模式方案","published":1,"updated":"2019-05-28T09:53:58.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjywrfymp000vfw04yna9qkfl","content":"<p> <a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> 摘自这个框架的设计者。</p>\n<p>其实夜间模式的实现就是相当于<strong>多主题加颜色管理</strong>。而最新版本的 <a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> 已经很好的解决了这个问题。</p>\n<p>在正式介绍目前版本的实现之前，我会先简单介绍一下 1.0 时代的 DKNightVersion 的实现，为各位读者带来一些新的思路，也确实想梳理一下这个框架是如何演变的。</p>\n<blockquote>\n<p>我们会以对 <code>backgroundColor</code> 为例说明整个框架的工作原理。<br><a id=\"more\"></a></p>\n</blockquote>\n<p align=\"center\"><br><img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\"><br></p>\n\n<h2 id=\"方法调剂的版本\"><a href=\"#方法调剂的版本\" class=\"headerlink\" title=\"方法调剂的版本\"></a>方法调剂的版本</h2><p>如何在不改变原有的架构，甚至不改变原有的代码的基础上，为应用优雅地添加夜间模式成为很多开发者不得不面对的问题。这也是 1.0 时代的 DKNightVersion 想要实现的目标。</p>\n<p>其核心思路就是<strong>使用方法调剂修改 <code>backgroundColor</code> 的存取方法</strong>。</p>\n<h3 id=\"使用-nightBackgroundColor\"><a href=\"#使用-nightBackgroundColor\" class=\"headerlink\" title=\"使用 nightBackgroundColor\"></a>使用 nightBackgroundColor</h3><p>在思考之后，我想到，想要在不改动原有代码的基础上实现夜间模式只能通过在<strong>分类</strong>中添加 <code>nightBackgroundColor</code> 属性，并且使用方法调剂改变 <code>backgroundColor</code> 的 setter 方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)hook_setBackgroundColor:(<span class=\"built_in\">UIColor</span>*)backgroundColor &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setNormalBackgroundColor:backgroundColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> hook_setBackgroundColor:backgroundColor];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在当前主题为 <code>DKThemeVersionNormal</code> 时，将颜色保存至 <code>normalBackgroundColor</code> 中，然后再调用原 <code>backgroundColor</code> 的 setter 方法，更新视图的颜色。</p>\n<h3 id=\"DKNightVersionManager\"><a href=\"#DKNightVersionManager\" class=\"headerlink\" title=\"DKNightVersionManager\"></a>DKNightVersionManager</h3><p>这里只解决了颜色设置的问题，下面会说明，如果在主题改变时，实时更新颜色，而不用重新进入当前页面。</p>\n<p>整个 DKNightVersion 都是由一个 <code>DKNightVersionManager</code> 的单例来管理的，而它的主要工作就是负责<strong>改变应用的主题</strong>、并在主题改变时<strong>通知其它视图更新颜色</strong>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)changeColor:(<span class=\"keyword\">id</span> &lt;DKNightVersionChangeColorProtocol&gt;)object &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([object respondsToSelector:<span class=\"keyword\">@selector</span>(changeColor)]) &#123;</span><br><span class=\"line\">[object changeColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([object respondsToSelector:<span class=\"keyword\">@selector</span>(subviews)]) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (![object subviews]) &#123;</span><br><span class=\"line\"><span class=\"comment\">// Basic case, do nothing.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> subview <span class=\"keyword\">in</span> [object subviews]) &#123;</span><br><span class=\"line\"><span class=\"comment\">// recursive darken all the subviews of current view.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> changeColor:subview];</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([subview respondsToSelector:<span class=\"keyword\">@selector</span>(changeColor)]) &#123;</span><br><span class=\"line\">[subview changeColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果主题更新，那么就会递归地调用 <code>changeColor</code> 方法，刷新全部的视图颜色，而这个方法的实现比较简单：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)changeColor &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.backgroundColor = <span class=\"keyword\">self</span>.normalBackgroundColor;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.backgroundColor = <span class=\"keyword\">self</span>.nightBackgroundColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是整个框架在 1.0 版本时的实现思路。不过这个版本的 DKNightVersion 在实际应用中会有比较多的问题：</p>\n<ol>\n<li>在高速滚动的 <code>scrollView</code> 上面来回切换夜间模式，会出现颜色错乱的问题</li>\n<li>由于对 <code>backgroundColor</code> 属性进行<strong>不合适的</strong>方法调剂，其行为无法预测，比如：在设置颜色后，再取出，不一定与设置时传入的颜色相同</li>\n<li>无法适配第三方 UI 控件</li>\n</ol>\n<h2 id=\"使用色表的版本\"><a href=\"#使用色表的版本\" class=\"headerlink\" title=\"使用色表的版本\"></a>使用色表的版本</h2><p>为了解决 1.0 中的各种问题，我决定在 2.0 版本中放弃对 <code>nightBackgroundColor</code> 的使用，并且重新设计底层的实现，转而使用更为<strong>稳定</strong>、<strong>安全</strong>的方法实现夜间模式，先看一下效果图：</p>\n<p align=\"center\"><br><img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\"><br></p><br><p align=\"center\"><br><em>新的实现不仅能够支持夜间模式，而且能够支持多主题。</em><br></p>\n\n<h3 id=\"DKColorPicker\"><a href=\"#DKColorPicker\" class=\"headerlink\" title=\"DKColorPicker\"></a>DKColorPicker</h3><p>与上一个版本实现上的不同，在 2.0 中删除了全部的 <code>nightBackgroundColor</code>，使用一个名为 <code>dk_backgroundColorPicker</code> 的属性取代它。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) DKColorPicker dk_backgroundColorPicker;</span><br></pre></td></tr></table></figure>\n<p>这个属性其实就是一个 block，它接收参数 <code>DKThemeVersion *themeVersion</code>，但是会返回一个 <code>UIColor *</code>：</p>\n<blockquote>\n<p>在第一次传入 picker 或者每次主题改变时，都会将当前主题 <code>DKThemeVersion</code> 传入 picker 并执行，然后，将得到的 <code>UIColor</code> 赋值给对应的属性 <code>backgroundColor</code> 更新视图颜色。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">UIColor</span> *(^DKColorPicker)(DKThemeVersion *themeVersion);</span><br></pre></td></tr></table></figure>\n<p>比如下面使用 <code>DKColorPickerWithRGB</code> 创建一个临时的 <code>DKColorPicker</code>：</p>\n<ol>\n<li>在 <code>DKThemeVersionNormal</code> 时返回 <code>0xffffff</code></li>\n<li>在 <code>DKThemeVersionNight</code> 时返回 <code>0x343434</code></li>\n<li>在自定义的主题下返回 <code>0xfafafa</code> （这里的顺序与色表中主题的顺序有关）</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.dk_backgroundColorPicker = DKColorPickerWithRGB(<span class=\"number\">0xffffff</span>, <span class=\"number\">0x343434</span>, <span class=\"number\">0xfafafa</span>);</span><br></pre></td></tr></table></figure>\n<p>同时，每一个对象还持有一个 <code>pickers</code> 数组，来存储自己的全部 <code>DKColorPicker</code>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>在第一次使用这个属性时，当前对象注册为 <code>DKNightVersionThemeChangingNotificaiton</code> 通知的观察者。</p>\n<p>在每次收到通知时，都会调用 <code>night_update</code> 方法，将当前主题传入 <code>DKColorPicker</code>，并再次执行，并将结果传入对应的属性 <code>[self performSelector:sel withObject:result]</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)night_updateColor &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.pickers enumerateKeysAndObjectsUsingBlock:^(<span class=\"built_in\">NSString</span> * _Nonnull selector, DKColorPicker  _Nonnull picker, <span class=\"built_in\">BOOL</span> * _Nonnull stop) &#123;</span><br><span class=\"line\">SEL sel = <span class=\"built_in\">NSSelectorFromString</span>(selector);</span><br><span class=\"line\"><span class=\"keyword\">id</span> result = picker(<span class=\"keyword\">self</span>.dk_manager.themeVersion);</span><br><span class=\"line\">[<span class=\"built_in\">UIView</span> animateWithDuration:DKNightVersionAnimationDuration</span><br><span class=\"line\">animations:^&#123;</span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Warc-performSelector-leaks\"</span></span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> performSelector:sel withObject:result];</span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，在每次改变主题的时候，都会发出通知。</p>\n<h3 id=\"DKColorTable\"><a href=\"#DKColorTable\" class=\"headerlink\" title=\"DKColorTable\"></a>DKColorTable</h3><p>虽然我们在上面临时创建了一些 <code>DKColorPicker</code>。不过在 <code>DKNightVersion</code> 中，我更推荐使用色表，来减少相同的 <code>DKColorPicker</code> 的创建，并且能够更好地管理整个应用中的颜色：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NORMAL   NIGHT    RED</span><br><span class=\"line\"><span class=\"meta\">#ffffff  #343434  #fafafa BG</span></span><br><span class=\"line\"><span class=\"meta\">#aaaaaa  #313131  #aaaaaa SEP</span></span><br><span class=\"line\"><span class=\"meta\">#0000ff  #ffffff  #fa0000 TINT</span></span><br><span class=\"line\"><span class=\"meta\">#000000  #ffffff  #000000 TEXT</span></span><br><span class=\"line\"><span class=\"meta\">#ffffff  #444444  #ffffff BAR</span></span><br></pre></td></tr></table></figure>\n<p>上面就是默认色表文件 <code>DKColorTable.txt</code> 中的内容，其中，第一行表示主题，<code>NORMAL</code> 主题必须存在，而且必须为第一列，而最右面的 <code>BG</code>、<code>SEP</code> 就是对应 <code>DKColorPicker</code> 的 key。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.tableView.dk_backgroundColorPicker =  DKColorPickerWithKey(BG);</span><br></pre></td></tr></table></figure>\n<p>在使用时，上面的代码就相当于返回了一个在 <code>NORMAL</code> 时返回 <code>#ffffff</code>、<code>NIGHT</code> 时返回 <code>#343434</code> 以及 <code>RED</code> 时返回 <code>#fafafa</code> 的 <code>DKColorPicker</code>。</p>\n<h3 id=\"pickerify\"><a href=\"#pickerify\" class=\"headerlink\" title=\"pickerify\"></a>pickerify</h3><p>虽然说，我们使用色表以及 <code>DKColorPicker</code> 解决了，但是，到目前为止我们还没有解决第三方框架的问题。</p>\n<p>比如我们使用了某个第三方框架，或者自己添加了某个 <code>color</code> 属性，比如说：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DKView</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *weirdColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p><code>weirdColor</code> 并没有对应的 <code>DKColorPicker</code>，但是，我们可以通过 <code>pickerify</code> 在想要使用 <code>dk_weirdColorPicker</code> 的地方生成这个对应的 picker：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@pickerify(DKView, weirdColor);</span><br></pre></td></tr></table></figure>\n<p>然后，我们就可以使用 <code>dk_weirdColorPicker</code> 属性了：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.dk_weirdColorPicker = DKColorPickerWithKey(BG);</span><br></pre></td></tr></table></figure>\n<p><code>pickerify</code> 其实是一个宏：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define pickerify(KLASS, PROPERTY) interface \\</span></span><br><span class=\"line\">KLASS (Night) \\</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">setter</span> = dk_set <span class=\"meta\">## PROPERTY ## Picker:) DKColorPicker dk_ ## PROPERTY ## Picker; \\</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span> \\</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> \\</span></span><br><span class=\"line\">KLASS () \\</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers; \\</span><br><span class=\"line\"><span class=\"keyword\">@end</span> \\</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> \\</span></span><br><span class=\"line\">KLASS (Night) \\</span><br><span class=\"line\">- (DKColorPicker)dk_ <span class=\"meta\">## PROPERTY ## Picker &#123; \\</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(dk_ <span class=\"meta\">## PROPERTY ## Picker)); \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dk_set <span class=\"meta\">## PROPERTY ## Picker:(DKColorPicker)picker &#123; \\</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(dk_ <span class=\"meta\">## PROPERTY ## Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC); \\</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> setValue:picker(<span class=\"keyword\">self</span>.dk_manager.themeVersion) forKeyPath:@keypath(<span class=\"keyword\">self</span>, PROPERTY)];\\</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.pickers setValue:[picker <span class=\"keyword\">copy</span>] forKey:_DKSetterWithPROPERTYerty(@<span class=\"meta\">#PROPERTY)]; \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这个宏根据传入的类和属性名，为我们生成了对应 <code>picker</code> 的存取方法，它也可以说是一种元编程的手段。</p>\n<blockquote>\n<p>这里生成的 setter 方法不是标准意义上的驼峰命名法 <code>dk_setweirdColorPicker:</code>，因为我不知道怎么才能让大写首字母之后的属性添加到这里（如果各位读者有解决方案，欢迎提 PR 或者 issue）。</p>\n</blockquote>\n<h2 id=\"嵌入式-Ruby\"><a href=\"#嵌入式-Ruby\" class=\"headerlink\" title=\"嵌入式 Ruby\"></a>嵌入式 Ruby</h2><p>由于框架中很多的代码，都是重复的，所以在这里使用了<strong>嵌入式 Ruby 模板</strong>来生成对应的文件 <code>color.m.irb</code>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;%= klass.name %&gt;+Night.m</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;%= klass.name %&gt;+Night</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 Draveness. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  These files are generated by ruby script, if you want to modify code</span></span><br><span class=\"line\"><span class=\"comment\">//  in this file, you are supposed to update the ruby code, run it and</span></span><br><span class=\"line\"><span class=\"comment\">//  test it. And finally open a pull request.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"&lt;%= klass.name %&gt;+Night.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"DKNightVersionManager.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> &lt;%= <span class=\"title\">klass</span>.<span class=\"title\">name</span> %&gt; ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> &lt;%= <span class=\"title\">klass</span>.<span class=\"title\">name</span> %&gt; (<span class=\"title\">Night</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% klass.properties.each <span class=\"keyword\">do</span> |property| %&gt;&lt;%= <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">- (DKColorPicker)dk_#&#123;property.name&#125;Picker &#123;</span></span><br><span class=\"line\"><span class=\"string\">return objc_getAssociatedObject(self, @selector(dk_#&#123;property.name&#125;Picker));</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- (void)dk_set#&#123;property.cap_name&#125;Picker:(DKColorPicker)picker &#123;</span></span><br><span class=\"line\"><span class=\"string\">objc_setAssociatedObject(self, @selector(dk_#&#123;property.name&#125;Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);</span></span><br><span class=\"line\"><span class=\"string\">self.#&#123;property.name&#125; = picker(self.dk_manager.themeVersion);</span></span><br><span class=\"line\"><span class=\"string\">[self.pickers setValue:[picker copy] forKey:@\\\"#&#123;property.setter&#125;\\\"];</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span> %&gt;&lt;% end %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p> <a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> 摘自这个框架的设计者。</p>\n<p>其实夜间模式的实现就是相当于<strong>多主题加颜色管理</strong>。而最新版本的 <a href=\"https://github.com/Draveness/DKNightVersion\" target=\"_blank\" rel=\"noopener\">DKNightVersion</a> 已经很好的解决了这个问题。</p>\n<p>在正式介绍目前版本的实现之前，我会先简单介绍一下 1.0 时代的 DKNightVersion 的实现，为各位读者带来一些新的思路，也确实想梳理一下这个框架是如何演变的。</p>\n<blockquote>\n<p>我们会以对 <code>backgroundColor</code> 为例说明整个框架的工作原理。<br>","more":"</p>\n</blockquote>\n<p align=\"center\"><br><img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\"><br></p>\n\n<h2 id=\"方法调剂的版本\"><a href=\"#方法调剂的版本\" class=\"headerlink\" title=\"方法调剂的版本\"></a>方法调剂的版本</h2><p>如何在不改变原有的架构，甚至不改变原有的代码的基础上，为应用优雅地添加夜间模式成为很多开发者不得不面对的问题。这也是 1.0 时代的 DKNightVersion 想要实现的目标。</p>\n<p>其核心思路就是<strong>使用方法调剂修改 <code>backgroundColor</code> 的存取方法</strong>。</p>\n<h3 id=\"使用-nightBackgroundColor\"><a href=\"#使用-nightBackgroundColor\" class=\"headerlink\" title=\"使用 nightBackgroundColor\"></a>使用 nightBackgroundColor</h3><p>在思考之后，我想到，想要在不改动原有代码的基础上实现夜间模式只能通过在<strong>分类</strong>中添加 <code>nightBackgroundColor</code> 属性，并且使用方法调剂改变 <code>backgroundColor</code> 的 setter 方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)hook_setBackgroundColor:(<span class=\"built_in\">UIColor</span>*)backgroundColor &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> setNormalBackgroundColor:backgroundColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> hook_setBackgroundColor:backgroundColor];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在当前主题为 <code>DKThemeVersionNormal</code> 时，将颜色保存至 <code>normalBackgroundColor</code> 中，然后再调用原 <code>backgroundColor</code> 的 setter 方法，更新视图的颜色。</p>\n<h3 id=\"DKNightVersionManager\"><a href=\"#DKNightVersionManager\" class=\"headerlink\" title=\"DKNightVersionManager\"></a>DKNightVersionManager</h3><p>这里只解决了颜色设置的问题，下面会说明，如果在主题改变时，实时更新颜色，而不用重新进入当前页面。</p>\n<p>整个 DKNightVersion 都是由一个 <code>DKNightVersionManager</code> 的单例来管理的，而它的主要工作就是负责<strong>改变应用的主题</strong>、并在主题改变时<strong>通知其它视图更新颜色</strong>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)changeColor:(<span class=\"keyword\">id</span> &lt;DKNightVersionChangeColorProtocol&gt;)object &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([object respondsToSelector:<span class=\"keyword\">@selector</span>(changeColor)]) &#123;</span><br><span class=\"line\">[object changeColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([object respondsToSelector:<span class=\"keyword\">@selector</span>(subviews)]) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (![object subviews]) &#123;</span><br><span class=\"line\"><span class=\"comment\">// Basic case, do nothing.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> subview <span class=\"keyword\">in</span> [object subviews]) &#123;</span><br><span class=\"line\"><span class=\"comment\">// recursive darken all the subviews of current view.</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> changeColor:subview];</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([subview respondsToSelector:<span class=\"keyword\">@selector</span>(changeColor)]) &#123;</span><br><span class=\"line\">[subview changeColor];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果主题更新，那么就会递归地调用 <code>changeColor</code> 方法，刷新全部的视图颜色，而这个方法的实现比较简单：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)changeColor &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.backgroundColor = <span class=\"keyword\">self</span>.normalBackgroundColor;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">self</span>.backgroundColor = <span class=\"keyword\">self</span>.nightBackgroundColor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是整个框架在 1.0 版本时的实现思路。不过这个版本的 DKNightVersion 在实际应用中会有比较多的问题：</p>\n<ol>\n<li>在高速滚动的 <code>scrollView</code> 上面来回切换夜间模式，会出现颜色错乱的问题</li>\n<li>由于对 <code>backgroundColor</code> 属性进行<strong>不合适的</strong>方法调剂，其行为无法预测，比如：在设置颜色后，再取出，不一定与设置时传入的颜色相同</li>\n<li>无法适配第三方 UI 控件</li>\n</ol>\n<h2 id=\"使用色表的版本\"><a href=\"#使用色表的版本\" class=\"headerlink\" title=\"使用色表的版本\"></a>使用色表的版本</h2><p>为了解决 1.0 中的各种问题，我决定在 2.0 版本中放弃对 <code>nightBackgroundColor</code> 的使用，并且重新设计底层的实现，转而使用更为<strong>稳定</strong>、<strong>安全</strong>的方法实现夜间模式，先看一下效果图：</p>\n<p align=\"center\"><br><img src=\"https://raw.githubusercontent.com/Draveness/DKNightVersion/master/images/DKNightVersion.gif\"><br></p><br><p align=\"center\"><br><em>新的实现不仅能够支持夜间模式，而且能够支持多主题。</em><br></p>\n\n<h3 id=\"DKColorPicker\"><a href=\"#DKColorPicker\" class=\"headerlink\" title=\"DKColorPicker\"></a>DKColorPicker</h3><p>与上一个版本实现上的不同，在 2.0 中删除了全部的 <code>nightBackgroundColor</code>，使用一个名为 <code>dk_backgroundColorPicker</code> 的属性取代它。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) DKColorPicker dk_backgroundColorPicker;</span><br></pre></td></tr></table></figure>\n<p>这个属性其实就是一个 block，它接收参数 <code>DKThemeVersion *themeVersion</code>，但是会返回一个 <code>UIColor *</code>：</p>\n<blockquote>\n<p>在第一次传入 picker 或者每次主题改变时，都会将当前主题 <code>DKThemeVersion</code> 传入 picker 并执行，然后，将得到的 <code>UIColor</code> 赋值给对应的属性 <code>backgroundColor</code> 更新视图颜色。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">UIColor</span> *(^DKColorPicker)(DKThemeVersion *themeVersion);</span><br></pre></td></tr></table></figure>\n<p>比如下面使用 <code>DKColorPickerWithRGB</code> 创建一个临时的 <code>DKColorPicker</code>：</p>\n<ol>\n<li>在 <code>DKThemeVersionNormal</code> 时返回 <code>0xffffff</code></li>\n<li>在 <code>DKThemeVersionNight</code> 时返回 <code>0x343434</code></li>\n<li>在自定义的主题下返回 <code>0xfafafa</code> （这里的顺序与色表中主题的顺序有关）</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cell.dk_backgroundColorPicker = DKColorPickerWithRGB(<span class=\"number\">0xffffff</span>, <span class=\"number\">0x343434</span>, <span class=\"number\">0xfafafa</span>);</span><br></pre></td></tr></table></figure>\n<p>同时，每一个对象还持有一个 <code>pickers</code> 数组，来存储自己的全部 <code>DKColorPicker</code>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>在第一次使用这个属性时，当前对象注册为 <code>DKNightVersionThemeChangingNotificaiton</code> 通知的观察者。</p>\n<p>在每次收到通知时，都会调用 <code>night_update</code> 方法，将当前主题传入 <code>DKColorPicker</code>，并再次执行，并将结果传入对应的属性 <code>[self performSelector:sel withObject:result]</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)night_updateColor &#123;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.pickers enumerateKeysAndObjectsUsingBlock:^(<span class=\"built_in\">NSString</span> * _Nonnull selector, DKColorPicker  _Nonnull picker, <span class=\"built_in\">BOOL</span> * _Nonnull stop) &#123;</span><br><span class=\"line\">SEL sel = <span class=\"built_in\">NSSelectorFromString</span>(selector);</span><br><span class=\"line\"><span class=\"keyword\">id</span> result = picker(<span class=\"keyword\">self</span>.dk_manager.themeVersion);</span><br><span class=\"line\">[<span class=\"built_in\">UIView</span> animateWithDuration:DKNightVersionAnimationDuration</span><br><span class=\"line\">animations:^&#123;</span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic push</span></span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic ignored <span class=\"meta-string\">\"-Warc-performSelector-leaks\"</span></span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> performSelector:sel withObject:result];</span><br><span class=\"line\"><span class=\"meta\">#pragma clang diagnostic pop</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，在每次改变主题的时候，都会发出通知。</p>\n<h3 id=\"DKColorTable\"><a href=\"#DKColorTable\" class=\"headerlink\" title=\"DKColorTable\"></a>DKColorTable</h3><p>虽然我们在上面临时创建了一些 <code>DKColorPicker</code>。不过在 <code>DKNightVersion</code> 中，我更推荐使用色表，来减少相同的 <code>DKColorPicker</code> 的创建，并且能够更好地管理整个应用中的颜色：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NORMAL   NIGHT    RED</span><br><span class=\"line\"><span class=\"meta\">#ffffff  #343434  #fafafa BG</span></span><br><span class=\"line\"><span class=\"meta\">#aaaaaa  #313131  #aaaaaa SEP</span></span><br><span class=\"line\"><span class=\"meta\">#0000ff  #ffffff  #fa0000 TINT</span></span><br><span class=\"line\"><span class=\"meta\">#000000  #ffffff  #000000 TEXT</span></span><br><span class=\"line\"><span class=\"meta\">#ffffff  #444444  #ffffff BAR</span></span><br></pre></td></tr></table></figure>\n<p>上面就是默认色表文件 <code>DKColorTable.txt</code> 中的内容，其中，第一行表示主题，<code>NORMAL</code> 主题必须存在，而且必须为第一列，而最右面的 <code>BG</code>、<code>SEP</code> 就是对应 <code>DKColorPicker</code> 的 key。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">self</span>.tableView.dk_backgroundColorPicker =  DKColorPickerWithKey(BG);</span><br></pre></td></tr></table></figure>\n<p>在使用时，上面的代码就相当于返回了一个在 <code>NORMAL</code> 时返回 <code>#ffffff</code>、<code>NIGHT</code> 时返回 <code>#343434</code> 以及 <code>RED</code> 时返回 <code>#fafafa</code> 的 <code>DKColorPicker</code>。</p>\n<h3 id=\"pickerify\"><a href=\"#pickerify\" class=\"headerlink\" title=\"pickerify\"></a>pickerify</h3><p>虽然说，我们使用色表以及 <code>DKColorPicker</code> 解决了，但是，到目前为止我们还没有解决第三方框架的问题。</p>\n<p>比如我们使用了某个第三方框架，或者自己添加了某个 <code>color</code> 属性，比如说：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">DKView</span> ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIColor</span> *weirdColor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p><code>weirdColor</code> 并没有对应的 <code>DKColorPicker</code>，但是，我们可以通过 <code>pickerify</code> 在想要使用 <code>dk_weirdColorPicker</code> 的地方生成这个对应的 picker：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@pickerify(DKView, weirdColor);</span><br></pre></td></tr></table></figure>\n<p>然后，我们就可以使用 <code>dk_weirdColorPicker</code> 属性了：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.dk_weirdColorPicker = DKColorPickerWithKey(BG);</span><br></pre></td></tr></table></figure>\n<p><code>pickerify</code> 其实是一个宏：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define pickerify(KLASS, PROPERTY) interface \\</span></span><br><span class=\"line\">KLASS (Night) \\</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">setter</span> = dk_set <span class=\"meta\">## PROPERTY ## Picker:) DKColorPicker dk_ ## PROPERTY ## Picker; \\</span></span><br><span class=\"line\"><span class=\"keyword\">@end</span> \\</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> \\</span></span><br><span class=\"line\">KLASS () \\</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers; \\</span><br><span class=\"line\"><span class=\"keyword\">@end</span> \\</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> \\</span></span><br><span class=\"line\">KLASS (Night) \\</span><br><span class=\"line\">- (DKColorPicker)dk_ <span class=\"meta\">## PROPERTY ## Picker &#123; \\</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(dk_ <span class=\"meta\">## PROPERTY ## Picker)); \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dk_set <span class=\"meta\">## PROPERTY ## Picker:(DKColorPicker)picker &#123; \\</span></span><br><span class=\"line\">objc_setAssociatedObject(<span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(dk_ <span class=\"meta\">## PROPERTY ## Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC); \\</span></span><br><span class=\"line\">[<span class=\"keyword\">self</span> setValue:picker(<span class=\"keyword\">self</span>.dk_manager.themeVersion) forKeyPath:@keypath(<span class=\"keyword\">self</span>, PROPERTY)];\\</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.pickers setValue:[picker <span class=\"keyword\">copy</span>] forKey:_DKSetterWithPROPERTYerty(@<span class=\"meta\">#PROPERTY)]; \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这个宏根据传入的类和属性名，为我们生成了对应 <code>picker</code> 的存取方法，它也可以说是一种元编程的手段。</p>\n<blockquote>\n<p>这里生成的 setter 方法不是标准意义上的驼峰命名法 <code>dk_setweirdColorPicker:</code>，因为我不知道怎么才能让大写首字母之后的属性添加到这里（如果各位读者有解决方案，欢迎提 PR 或者 issue）。</p>\n</blockquote>\n<h2 id=\"嵌入式-Ruby\"><a href=\"#嵌入式-Ruby\" class=\"headerlink\" title=\"嵌入式 Ruby\"></a>嵌入式 Ruby</h2><p>由于框架中很多的代码，都是重复的，所以在这里使用了<strong>嵌入式 Ruby 模板</strong>来生成对应的文件 <code>color.m.irb</code>：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;%= klass.name %&gt;+Night.m</span></span><br><span class=\"line\"><span class=\"comment\">//  &lt;%= klass.name %&gt;+Night</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2015 Draveness. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  These files are generated by ruby script, if you want to modify code</span></span><br><span class=\"line\"><span class=\"comment\">//  in this file, you are supposed to update the ruby code, run it and</span></span><br><span class=\"line\"><span class=\"comment\">//  test it. And finally open a pull request.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"&lt;%= klass.name %&gt;+Night.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"DKNightVersionManager.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> &lt;%= <span class=\"title\">klass</span>.<span class=\"title\">name</span> %&gt; ()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, DKColorPicker&gt; *pickers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> &lt;%= <span class=\"title\">klass</span>.<span class=\"title\">name</span> %&gt; (<span class=\"title\">Night</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% klass.properties.each <span class=\"keyword\">do</span> |property| %&gt;&lt;%= <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">- (DKColorPicker)dk_#&#123;property.name&#125;Picker &#123;</span></span><br><span class=\"line\"><span class=\"string\">return objc_getAssociatedObject(self, @selector(dk_#&#123;property.name&#125;Picker));</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- (void)dk_set#&#123;property.cap_name&#125;Picker:(DKColorPicker)picker &#123;</span></span><br><span class=\"line\"><span class=\"string\">objc_setAssociatedObject(self, @selector(dk_#&#123;property.name&#125;Picker), picker, OBJC_ASSOCIATION_COPY_NONATOMIC);</span></span><br><span class=\"line\"><span class=\"string\">self.#&#123;property.name&#125; = picker(self.dk_manager.themeVersion);</span></span><br><span class=\"line\"><span class=\"string\">[self.pickers setValue:[picker copy] forKey:@\\\"#&#123;property.setter&#125;\\\"];</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span> %&gt;&lt;% end %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjywrfylw0000fw045kqin7bi","category_id":"cjywrfym40004fw04dirb6sjz","_id":"cjywrfymb000bfw046qscmsx5"},{"post_id":"cjywrfym90009fw04hhqjf454","category_id":"cjywrfym80008fw04lf2hltxk","_id":"cjywrfymg000ffw04syuvov08"},{"post_id":"cjywrfym10002fw0477k4mdcb","category_id":"cjywrfym80008fw04lf2hltxk","_id":"cjywrfymi000ifw04joh65d0r"},{"post_id":"cjywrfym50005fw04zfryjdfx","category_id":"cjywrfym80008fw04lf2hltxk","_id":"cjywrfymj000kfw049wheldvd"},{"post_id":"cjywrfymh000hfw04eyi2v8u8","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfyml000ofw04a2yw6xhz"},{"post_id":"cjywrfym60006fw04fajtrxui","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymn000rfw04lfrc40yj"},{"post_id":"cjywrfymi000jfw041m0k90cf","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymo000tfw04zusqcwl7"},{"post_id":"cjywrfymk000mfw04czyywfw0","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymp000wfw0494r90gee"},{"post_id":"cjywrfym80007fw04hx7cra6v","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymq000xfw04721eb0f8"},{"post_id":"cjywrfyml000nfw04p0fpjaao","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymr000zfw04sd6voun9"},{"post_id":"cjywrfymm000qfw044lssmsjo","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymr0010fw04ilsyu1ra"},{"post_id":"cjywrfyma000afw04cs996l5c","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymr0011fw04nj3gtk2h"},{"post_id":"cjywrfymn000sfw04ikhc4fyv","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfymr0012fw0470ii650a"},{"post_id":"cjywrfymp000vfw04yna9qkfl","category_id":"cjywrfym80008fw04lf2hltxk","_id":"cjywrfymr0013fw047iz1cvkj"},{"post_id":"cjywrfymd000dfw04scvuocng","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfyms0014fw04p8k3blkt"},{"post_id":"cjywrfymg000efw049t1u0y62","category_id":"cjywrfymh000gfw04rhebrd7w","_id":"cjywrfyms0015fw04kd8kc8j5"}],"PostTag":[],"Tag":[]}}